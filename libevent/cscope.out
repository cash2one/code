cscope 15 $HOME/workspace/libevent-1.4.13-stable -q 0000002543 0000454351
	@WIN32-Code/config.h

8 
	#DNS_USE_FTIME_FOR_ID
 1

	)

35 
	#HAVE_FCNTL_H
 1

	)

68 
	#HAVE_MEMORY_H
 1

	)

95 
	#HAVE_SIGNAL
 1

	)

98 
	#HAVE_SIGNAL_H
 1

	)

101 
	#HAVE_STDARG_H
 1

	)

107 
	#HAVE_STDLIB_H
 1

	)

110 
	#HAVE_STRINGS_H
 1

	)

113 
	#HAVE_STRING_H
 1

	)

125 
	#HAVE_STRUCT_IN6_ADDR
 1

	)

167 
	#HAVE_TIMERCMP
 1

	)

170 
	#HAVE_TIMERISSET
 1

	)

182 
	#PACKAGE
 "libevít"

	)

185 
	#PACKAGE_BUGREPORT
 ""

	)

188 
	#PACKAGE_NAME
 ""

	)

191 
	#PACKAGE_STRING
 ""

	)

194 
	#PACKAGE_TARNAME
 ""

	)

197 
	#PACKAGE_VERSION
 ""

	)

200 
	#STDC_HEADERS
 1

	)

203 
	#TIME_WITH_SYS_TIME
 1

	)

206 
	#VERSION
 "1.3.99-åunk"

	)

209 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1300

210 
	#__func__
 "??"

	)

212 
	#__func__
 
__FUNCTION__


	)

220 #i‚de‡
__˝lu•lus


221 
	#ölöe
 
__ölöe


	)

231 
	#sockÀn_t
 

	)

234 
	#uöt16_t
 

	)

237 
	#uöt32_t
 

	)

240 
	#uöt64_t
 
__uöt64_t


	)

243 
	#uöt8_t
 

	)

	@WIN32-Code/event-config.h

6 #i‚de‡
_EVENT_CONFIG_H_


7 
	#_EVENT_CONFIG_H_


	)

15 
	#_EVENT_DNS_USE_GETTIMEOFDAY_FOR_ID
 1

	)

39 
	#_EVENT_HAVE_FCNTL_H
 1

	)

72 
	#_EVENT_HAVE_MEMORY_H
 1

	)

99 
	#_EVENT_HAVE_SIGNAL
 1

	)

102 
	#_EVENT_HAVE_SIGNAL_H
 1

	)

105 
	#_EVENT_HAVE_STDARG_H
 1

	)

111 
	#_EVENT_HAVE_STDLIB_H
 1

	)

114 
	#_EVENT_HAVE_STRINGS_H
 1

	)

117 
	#_EVENT_HAVE_STRING_H
 1

	)

129 
	#_EVENT_HAVE_STRUCT_IN6_ADDR
 1

	)

153 
	#_EVENT_HAVE_SYS_STAT_H
 1

	)

171 
	#_EVENT_HAVE_TIMERCMP
 1

	)

174 
	#_EVENT_HAVE_TIMERISSET
 1

	)

186 
	#_EVENT_PACKAGE
 "libevít"

	)

189 
	#_EVENT_PACKAGE_BUGREPORT
 ""

	)

192 
	#_EVENT_PACKAGE_NAME
 ""

	)

195 
	#_EVENT_PACKAGE_STRING
 ""

	)

198 
	#_EVENT_PACKAGE_TARNAME
 ""

	)

201 
	#_EVENT_PACKAGE_VERSION
 ""

	)

204 
	#_EVENT_STDC_HEADERS
 1

	)

207 
	#_EVENT_TIME_WITH_SYS_TIME
 1

	)

210 
	#_EVENT_VERSION
 "1.3.99-åunk"

	)

220 #i‚de‡
_EVENT___˝lu•lus


221 
	#_EVENT_ölöe
 
__ölöe


	)

224 
	#_EVENT___func__
 
__FUNCTION__


	)

233 
	#_EVENT_sockÀn_t
 

	)

	@WIN32-Code/tree.h

27 #i‚def 
_SYS_TREE_H_


28 
	#_SYS_TREE_H_


	)

57 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

58 
	s«me
 { \

59 
ty≥
 *
•h_roŸ
; \

60 }

	)

62 
	#SPLAY_INITIALIZER
(
roŸ
) \

63 { 
NULL
 }

	)

65 
	#SPLAY_INIT
(
roŸ
) do { \

66 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

67 } 0)

	)

69 
	#SPLAY_ENTRY
(
ty≥
) \

71 
ty≥
 *
•e_À·
; \

72 
ty≥
 *
•e_right
; \

73 }

	)

75 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

76 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

77 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

78 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

81 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

82 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

83 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

84 (
hód
)->
•h_roŸ
 = 
tmp
; \

85 } 0)

	)

87 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

88 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

89 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

90 (
hód
)->
•h_roŸ
 = 
tmp
; \

91 } 0)

	)

93 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

94 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

95 
tmp
 = (
hód
)->
•h_roŸ
; \

96 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

97 } 0)

	)

99 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

100 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

101 
tmp
 = (
hód
)->
•h_roŸ
; \

102 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

103 } 0)

	)

105 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

106 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

107 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

108 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

109 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

110 } 0)

	)

114 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

115 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

116 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

117 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

118 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

121 
__ölöe
 
ty≥
 * \

122 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

124 i‡(
	`SPLAY_EMPTY
(
hód
)) \

125 (
NULL
); \

126 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

127 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

128  (
hód
->
•h_roŸ
); \

129  (
NULL
); \

132 
__ölöe
 
ty≥
 * \

133 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

135 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

136 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

137 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

138 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

139 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

142 
ñm
 = 
NULL
; \

143  (
ñm
); \

146 
__ölöe
 
ty≥
 * \

147 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

149 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

150  (
	`SPLAY_ROOT
(
hód
)); \

151 }

	)

156 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

157 
ty≥
 * \

158 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

160 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

161 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

163 
__comp
; \

164 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

165 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

166 if(
__comp
 < 0) { \

167 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

168 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

169 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

170 } i‡(
__comp
 > 0) { \

171 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

172 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

173 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

175  ((
hód
)->
•h_roŸ
); \

177 (
hód
)->
•h_roŸ
 = (
ñm
); \

178  (
NULL
); \

181 
ty≥
 * \

182 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

184 
ty≥
 *
__tmp
; \

185 i‡(
	`SPLAY_EMPTY
(
hód
)) \

186  (
NULL
); \

187 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

188 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

189 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

190 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

192 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

193 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

194 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

195 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

197  (
ñm
); \

199  (
NULL
); \

203 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

205 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

206 
__comp
; \

208 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

209 
__À·
 = 
__right
 = &
__node
; \

211 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

212 i‡(
__comp
 < 0) { \

213 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

214 i‡(
__tmp
 =
NULL
) \

216 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

217 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

218 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

221 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

222 } i‡(
__comp
 > 0) { \

223 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

224 i‡(
__tmp
 =
NULL
) \

226 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

227 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

228 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

231 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

234 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

240 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

242 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

244 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

245 
__À·
 = 
__right
 = &
__node
; \

248 i‡(
__comp
 < 0) { \

249 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

250 i‡(
__tmp
 =
NULL
) \

252 i‡(
__comp
 < 0){ \

253 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

254 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

257 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

258 } i‡(
__comp
 > 0) { \

259 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

260 i‡(
__tmp
 =
NULL
) \

262 i‡(
__comp
 > 0) { \

263 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

264 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

267 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

270 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

271 }

	)

273 
	#SPLAY_NEGINF
 -1

	)

274 
	#SPLAY_INF
 1

	)

276 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

277 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

278 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

279 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

280 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

281 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

282 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

283 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

285 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

286 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

287 (
x
Ë!
NULL
; \

288 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

291 
	#RB_HEAD
(
«me
, 
ty≥
) \

292 
	s«me
 { \

293 
ty≥
 *
rbh_roŸ
; \

294 }

	)

296 
	#RB_INITIALIZER
(
roŸ
) \

297 { 
NULL
 }

	)

299 
	#RB_INIT
(
roŸ
) do { \

300 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

301 } 0)

	)

303 
	#RB_BLACK
 0

	)

304 
	#RB_RED
 1

	)

305 
	#RB_ENTRY
(
ty≥
) \

307 
ty≥
 *
rbe_À·
; \

308 
ty≥
 *
rbe_right
; \

309 
ty≥
 *
rbe_∑ª¡
; \

310 
rbe_cﬁ‹
; \

311 }

	)

313 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

314 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

315 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

316 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

317 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

318 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

320 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

321 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

322 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

323 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

324 } 0)

	)

326 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

327 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

328 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

329 } 0)

	)

331 #i‚de‡
RB_AUGMENT


332 
	#RB_AUGMENT
(
x
)

	)

335 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

336 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

337 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

338 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

340 
	`RB_AUGMENT
(
ñm
); \

341 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

342 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

343 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

345 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

347 (
hód
)->
rbh_roŸ
 = (
tmp
); \

348 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

349 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

350 
	`RB_AUGMENT
(
tmp
); \

351 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

352 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

353 } 0)

	)

355 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

356 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

357 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

358 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

360 
	`RB_AUGMENT
(
ñm
); \

361 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

362 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

363 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

365 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

367 (
hód
)->
rbh_roŸ
 = (
tmp
); \

368 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

369 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

370 
	`RB_AUGMENT
(
tmp
); \

371 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

372 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

373 } 0)

	)

376 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

377 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

378 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

379 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

380 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

381 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

382 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

383 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

385 

	)

389 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

391 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

393 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

394 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

395 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

396 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

397 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

398 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

399 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

400 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

401 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

402 
ñm
 = 
g∑ª¡
; \

405 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

406 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

407 
tmp
 = 
∑ª¡
; \

408 
∑ª¡
 = 
ñm
; \

409 
ñm
 = 
tmp
; \

411 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

412 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

414 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

415 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

416 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

417 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

418 
ñm
 = 
g∑ª¡
; \

421 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

422 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

423 
tmp
 = 
∑ª¡
; \

424 
∑ª¡
 = 
ñm
; \

425 
ñm
 = 
tmp
; \

427 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

428 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

431 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

435 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

437 
ty≥
 *
tmp
; \

438 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

439 
ñm
 !
	`RB_ROOT
(
hód
)) { \

440 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

441 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

442 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

443 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

444 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

445 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

447 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

448 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

449 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

450 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

451 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

452 
ñm
 = 
∑ª¡
; \

453 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

455 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

456 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

457 
ty≥
 *
ﬁe·
; \

458 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

459 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

460 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

461 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

462 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

464 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

465 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

466 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

467 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

468 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

469 
ñm
 = 
	`RB_ROOT
(
hód
); \

473 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

474 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

475 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

476 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

477 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

479 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

480 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

481 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

482 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

483 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

484 
ñm
 = 
∑ª¡
; \

485 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

487 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

488 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

489 
ty≥
 *
‹ight
; \

490 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

491 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

492 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

493 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

494 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

496 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

497 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

498 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

499 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

500 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

501 
ñm
 = 
	`RB_ROOT
(
hód
); \

506 i‡(
ñm
) \

507 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

510 
ty≥
 * \

511 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

513 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

514 
cﬁ‹
; \

515 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

516 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

517 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

518 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

520 
ty≥
 *
À·
; \

521 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

522 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

523 
ñm
 = 
À·
; \

524 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

525 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

526 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

527 i‡(
chûd
) \

528 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

529 i‡(
∑ª¡
) { \

530 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

531 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

533 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

534 
	`RB_AUGMENT
(
∑ª¡
); \

536 
	`RB_ROOT
(
hód
Ë
chûd
; \

537 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

538 
∑ª¡
 = 
ñm
; \

539 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

540 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

541 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

542 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

544 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

545 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

547 
	`RB_ROOT
(
hód
Ë
ñm
; \

548 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

549 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

550 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

551 i‡(
∑ª¡
) { \

552 
À·
 = 
∑ª¡
; \

554 
	`RB_AUGMENT
(
À·
); \

555 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

557 
cﬁ‹
; \

559 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

560 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

561 i‡(
chûd
) \

562 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

563 i‡(
∑ª¡
) { \

564 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

565 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

567 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

568 
	`RB_AUGMENT
(
∑ª¡
); \

570 
	`RB_ROOT
(
hód
Ë
chûd
; \

571 
cﬁ‹
: \

572 i‡(
cﬁ‹
 =
RB_BLACK
) \

573 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

574  (
ﬁd
); \

578 
ty≥
 * \

579 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

581 
ty≥
 *
tmp
; \

582 
ty≥
 *
∑ª¡
 = 
NULL
; \

583 
comp
 = 0; \

584 
tmp
 = 
	`RB_ROOT
(
hód
); \

585 
tmp
) { \

586 
∑ª¡
 = 
tmp
; \

587 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

588 i‡(
comp
 < 0) \

589 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

590 i‡(
comp
 > 0) \

591 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

593  (
tmp
); \

595 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

596 i‡(
∑ª¡
 !
NULL
) { \

597 i‡(
comp
 < 0) \

598 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

600 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

601 
	`RB_AUGMENT
(
∑ª¡
); \

603 
	`RB_ROOT
(
hód
Ë
ñm
; \

604 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

605  (
NULL
); \

609 
ty≥
 * \

610 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

612 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

613 
comp
; \

614 
tmp
) { \

615 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

616 i‡(
comp
 < 0) \

617 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

618 i‡(
comp
 > 0) \

619 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

621  (
tmp
); \

623  (
NULL
); \

626 
ty≥
 * \

627 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

629 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

630 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

631 
	`RB_LEFT
(
ñm
, 
fõld
)) \

632 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

634 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

635 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

636 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

638 
	`RB_PARENT
(
ñm
, 
fõld
) && \

639 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

640 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

641 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

644  (
ñm
); \

647 
ty≥
 * \

648 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

650 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

651 
ty≥
 *
∑ª¡
 = 
NULL
; \

652 
tmp
) { \

653 
∑ª¡
 = 
tmp
; \

654 i‡(
vÆ
 < 0) \

655 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

657 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

659  (
∑ª¡
); \

660 }

	)

662 
	#RB_NEGINF
 -1

	)

663 
	#RB_INF
 1

	)

665 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

666 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

667 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

668 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

669 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

670 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

672 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

673 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

674 (
x
Ë!
NULL
; \

675 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

704 #i‚def 
_SYS_TREE_H_


705 
	#_SYS_TREE_H_


	)

734 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

735 
	s«me
 { \

736 
ty≥
 *
•h_roŸ
; \

737 }

	)

739 
	#SPLAY_INITIALIZER
(
roŸ
) \

740 { 
NULL
 }

	)

742 
	#SPLAY_INIT
(
roŸ
) do { \

743 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

744 } 0)

	)

746 
	#SPLAY_ENTRY
(
ty≥
) \

748 
ty≥
 *
•e_À·
; \

749 
ty≥
 *
•e_right
; \

750 }

	)

752 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

753 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

754 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

755 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

758 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

759 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

760 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

761 (
hód
)->
•h_roŸ
 = 
tmp
; \

762 } 0)

	)

764 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

765 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

766 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

767 (
hód
)->
•h_roŸ
 = 
tmp
; \

768 } 0)

	)

770 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

771 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

772 
tmp
 = (
hód
)->
•h_roŸ
; \

773 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

774 } 0)

	)

776 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

777 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

778 
tmp
 = (
hód
)->
•h_roŸ
; \

779 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

780 } 0)

	)

782 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

783 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

784 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

785 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

786 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

787 } 0)

	)

791 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

792 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

793 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

794 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

795 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

798 
__ölöe
 
ty≥
 * \

799 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

801 i‡(
	`SPLAY_EMPTY
(
hód
)) \

802 (
NULL
); \

803 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

804 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

805  (
hód
->
•h_roŸ
); \

806  (
NULL
); \

809 
__ölöe
 
ty≥
 * \

810 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

812 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

813 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

814 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

815 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

816 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

819 
ñm
 = 
NULL
; \

820  (
ñm
); \

823 
__ölöe
 
ty≥
 * \

824 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

826 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

827  (
	`SPLAY_ROOT
(
hód
)); \

828 }

	)

833 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

834 
ty≥
 * \

835 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

837 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

838 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

840 
__comp
; \

841 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

842 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

843 if(
__comp
 < 0) { \

844 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

845 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

846 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

847 } i‡(
__comp
 > 0) { \

848 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

849 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

850 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

852  ((
hód
)->
•h_roŸ
); \

854 (
hód
)->
•h_roŸ
 = (
ñm
); \

855  (
NULL
); \

858 
ty≥
 * \

859 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

861 
ty≥
 *
__tmp
; \

862 i‡(
	`SPLAY_EMPTY
(
hód
)) \

863  (
NULL
); \

864 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

865 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

866 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

867 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

869 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

870 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

871 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

872 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

874  (
ñm
); \

876  (
NULL
); \

880 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

882 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

883 
__comp
; \

885 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

886 
__À·
 = 
__right
 = &
__node
; \

888 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
))) { \

889 i‡(
__comp
 < 0) { \

890 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

891 i‡(
__tmp
 =
NULL
) \

893 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

894 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

895 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

898 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

899 } i‡(
__comp
 > 0) { \

900 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

901 i‡(
__tmp
 =
NULL
) \

903 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

904 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

905 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

908 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

911 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

917 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

919 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

921 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

922 
__À·
 = 
__right
 = &
__node
; \

925 i‡(
__comp
 < 0) { \

926 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

927 i‡(
__tmp
 =
NULL
) \

929 i‡(
__comp
 < 0){ \

930 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

931 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

934 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

935 } i‡(
__comp
 > 0) { \

936 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

937 i‡(
__tmp
 =
NULL
) \

939 i‡(
__comp
 > 0) { \

940 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

941 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

944 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

947 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

948 }

	)

950 
	#SPLAY_NEGINF
 -1

	)

951 
	#SPLAY_INF
 1

	)

953 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

954 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

955 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

956 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

957 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

958 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

959 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

960 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

962 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

963 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

964 (
x
Ë!
NULL
; \

965 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

968 
	#RB_HEAD
(
«me
, 
ty≥
) \

969 
	s«me
 { \

970 
ty≥
 *
rbh_roŸ
; \

971 }

	)

973 
	#RB_INITIALIZER
(
roŸ
) \

974 { 
NULL
 }

	)

976 
	#RB_INIT
(
roŸ
) do { \

977 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

978 } 0)

	)

980 
	#RB_BLACK
 0

	)

981 
	#RB_RED
 1

	)

982 
	#RB_ENTRY
(
ty≥
) \

984 
ty≥
 *
rbe_À·
; \

985 
ty≥
 *
rbe_right
; \

986 
ty≥
 *
rbe_∑ª¡
; \

987 
rbe_cﬁ‹
; \

988 }

	)

990 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

991 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

992 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

993 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

994 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

995 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

997 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

998 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

999 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

1000 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

1001 } 0)

	)

1003 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

1004 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

1005 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

1006 } 0)

	)

1008 #i‚de‡
RB_AUGMENT


1009 
	#RB_AUGMENT
(
x
)

	)

1012 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1013 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

1014 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, field))) { \

1015 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1017 
	`RB_AUGMENT
(
ñm
); \

1018 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1019 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1020 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1022 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1024 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1025 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

1026 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1027 
	`RB_AUGMENT
(
tmp
); \

1028 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1029 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1030 } 0)

	)

1032 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

1033 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

1034 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, field))) { \

1035 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

1037 
	`RB_AUGMENT
(
ñm
); \

1038 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, field))) { \

1039 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

1040 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1042 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

1044 (
hód
)->
rbh_roŸ
 = (
tmp
); \

1045 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

1046 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

1047 
	`RB_AUGMENT
(
tmp
); \

1048 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

1049 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

1050 } 0)

	)

1053 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1054 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *); \

1055 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, type *);\

1056 
ty≥
 *
«me
##
	`_RB_REMOVE
(name *, type *); \

1057 
ty≥
 *
«me
##
	`_RB_INSERT
(name *, type *); \

1058 
ty≥
 *
«me
##
	`_RB_FIND
(name *, type *); \

1059 
ty≥
 *
«me
##
	`_RB_NEXT
(type *); \

1060 
ty≥
 *
«me
##
	`_RB_MINMAX
(name *, ); \

1062 

	)

1066 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

1068 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

1070 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

1071 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)) && \

1072 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

1073 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

1074 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

1075 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

1076 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1077 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1078 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1079 
ñm
 = 
g∑ª¡
; \

1082 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1083 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1084 
tmp
 = 
∑ª¡
; \

1085 
∑ª¡
 = 
ñm
; \

1086 
ñm
 = 
tmp
; \

1088 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1089 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1091 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

1092 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

1093 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

1094 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

1095 
ñm
 = 
g∑ª¡
; \

1098 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1099 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1100 
tmp
 = 
∑ª¡
; \

1101 
∑ª¡
 = 
ñm
; \

1102 
ñm
 = 
tmp
; \

1104 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

1105 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

1108 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

1112 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

1114 
ty≥
 *
tmp
; \

1115 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

1116 
ñm
 !
	`RB_ROOT
(
hód
)) { \

1117 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

1118 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1119 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1120 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1121 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1122 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1124 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1125 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1126 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1127 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1128 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1129 
ñm
 = 
∑ª¡
; \

1130 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1132 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1133 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1134 
ty≥
 *
ﬁe·
; \

1135 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)))\

1136 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

1137 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1138 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

1139 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

1141 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1142 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1143 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

1144 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1145 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1146 
ñm
 = 
	`RB_ROOT
(
hód
); \

1150 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1151 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

1152 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

1153 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1154 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1156 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1157 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

1158 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

1159 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

1160 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1161 
ñm
 = 
∑ª¡
; \

1162 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1164 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

1165 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

1166 
ty≥
 *
‹ight
; \

1167 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)))\

1168 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

1169 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

1170 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

1171 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

1173 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

1174 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

1175 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

1176 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

1177 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

1178 
ñm
 = 
	`RB_ROOT
(
hód
); \

1183 i‡(
ñm
) \

1184 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

1187 
ty≥
 * \

1188 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

1190 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

1191 
cﬁ‹
; \

1192 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

1193 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1194 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

1195 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

1197 
ty≥
 *
À·
; \

1198 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1199 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
))) \

1200 
ñm
 = 
À·
; \

1201 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

1202 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1203 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1204 i‡(
chûd
) \

1205 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1206 i‡(
∑ª¡
) { \

1207 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1208 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1210 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1211 
	`RB_AUGMENT
(
∑ª¡
); \

1213 
	`RB_ROOT
(
hód
Ë
chûd
; \

1214 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

1215 
∑ª¡
 = 
ñm
; \

1216 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

1217 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

1218 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

1219 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1221 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

1222 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

1224 
	`RB_ROOT
(
hód
Ë
ñm
; \

1225 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1226 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

1227 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

1228 i‡(
∑ª¡
) { \

1229 
À·
 = 
∑ª¡
; \

1231 
	`RB_AUGMENT
(
À·
); \

1232 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
))); \

1234 
cﬁ‹
; \

1236 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

1237 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

1238 i‡(
chûd
) \

1239 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

1240 i‡(
∑ª¡
) { \

1241 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

1242 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1244 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

1245 
	`RB_AUGMENT
(
∑ª¡
); \

1247 
	`RB_ROOT
(
hód
Ë
chûd
; \

1248 
cﬁ‹
: \

1249 i‡(
cﬁ‹
 =
RB_BLACK
) \

1250 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

1251  (
ﬁd
); \

1255 
ty≥
 * \

1256 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

1258 
ty≥
 *
tmp
; \

1259 
ty≥
 *
∑ª¡
 = 
NULL
; \

1260 
comp
 = 0; \

1261 
tmp
 = 
	`RB_ROOT
(
hód
); \

1262 
tmp
) { \

1263 
∑ª¡
 = 
tmp
; \

1264 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

1265 i‡(
comp
 < 0) \

1266 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1267 i‡(
comp
 > 0) \

1268 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1270  (
tmp
); \

1272 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

1273 i‡(
∑ª¡
 !
NULL
) { \

1274 i‡(
comp
 < 0) \

1275 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1277 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

1278 
	`RB_AUGMENT
(
∑ª¡
); \

1280 
	`RB_ROOT
(
hód
Ë
ñm
; \

1281 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

1282  (
NULL
); \

1286 
ty≥
 * \

1287 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

1289 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1290 
comp
; \

1291 
tmp
) { \

1292 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

1293 i‡(
comp
 < 0) \

1294 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1295 i‡(
comp
 > 0) \

1296 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1298  (
tmp
); \

1300  (
NULL
); \

1303 
ty≥
 * \

1304 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

1306 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

1307 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

1308 
	`RB_LEFT
(
ñm
, 
fõld
)) \

1309 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

1311 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

1312 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

1313 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1315 
	`RB_PARENT
(
ñm
, 
fõld
) && \

1316 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

1317 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1318 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

1321  (
ñm
); \

1324 
ty≥
 * \

1325 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

1327 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

1328 
ty≥
 *
∑ª¡
 = 
NULL
; \

1329 
tmp
) { \

1330 
∑ª¡
 = 
tmp
; \

1331 i‡(
vÆ
 < 0) \

1332 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

1334 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

1336  (
∑ª¡
); \

1337 }

	)

1339 
	#RB_NEGINF
 -1

	)

1340 
	#RB_INF
 1

	)

1342 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

1343 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

1344 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

1345 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

1346 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

1347 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

1349 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

1350 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

1351 (
x
Ë!
NULL
; \

1352 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

	@WIN32-Code/win32.c

28 #ifde‡
_MSC_VER


29 
	~"c⁄fig.h
"

32 
	~"../c⁄fig.h
"

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/queue.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<î∫o.h
>

44 
	~<as£π.h
>

46 
	#RB_AUGMENT
(
x
Ë()(x)

	)

47 
	~"åì.h
"

48 
	~"log.h
"

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

52 
	#XFREE
(
±r
Ëdÿ{ i‡’åË
	`‰ì
’å); } 0)

	)

54 
evít_li°
 
timequeue
;

55 
evít_li°
 
addqueue
;

57 
evít_li°
 
sig«lqueue
;

60 
	swö_fd_£t
 {

61 
u_öt
 
	mfd_cou¡
;

62 
SOCKET
 
	mfd_¨øy
[1];

65 
	gevsigˇught
[
NSIG
];

66 vﬁ©ûê
sig_©omic_t
 
	gsig«l_ˇught
 = 0;

68 vﬁ©ûê
	gSIGFPE_REQ
 = 0.0f;

71 
sig«l_h™dÀr
(
sig
);

73 
sig«l_¥o˚ss
();

74 
sig«l_ªˇlc
();

77 
	sevít_íåy
 {

78 
RB_ENTRY
(
evít_íåy
Ë
	mnode
;

79 
SOCKET
 
	msock
;

80 
	mªad_pos
;

81 
	mwrôe_pos
;

82 
evít
 *
	mªad_evít
;

83 
evít
 *
	mwrôe_evít
;

87 
	$com∑ª
(
evít_íåy
 *
a
, evít_íåy *
b
)

89 i‡(
a
->
sock
 < 
b
->sock)

91 i‡(
a
->
sock
 > 
b
->sock)

95 
	}
}

97 
	swö32›
 {

98 
	mfd_£tsz
;

99 
wö_fd_£t
 *
	mªad£t_ö
;

100 
wö_fd_£t
 *
	mwrôe£t_ö
;

101 
wö_fd_£t
 *
	mªad£t_out
;

102 
wö_fd_£t
 *
	mwrôe£t_out
;

103 
wö_fd_£t
 *
	mex£t_out
;

104 
RB_HEAD
(
evít_m≠
, 
evít_íåy
Ë
	mevít_roŸ
;

106 
	msig«ls_¨e_brokí
 : 1;

109 
RB_PROTOTYPE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

110 
RB_GENERATE
(
evít_m≠
, 
evít_íåy
, 
node
, 
com∑ª
);

112 *
wö32_öô
 (
evít_ba£
 *);

113 
wö32_ö£π
 (*, 
evít
 *);

114 
wö32_dñ
 (*, 
evít
 *);

115 
wö32_di•©ch
 (
evít_ba£
 *
ba£
, *, 
timevÆ
 *);

116 
wö32_dóŒoc
 (
evít_ba£
 *, *);

118 
evít›
 
	gwö32›s
 = {

120 
wö32_öô
,

121 
wö32_ö£π
,

122 
wö32_dñ
,

123 
wö32_di•©ch
,

124 
wö32_dóŒoc
,

128 
	#FD_SET_ALLOC_SIZE
(
n
Ë(((
wö_fd_£t
Ë+ (“)-1)*(
SOCKET
)))

	)

131 
	$ªÆloc_fd_£ts
(
wö32›
 *
›
, 
size_t
 
√w_size
)

133 
size_t
 
size
;

135 
	`as£π
(
√w_size
 >
›
->
ªad£t_ö
->
fd_cou¡
 &&

136 
√w_size
 >
›
->
wrôe£t_ö
->
fd_cou¡
);

137 
	`as£π
(
√w_size
 >= 1);

139 
size
 = 
	`FD_SET_ALLOC_SIZE
(
√w_size
);

140 i‡(!(
›
->
ªad£t_ö
 = 
	`ªÆloc
(›->ªad£t_ö, 
size
)))

142 i‡(!(
›
->
wrôe£t_ö
 = 
	`ªÆloc
(›->wrôe£t_ö, 
size
)))

144 i‡(!(
›
->
ªad£t_out
 = 
	`ªÆloc
(›->ªad£t_out, 
size
)))

146 i‡(!(
›
->
ex£t_out
 = 
	`ªÆloc
(›->ex£t_out, 
size
)))

148 i‡(!(
›
->
wrôe£t_out
 = 
	`ªÆloc
(›->wrôe£t_out, 
size
)))

150 
›
->
fd_£tsz
 = 
√w_size
;

152 
	}
}

155 
	$timevÆ_to_ms
(
timevÆ
 *
tv
)

157  ((
tv
->
tv_£c
 * 1000Ë+ (tv->
tv_u£c
 / 1000));

158 
	}
}

160 
evít_íåy
*

161 
	$gë_evít_íåy
(
wö32›
 *
›
, 
SOCKET
 
s
, 
¸óã
)

163 
evít_íåy
 
key
, *
vÆ
;

164 
key
.
sock
 = 
s
;

165 
vÆ
 = 
	`RB_FIND
(
evít_m≠
, &
›
->
evít_roŸ
, &
key
);

166 i‡(
vÆ
 || !
¸óã
)

167  
vÆ
;

168 i‡(!(
vÆ
 = 
	`ˇŒoc
(1, (
evít_íåy
)))) {

169 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

170  
NULL
;

172 
vÆ
->
sock
 = 
s
;

173 
vÆ
->
ªad_pos
 = vÆ->
wrôe_pos
 = -1;

174 
	`RB_INSERT
(
evít_m≠
, &
›
->
evít_roŸ
, 
vÆ
);

175  
vÆ
;

176 
	}
}

179 
	$do_fd_£t
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

181 
SOCKET
 
s
 = 
ít
->
sock
;

182 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

183 i‡(
ªad
) {

184 i‡(
ít
->
ªad_pos
 >= 0)

187 i‡(
ít
->
wrôe_pos
 >= 0)

190 i‡(
£t
->
fd_cou¡
 =
›
->
fd_£tsz
) {

191 i‡(
	`ªÆloc_fd_£ts
(
›
, op->
fd_£tsz
*2))

194 
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

196 
£t
->
fd_¨øy
[£t->
fd_cou¡
] = 
s
;

197 i‡(
ªad
)

198 
ít
->
ªad_pos
 = 
£t
->
fd_cou¡
;

200 
ít
->
wrôe_pos
 = 
£t
->
fd_cou¡
;

201  (
£t
->
fd_cou¡
++);

202 
	}
}

205 
	$do_fd_˛ór
(
wö32›
 *
›
, 
evít_íåy
 *
ít
, 
ªad
)

207 
i
;

208 
wö_fd_£t
 *
£t
 = 
ªad
 ? 
›
->
ªad£t_ö
 : op->
wrôe£t_ö
;

209 i‡(
ªad
) {

210 
i
 = 
ít
->
ªad_pos
;

211 
ít
->
ªad_pos
 = -1;

213 
i
 = 
ít
->
wrôe_pos
;

214 
ít
->
wrôe_pos
 = -1;

216 i‡(
i
 < 0)

218 i‡(--
£t
->
fd_cou¡
 !
i
) {

219 
evít_íåy
 *
ít2
;

220 
SOCKET
 
s2
;

221 
s2
 = 
£t
->
fd_¨øy
[
i
] = së->fd_¨øy[£t->
fd_cou¡
];

222 
ít2
 = 
	`gë_evít_íåy
(
›
, 
s2
, 0);

223 i‡(!
ít
)

225 i‡(
ªad
)

226 
ít2
->
ªad_pos
 = 
i
;

228 
ít2
->
wrôe_pos
 = 
i
;

231 
	}
}

233 
	#NEVENT
 64

	)

235 
	$wö32_öô
(
evít_ba£
 *
_ba£
)

237 
wö32›
 *
wö›
;

238 
size_t
 
size
;

239 i‡(!(
wö›
 = 
	`ˇŒoc
(1, (
wö32›
))))

240  
NULL
;

241 
wö›
->
fd_£tsz
 = 
NEVENT
;

242 
size
 = 
	`FD_SET_ALLOC_SIZE
(
NEVENT
);

243 i‡(!(
wö›
->
ªad£t_ö
 = 
	`mÆloc
(
size
)))

244 
îr
;

245 i‡(!(
wö›
->
wrôe£t_ö
 = 
	`mÆloc
(
size
)))

246 
îr
;

247 i‡(!(
wö›
->
ªad£t_out
 = 
	`mÆloc
(
size
)))

248 
îr
;

249 i‡(!(
wö›
->
wrôe£t_out
 = 
	`mÆloc
(
size
)))

250 
îr
;

251 i‡(!(
wö›
->
ex£t_out
 = 
	`mÆloc
(
size
)))

252 
îr
;

253 
	`RB_INIT
(&
wö›
->
evít_roŸ
);

254 
wö›
->
ªad£t_ö
->
fd_cou¡
 = wö›->
wrôe£t_ö
->fd_count = 0;

255 
wö›
->
ªad£t_out
->
fd_cou¡
 = wö›->
wrôe£t_out
->fd_count

256 
wö›
->
ex£t_out
->
fd_cou¡
 = 0;

258 i‡(
	`evsig«l_öô
(
_ba£
) < 0)

259 
wö›
->
sig«ls_¨e_brokí
 = 1;

261  (
wö›
);

262 
îr
:

263 
	`XFREE
(
wö›
->
ªad£t_ö
);

264 
	`XFREE
(
wö›
->
wrôe£t_ö
);

265 
	`XFREE
(
wö›
->
ªad£t_out
);

266 
	`XFREE
(
wö›
->
wrôe£t_out
);

267 
	`XFREE
(
wö›
->
ex£t_out
);

268 
	`XFREE
(
wö›
);

269  (
NULL
);

270 
	}
}

273 
	$wö32_ö£π
(*
›
, 
evít
 *
ev
)

275 
wö32›
 *wö32› = 
›
;

276 
evít_íåy
 *
ít
;

278 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

279 i‡(
wö32›
->
sig«ls_¨e_brokí
)

281  (
	`evsig«l_add
(
ev
));

283 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

285 
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 1);

286 i‡(!
ít
)

289 
	`evít_debug
(("%s:áddögÉvíàf‹ %d", 
__func__
, ()
ev
->
ev_fd
));

290 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

291 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 1)<0)

293 
ít
->
ªad_evít
 = 
ev
;

295 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

296 i‡(
	`do_fd_£t
(
wö32›
, 
ít
, 0)<0)

298 
ít
->
wrôe_evít
 = 
ev
;

301 
	}
}

304 
	$wö32_dñ
(*
›
, 
evít
 *
ev
)

306 
wö32›
 *wö32› = 
›
;

307 
evít_íåy
 *
ít
;

309 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

310  (
	`evsig«l_dñ
(
ev
));

312 i‡(!(
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
ev
->
ev_fd
, 0)))

314 
	`evít_debug
(("%s: RemovögÉvíàf‹ %d", 
__func__
, 
ev
->
ev_fd
));

315 i‡(
ev
 =
ít
->
ªad_evít
) {

316 
	`do_fd_˛ór
(
wö32›
, 
ít
, 1);

317 
ít
->
ªad_evít
 = 
NULL
;

319 i‡(
ev
 =
ít
->
wrôe_evít
) {

320 
	`do_fd_˛ór
(
wö32›
, 
ít
, 0);

321 
ít
->
wrôe_evít
 = 
NULL
;

323 i‡(!
ít
->
ªad_evít
 && !ít->
wrôe_evít
) {

324 
	`RB_REMOVE
(
evít_m≠
, &
wö32›
->
evít_roŸ
, 
ít
);

325 
	`‰ì
(
ít
);

329 
	}
}

332 
	$fd_£t_c›y
(
wö_fd_£t
 *
out
, c⁄° wö_fd_£à*
ö
)

334 
out
->
fd_cou¡
 = 
ö
->fd_count;

335 
	`mem˝y
(
out
->
fd_¨øy
, 
ö
->fd_¨øy, in->
fd_cou¡
 * ((
SOCKET
)));

336 
	}
}

350 
	$wö32_di•©ch
(
evít_ba£
 *
ba£
, *
›
,

351 
timevÆ
 *
tv
)

353 
wö32›
 *wö32› = 
›
;

354 
ªs
 = 0;

355 
j
, 
i
;

356 
fd_cou¡
;

357 
SOCKET
 
s
;

358 
evít_íåy
 *
ít
;

360 
	`fd_£t_c›y
(
wö32›
->
ªad£t_out
, wö32›->
ªad£t_ö
);

361 
	`fd_£t_c›y
(
wö32›
->
ex£t_out
, wö32›->
ªad£t_ö
);

362 
	`fd_£t_c›y
(
wö32›
->
wrôe£t_out
, wö32›->
wrôe£t_ö
);

364 
fd_cou¡
 =

365 (
wö32›
->
ªad£t_out
->
fd_cou¡
 > wö32›->
wrôe£t_out
->fd_count) ?

366 
wö32›
->
ªad£t_out
->
fd_cou¡
 : wö32›->
wrôe£t_out
->fd_count;

368 i‡(!
fd_cou¡
) {

370 
	`SÀï
(
	`timevÆ_to_ms
(
tv
));

371 
	`evsig«l_¥o˚ss
(
ba£
);

375 
ªs
 = 
	`£À˘
(
fd_cou¡
,

376 (
fd_£t
*)
wö32›
->
ªad£t_out
,

377 (
fd_£t
*)
wö32›
->
wrôe£t_out
,

378 (
fd_£t
*)
wö32›
->
ex£t_out
, 
tv
);

380 
	`evít_debug
(("%s: sñe˘Ñëu∫ed %d", 
__func__
, 
ªs
));

382 if(
ªs
 <= 0) {

383 
	`evsig«l_¥o˚ss
(
ba£
);

384  
ªs
;

385 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

386 
	`evsig«l_¥o˚ss
(
ba£
);

389 i‡(
wö32›
->
ªad£t_out
->
fd_cou¡
) {

390 
i
 = 
	`ønd
(Ë% 
wö32›
->
ªad£t_out
->
fd_cou¡
;

391 
j
=0; j<
wö32›
->
ªad£t_out
->
fd_cou¡
; ++j) {

392 i‡(++
i
 >
wö32›
->
ªad£t_out
->
fd_cou¡
)

393 
i
 = 0;

394 
s
 = 
wö32›
->
ªad£t_out
->
fd_¨øy
[
i
];

395 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

396 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

399 i‡(
wö32›
->
ex£t_out
->
fd_cou¡
) {

400 
i
 = 
	`ønd
(Ë% 
wö32›
->
ex£t_out
->
fd_cou¡
;

401 
j
=0; j<
wö32›
->
ex£t_out
->
fd_cou¡
; ++j) {

402 i‡(++
i
 >
wö32›
->
ex£t_out
->
fd_cou¡
)

403 
i
 = 0;

404 
s
 = 
wö32›
->
ex£t_out
->
fd_¨øy
[
i
];

405 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
ªad_evít
)

406 
	`evít_a˘ive
(
ít
->
ªad_evít
, 
EV_READ
, 1);

409 i‡(
wö32›
->
wrôe£t_out
->
fd_cou¡
) {

410 
i
 = 
	`ønd
(Ë% 
wö32›
->
wrôe£t_out
->
fd_cou¡
;

411 
j
=0; j<
wö32›
->
wrôe£t_out
->
fd_cou¡
; ++j) {

412 i‡(++
i
 >
wö32›
->
ex£t_out
->
fd_cou¡
)

413 
i
 = 0;

414 
s
 = 
wö32›
->
wrôe£t_out
->
fd_¨øy
[
i
];

415 i‡((
ít
 = 
	`gë_evít_íåy
(
wö32›
, 
s
, 0)Ë&&É¡->
wrôe_evít
)

416 
	`evít_a˘ive
(
ít
->
wrôe_evít
, 
EV_WRITE
, 1);

422 
	}
}

425 
	$wö32_dóŒoc
(
evít_ba£
 *
_ba£
, *
¨g
)

427 
wö32›
 *wö32› = 
¨g
;

429 
	`evsig«l_dóŒoc
(
_ba£
);

430 i‡(
wö32›
->
ªad£t_ö
)

431 
	`‰ì
(
wö32›
->
ªad£t_ö
);

432 i‡(
wö32›
->
wrôe£t_ö
)

433 
	`‰ì
(
wö32›
->
wrôe£t_ö
);

434 i‡(
wö32›
->
ªad£t_out
)

435 
	`‰ì
(
wö32›
->
ªad£t_out
);

436 i‡(
wö32›
->
wrôe£t_out
)

437 
	`‰ì
(
wö32›
->
wrôe£t_out
);

438 i‡(
wö32›
->
ex£t_out
)

439 
	`‰ì
(
wö32›
->
ex£t_out
);

442 
	`mem£t
(
wö32›
, 0, (win32op));

443 
	`‰ì
(
wö32›
);

444 
	}
}

448 
	$sig«l_h™dÀr
(
sig
)

450 
evsigˇught
[
sig
]++;

451 
sig«l_ˇught
 = 1;

452 
	}
}

455 
	$sig«l_ªˇlc
()

457 
evít
 *
ev
;

460 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

461 if(()
	`sig«l
(
	`EVENT_SIGNAL
(
ev
), 
sig«l_h™dÀr
) == -1)

465 
	}
}

468 
	$sig«l_¥o˚ss
()

470 
evít
 *
ev
;

471 
nˇŒs
;

473 
	`TAILQ_FOREACH
(
ev
, &
sig«lqueue
, 
ev_sig«l_√xt
) {

474 
nˇŒs
 = 
evsigˇught
[
	`EVENT_SIGNAL
(
ev
)];

475 i‡(
nˇŒs
) {

476 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

477 
	`evít_dñ
(
ev
);

478 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

482 
	`mem£t
(
evsigˇught
, 0, (evsigcaught));

483 
sig«l_ˇught
 = 0;

484 
	}
}

	@buffer.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
WIN32


33 
	~<wösock2.h
>

34 
	~<wödows.h
>

37 #ifde‡
HAVE_VASPRINTF


39 
	#_GNU_SOURCE


	)

42 
	~<sys/ty≥s.h
>

44 #ifde‡
HAVE_SYS_TIME_H


45 
	~<sys/time.h
>

48 #ifde‡
HAVE_SYS_IOCTL_H


49 
	~<sys/io˘l.h
>

52 
	~<as£π.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #ifde‡
HAVE_STDARG_H


58 
	~<°d¨g.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"c⁄fig.h
"

66 
	~"evutû.h
"

68 
evbuf„r
 *

69 
	$evbuf„r_√w
()

71 
evbuf„r
 *
buf„r
;

73 
buf„r
 = 
	`ˇŒoc
(1, (
evbuf„r
));

75  (
buf„r
);

76 
	}
}

79 
	$evbuf„r_‰ì
(
evbuf„r
 *
buf„r
)

81 i‡(
buf„r
->
‹ig_buf„r
 !
NULL
)

82 
	`‰ì
(
buf„r
->
‹ig_buf„r
);

83 
	`‰ì
(
buf„r
);

84 
	}
}

91 
	#SWAP
(
x
,
y
) do { \

92 (
x
)->
buf„r
 = (
y
)->buffer; \

93 (
x
)->
‹ig_buf„r
 = (
y
)->orig_buffer; \

94 (
x
)->
mißlign
 = (
y
)->misalign; \

95 (
x
)->
tŸÆÀn
 = (
y
)->totallen; \

96 (
x
)->
off
 = (
y
)->off; \

97 } 0)

	)

100 
	$evbuf„r_add_buf„r
(
evbuf„r
 *
outbuf
, evbuf„∏*
öbuf
)

102 
ªs
;

105 i‡(
outbuf
->
off
 == 0) {

106 
evbuf„r
 
tmp
;

107 
size_t
 
ﬁdoff
 = 
öbuf
->
off
;

110 
	`SWAP
(&
tmp
, 
outbuf
);

111 
	`SWAP
(
outbuf
, 
öbuf
);

112 
	`SWAP
(
öbuf
, &
tmp
);

119 i‡(
öbuf
->
off
 !
ﬁdoff
 && inbuf->
cb
 !
NULL
)

120 (*
öbuf
->
cb
)(öbuf, 
ﬁdoff
, inbuf->
off
, inbuf->
cb¨g
);

121 i‡(
ﬁdoff
 && 
outbuf
->
cb
 !
NULL
)

122 (*
outbuf
->
cb
)(outbuf, 0, 
ﬁdoff
, outbuf->
cb¨g
);

127 
ªs
 = 
	`evbuf„r_add
(
outbuf
, 
öbuf
->
buf„r
, inbuf->
off
);

128 i‡(
ªs
 == 0) {

130 
	`evbuf„r_døö
(
öbuf
, inbuf->
off
);

133  (
ªs
);

134 
	}
}

137 
	$evbuf„r_add_v¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, 
va_li°
 
≠
)

139 *
buf„r
;

140 
size_t
 
•a˚
;

141 
size_t
 
ﬁdoff
 = 
buf
->
off
;

142 
sz
;

143 
va_li°
 
aq
;

146 
	`evbuf„r_ex∑nd
(
buf
, 64);

148 
size_t
 
u£d
 = 
buf
->
mißlign
 + buf->
off
;

149 
buf„r
 = (*)
buf
->buf„∏+ buf->
off
;

150 
	`as£π
(
buf
->
tŸÆÀn
 >
u£d
);

151 
•a˚
 = 
buf
->
tŸÆÀn
 - 
u£d
;

153 #i‚de‡
va_c›y


154 
	#va_c›y
(
d°
, 
§c
Ë
	`mem˝y
(&(d°), &(§c), (
va_li°
))

	)

156 
	`va_c›y
(
aq
, 
≠
);

158 
sz
 = 
	`evutû_v¢¥ötf
(
buf„r
, 
•a˚
, 
fmt
, 
aq
);

160 
	`va_íd
(
aq
);

162 i‡(
sz
 < 0)

164 i‡((
size_t
)
sz
 < 
•a˚
) {

165 
buf
->
off
 +
sz
;

166 i‡(
buf
->
cb
 !
NULL
)

167 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

168  (
sz
);

170 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
sz
 + 1) == -1)

175 
	}
}

178 
	$evbuf„r_add_¥ötf
(
evbuf„r
 *
buf
, c⁄° *
fmt
, ...)

180 
ªs
 = -1;

181 
va_li°
 
≠
;

183 
	`va_°¨t
(
≠
, 
fmt
);

184 
ªs
 = 
	`evbuf„r_add_v¥ötf
(
buf
, 
fmt
, 
≠
);

185 
	`va_íd
(
≠
);

187  (
ªs
);

188 
	}
}

193 
	$evbuf„r_ªmove
(
evbuf„r
 *
buf
, *
d©a
, 
size_t
 
d©Àn
)

195 
size_t
 
ƒód
 = 
d©Àn
;

196 i‡(
ƒód
 >
buf
->
off
)

197 
ƒód
 = 
buf
->
off
;

199 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
ƒód
);

200 
	`evbuf„r_døö
(
buf
, 
ƒód
);

202  (
ƒód
);

203 
	}
}

211 
	$evbuf„r_ªadlöe
(
evbuf„r
 *
buf„r
)

213 
u_ch¨
 *
d©a
 = 
	`EVBUFFER_DATA
(
buf„r
);

214 
size_t
 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf„r
);

215 *
löe
;

216 
i
;

218 
i
 = 0; i < 
Àn
; i++) {

219 i‡(
d©a
[
i
] == '\r' || data[i] == '\n')

223 i‡(
i
 =
Àn
)

224  (
NULL
);

226 i‡((
löe
 = 
	`mÆloc
(
i
 + 1)Ë=
NULL
) {

227 
	`Ârötf
(
°dîr
, "%s: ouào‡mem‹y\n", 
__func__
);

228  (
NULL
);

231 
	`mem˝y
(
löe
, 
d©a
, 
i
);

232 
löe
[
i
] = '\0';

238 i‡–
i
 < 
Àn
 - 1 ) {

239 
fch
 = 
d©a
[
i
], 
sch
 = data[i+1];

242 i‡–(
sch
 ='\r' || sch ='\n'Ë&& sch !
fch
 )

243 
i
 += 1;

246 
	`evbuf„r_døö
(
buf„r
, 
i
 + 1);

248  (
löe
);

249 
	}
}

256 
	$evbuf„r_Æign
(
evbuf„r
 *
buf
)

258 
	`memmove
(
buf
->
‹ig_buf„r
, buf->
buf„r
, buf->
off
);

259 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

260 
buf
->
mißlign
 = 0;

261 
	}
}

270 
	$evbuf„r_ex∑nd
(
evbuf„r
 *
buf
, 
size_t
 
d©Àn
)

275 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

282 i‡(
buf
->
tŸÆÀn
 >
√ed
)

297 i‡(
buf
->
mißlign
 >
d©Àn
) {

298 
	`evbuf„r_Æign
(
buf
);

300 *
√wbuf
;

301 
size_t
 
Àngth
 = 
buf
->
tŸÆÀn
;

303 i‡(
Àngth
 < 256)

304 
Àngth
 = 256;

306 
Àngth
 < 
√ed
)

307 
Àngth
 <<= 1;

310 i‡(
buf
->
‹ig_buf„r
 !buf->
buf„r
)

311 
	`evbuf„r_Æign
(
buf
);

313 i‡((
√wbuf
 = 
	`ªÆloc
(
buf
->
buf„r
, 
Àngth
)Ë=
NULL
)

317 
buf
->
‹ig_buf„r
 = buf->
buf„r
 = 
√wbuf
;

318 
buf
->
tŸÆÀn
 = 
Àngth
;

322 
	}
}

325 
	$evbuf„r_add
(
evbuf„r
 *
buf
, c⁄° *
d©a
, 
size_t
 
d©Àn
)

327 
size_t
 
√ed
 = 
buf
->
mißlign
 + buf->
off
 + 
d©Àn
;

328 
size_t
 
ﬁdoff
 = 
buf
->
off
;

330 i‡(
buf
->
tŸÆÀn
 < 
√ed
) {

331 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
d©Àn
) == -1)

335 
	`mem˝y
(
buf
->
buf„r
 + buf->
off
, 
d©a
, 
d©Àn
);

336 
buf
->
off
 +
d©Àn
;

338 i‡(
d©Àn
 && 
buf
->
cb
 !
NULL
)

339 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

342 
	}
}

352 
	$evbuf„r_døö
(
evbuf„r
 *
buf
, 
size_t
 
Àn
)

354 
size_t
 
ﬁdoff
 = 
buf
->
off
;

357 i‡(
Àn
 >
buf
->
off
) {

358 
buf
->
off
 = 0;

359 
buf
->
buf„r
 = buf->
‹ig_buf„r
;

360 
buf
->
mißlign
 = 0;

361 
d⁄e
;

368 
buf
->
buf„r
 +
Àn
;

369 
buf
->
mißlign
 +
Àn
;

371 
buf
->
off
 -
Àn
;

373 
d⁄e
:

379 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

380 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

382 
	}
}

388 
	#EVBUFFER_MAX_READ
 4096

	)

391 
	$evbuf„r_ªad
(
evbuf„r
 *
buf
, 
fd
, 
howmuch
)

393 
u_ch¨
 *
p
;

394 
size_t
 
ﬁdoff
 = 
buf
->
off
;

395 
n
 = 
EVBUFFER_MAX_READ
;

398 #i‡
	`deföed
(
FIONREAD
)

399 #ifde‡
WIN32


400 
 g
 = 
n
;

401 i‡(
	`io˘lsockë
(
fd
, 
FIONREAD
, &
 g
Ë=-1 || (
n
=lng) <= 0) {

403 i‡(
	`io˘l
(
fd
, 
FIONREAD
, &
n
) == -1 ||Ç <= 0) {

405 
n
 = 
EVBUFFER_MAX_READ
;

406 } i‡(
n
 > 
EVBUFFER_MAX_READ
 &&Ç > 
howmuch
) {

414 i‡((
size_t
)
n
 > 
buf
->
tŸÆÀn
 << 2)

415 
n
 = 
buf
->
tŸÆÀn
 << 2;

416 i‡(
n
 < 
EVBUFFER_MAX_READ
)

417 
n
 = 
EVBUFFER_MAX_READ
;

420 i‡(
howmuch
 < 0 || howmuch > 
n
)

421 
howmuch
 = 
n
;

426 i‡(
	`evbuf„r_ex∑nd
(
buf
, 
howmuch
) == -1)

430 
p
 = 
buf
->
buf„r
 + buf->
off
;

432 #i‚de‡
WIN32


433 
n
 = 
	`ªad
(
fd
, 
p
, 
howmuch
);

435 
n
 = 
	`ªcv
(
fd
, 
p
, 
howmuch
, 0);

437 i‡(
n
 == -1)

439 i‡(
n
 == 0)

442 
buf
->
off
 +
n
;

445 i‡(
buf
->
off
 !
ﬁdoff
 && buf->
cb
 !
NULL
)

446 (*
buf
->
cb
)(buf, 
ﬁdoff
, buf->
off
, buf->
cb¨g
);

448  (
n
);

449 
	}
}

452 
	$evbuf„r_wrôe
(
evbuf„r
 *
buf„r
, 
fd
)

454 
n
;

456 #i‚de‡
WIN32


457 
n
 = 
	`wrôe
(
fd
, 
buf„r
->buf„r, buf„r->
off
);

459 
n
 = 
	`£nd
(
fd
, 
buf„r
->buf„r, buf„r->
off
, 0);

461 i‡(
n
 == -1)

463 i‡(
n
 == 0)

465 
	`evbuf„r_døö
(
buf„r
, 
n
);

467  (
n
);

468 
	}
}

470 
u_ch¨
 *

471 
	$evbuf„r_föd
(
evbuf„r
 *
buf„r
, c⁄° 
u_ch¨
 *
wh©
, 
size_t
 
Àn
)

473 
u_ch¨
 *
£¨ch
 = 
buf„r
->buf„r, *
íd
 = sórch + buf„r->
off
;

474 
u_ch¨
 *
p
;

476 
£¨ch
 < 
íd
 &&

477 (
p
 = 
	`memchr
(
£¨ch
, *
wh©
, 
íd
 - sórch)Ë!
NULL
) {

478 i‡(
p
 + 
Àn
 > 
íd
)

480 i‡(
	`memcmp
(
p
, 
wh©
, 
Àn
) == 0)

481  (
p
);

482 
£¨ch
 = 
p
 + 1;

485  (
NULL
);

486 
	}
}

488 
evbuf„r_£tcb
(
evbuf„r
 *
buf„r
,

489 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *),

490 *
cb¨g
)

492 
buf„r
->
cb
 = cb;

493 
buf„r
->
cb¨g
 = cbarg;

494 
	}
}

	@compat/sys/_libevent_time.h

35 #i‚de‡
_SYS_TIME_H_


36 
	#_SYS_TIME_H_


	)

38 
	~<sys/ty≥s.h
>

44 
	stimevÆ
 {

45 
	mtv_£c
;

46 
	mtv_u£c
;

52 
	stime•ec
 {

53 
time_t
 
	mtv_£c
;

54 
	mtv_n£c
;

57 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

58 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

59 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

60 }

	)

61 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

62 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

63 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

64 }

	)

66 
	stimez⁄e
 {

67 
	mtz_möuãswe°
;

68 
	mtz_d°time
;

70 
	#DST_NONE
 0

	)

71 
	#DST_USA
 1

	)

72 
	#DST_AUST
 2

	)

73 
	#DST_WET
 3

	)

74 
	#DST_MET
 4

	)

75 
	#DST_EET
 5

	)

76 
	#DST_CAN
 6

	)

79 
	#timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

80 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

81 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

82 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

83 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

84 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

85 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

87 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

88 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

89 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

90 (
vvp
)->
tv_£c
++; \

91 (
vvp
)->
tv_u£c
 -= 1000000; \

93 } 0)

	)

94 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

96 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

97 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

98 i‡((
vvp
)->
tv_u£c
 < 0) { \

99 (
vvp
)->
tv_£c
--; \

100 (
vvp
)->
tv_u£c
 += 1000000; \

102 } 0)

	)

105 
	#time•ec˛ór
(
t•
Ë—•)->
tv_£c
 = (t•)->
tv_n£c
 = 0

	)

106 
	#time•ecis£t
(
t•
Ë(—•)->
tv_£c
 || (t•)->
tv_n£c
)

	)

107 
	#time•eccmp
(
t•
, 
u•
, 
cmp
) \

108 (((
t•
)->
tv_£c
 =(
u•
)->tv_sec) ? \

109 ((
t•
)->
tv_n£c
 
	`cmp
 (
u•
)->tv_nsec) : \

110 ((
t•
)->
tv_£c
 
	`cmp
 (
u•
)->tv_£c))

	)

111 
	#time•eˇdd
(
t•
, 
u•
, 
v•
) \

113 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯+ (
u•
)->tv_sec; \

114 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯+ (
u•
)->tv_nsec; \

115 i‡((
v•
)->
tv_n£c
 >= 1000000000L) { \

116 (
v•
)->
tv_£c
++; \

117 (
v•
)->
tv_n£c
 -= 1000000000L; \

119 } 0)

	)

120 
	#time•ecsub
(
t•
, 
u•
, 
v•
) \

122 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯- (
u•
)->tv_sec; \

123 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯- (
u•
)->tv_nsec; \

124 i‡((
v•
)->
tv_n£c
 < 0) { \

125 (
v•
)->
tv_£c
--; \

126 (
v•
)->
tv_n£c
 += 1000000000L; \

128 } 0)

	)

134 
	#ITIMER_REAL
 0

	)

135 
	#ITIMER_VIRTUAL
 1

	)

136 
	#ITIMER_PROF
 2

	)

138 
	sôimîvÆ
 {

139 
timevÆ
 
	mô_öãrvÆ
;

140 
timevÆ
 
	mô_vÆue
;

146 
	s˛ocköfo
 {

147 
	mhz
;

148 
	mtick
;

149 
	mtickadj
;

150 
	m°©hz
;

151 
	m¥ofhz
;

154 
	#CLOCK_REALTIME
 0

	)

155 
	#CLOCK_VIRTUAL
 1

	)

156 
	#CLOCK_PROF
 2

	)

158 
	#TIMER_RELTIME
 0x0

	)

159 
	#TIMER_ABSTIME
 0x1

	)

	@compat/sys/queue.h

35 #i‚def 
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

88 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

89 
	s«me
 { \

90 
ty≥
 *
¶h_fú°
; \

91 }

	)

93 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

94 { 
NULL
 }

	)

96 #i‚de‡
WIN32


97 
	#SLIST_ENTRY
(
ty≥
) \

99 
ty≥
 *
¶e_√xt
; \

100 }

	)

106 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

107 
	#SLIST_END
(
hód
Ë
NULL


	)

108 
	#SLIST_EMPTY
(
hód
Ë(
	`SLIST_FIRST
(hódË=
	`SLIST_END
(hód))

	)

109 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

111 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

112 (
v¨
Ë
	`SLIST_FIRST
(
hód
); \

113 (
v¨
Ë!
	`SLIST_END
(
hód
); \

114 (
v¨
Ë
	`SLIST_NEXT
(v¨, 
fõld
))

	)

119 
	#SLIST_INIT
(
hód
) { \

120 
	`SLIST_FIRST
(
hód
Ë
	`SLIST_END
(head); \

121 }

	)

123 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

124 (
ñm
)->
fõld
.
¶e_√xt
 = (
¶i°ñm
)->field.sle_next; \

125 (
¶i°ñm
)->
fõld
.
¶e_√xt
 = (
ñm
); \

126 } 0)

	)

128 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

129 (
ñm
)->
fõld
.
¶e_√xt
 = (
hód
)->
¶h_fú°
; \

130 (
hód
)->
¶h_fú°
 = (
ñm
); \

131 } 0)

	)

133 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

134 (
hód
)->
¶h_fú°
 = (hód)->¶h_fú°->
fõld
.
¶e_√xt
; \

135 } 0)

	)

140 
	#LIST_HEAD
(
«me
, 
ty≥
) \

141 
	s«me
 { \

142 
ty≥
 *
lh_fú°
; \

143 }

	)

145 
	#LIST_HEAD_INITIALIZER
(
hód
) \

146 { 
NULL
 }

	)

148 
	#LIST_ENTRY
(
ty≥
) \

150 
ty≥
 *
À_√xt
; \

151 
ty≥
 **
À_¥ev
; \

152 }

	)

157 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

158 
	#LIST_END
(
hód
Ë
NULL


	)

159 
	#LIST_EMPTY
(
hód
Ë(
	`LIST_FIRST
(hódË=
	`LIST_END
(hód))

	)

160 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

162 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

163 (
v¨
Ë
	`LIST_FIRST
(
hód
); \

164 (
v¨
)!
	`LIST_END
(
hód
); \

165 (
v¨
Ë
	`LIST_NEXT
(v¨, 
fõld
))

	)

170 
	#LIST_INIT
(
hód
) do { \

171 
	`LIST_FIRST
(
hód
Ë
	`LIST_END
(head); \

172 } 0)

	)

174 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

175 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
)->fõld.À_√xtË!
NULL
) \

176 (
li°ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

177 &(
ñm
)->
fõld
.
À_√xt
; \

178 (
li°ñm
)->
fõld
.
À_√xt
 = (
ñm
); \

179 (
ñm
)->
fõld
.
À_¥ev
 = &(
li°ñm
)->fõld.
À_√xt
; \

180 } 0)

	)

182 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

183 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

184 (
ñm
)->
fõld
.
À_√xt
 = (
li°ñm
); \

185 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

186 (
li°ñm
)->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
; \

187 } 0)

	)

189 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

190 i‡(((
ñm
)->
fõld
.
À_√xt
 = (
hód
)->
lh_fú°
Ë!
NULL
) \

191 (
hód
)->
lh_fú°
->
fõld
.
À_¥ev
 = &(
ñm
)->fõld.
À_√xt
;\

192 (
hód
)->
lh_fú°
 = (
ñm
); \

193 (
ñm
)->
fõld
.
À_¥ev
 = &(
hód
)->
lh_fú°
; \

194 } 0)

	)

196 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

197 i‡((
ñm
)->
fõld
.
À_√xt
 !
NULL
) \

198 (
ñm
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

199 (
ñm
)->
fõld
.
À_¥ev
; \

200 *(
ñm
)->
fõld
.
À_¥ev
 = (ñm)->fõld.
À_√xt
; \

201 } 0)

	)

203 
	#LIST_REPLACE
(
ñm
, 
ñm2
, 
fõld
) do { \

204 i‡(((
ñm2
)->
fõld
.
À_√xt
 = (
ñm
)->fõld.À_√xtË!
NULL
) \

205 (
ñm2
)->
fõld
.
À_√xt
->fõld.
À_¥ev
 = \

206 &(
ñm2
)->
fõld
.
À_√xt
; \

207 (
ñm2
)->
fõld
.
À_¥ev
 = (
ñm
)->field.le_prev; \

208 *(
ñm2
)->
fõld
.
À_¥ev
 = (elm2); \

209 } 0)

	)

214 
	#SIMPLEQ_HEAD
(
«me
, 
ty≥
) \

215 
	s«me
 { \

216 
ty≥
 *
sqh_fú°
; \

217 
ty≥
 **
sqh_œ°
; \

218 }

	)

220 
	#SIMPLEQ_HEAD_INITIALIZER
(
hód
) \

221 { 
NULL
, &(
hód
).
sqh_fú°
 }

	)

223 
	#SIMPLEQ_ENTRY
(
ty≥
) \

225 
ty≥
 *
sqe_√xt
; \

226 }

	)

231 
	#SIMPLEQ_FIRST
(
hód
Ë((hód)->
sqh_fú°
)

	)

232 
	#SIMPLEQ_END
(
hód
Ë
NULL


	)

233 
	#SIMPLEQ_EMPTY
(
hód
Ë(
	`SIMPLEQ_FIRST
(hódË=
	`SIMPLEQ_END
(hód))

	)

234 
	#SIMPLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
sqe_√xt
)

	)

236 
	#SIMPLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

237 (
v¨
Ë
	`SIMPLEQ_FIRST
(
hód
); \

238 (
v¨
Ë!
	`SIMPLEQ_END
(
hód
); \

239 (
v¨
Ë
	`SIMPLEQ_NEXT
(v¨, 
fõld
))

	)

244 
	#SIMPLEQ_INIT
(
hód
) do { \

245 (
hód
)->
sqh_fú°
 = 
NULL
; \

246 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

247 } 0)

	)

249 
	#SIMPLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

250 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
hód
)->
sqh_fú°
Ë=
NULL
) \

251 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

252 (
hód
)->
sqh_fú°
 = (
ñm
); \

253 } 0)

	)

255 
	#SIMPLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

256 (
ñm
)->
fõld
.
sqe_√xt
 = 
NULL
; \

257 *(
hód
)->
sqh_œ°
 = (
ñm
); \

258 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

259 } 0)

	)

261 
	#SIMPLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

262 i‡(((
ñm
)->
fõld
.
sqe_√xt
 = (
li°ñm
)->fõld.sqe_√xtË=
NULL
)\

263 (
hód
)->
sqh_œ°
 = &(
ñm
)->
fõld
.
sqe_√xt
; \

264 (
li°ñm
)->
fõld
.
sqe_√xt
 = (
ñm
); \

265 } 0)

	)

267 
	#SIMPLEQ_REMOVE_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

268 i‡(((
hód
)->
sqh_fú°
 = (
ñm
)->
fõld
.
sqe_√xt
Ë=
NULL
) \

269 (
hód
)->
sqh_œ°
 = &(hód)->
sqh_fú°
; \

270 } 0)

	)

275 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

276 
	s«me
 { \

277 
ty≥
 *
tqh_fú°
; \

278 
ty≥
 **
tqh_œ°
; \

279 }

	)

281 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

282 { 
NULL
, &(
hód
).
tqh_fú°
 }

	)

284 
	#TAILQ_ENTRY
(
ty≥
) \

286 
ty≥
 *
tqe_√xt
; \

287 
ty≥
 **
tqe_¥ev
; \

288 }

	)

293 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

294 
	#TAILQ_END
(
hód
Ë
NULL


	)

295 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

296 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

297 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

299 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

300 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

301 
	#TAILQ_EMPTY
(
hód
) \

302 (
	`TAILQ_FIRST
(
hód
Ë=
	`TAILQ_END
(hód))

	)

304 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

305 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

306 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

307 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

309 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
, 
hód«me
) \

310 (
v¨
Ë
	`TAILQ_LAST
(
hód
, 
hód«me
); \

311 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

312 (
v¨
Ë
	`TAILQ_PREV
(v¨, 
hód«me
, 
fõld
))

	)

317 
	#TAILQ_INIT
(
hód
) do { \

318 (
hód
)->
tqh_fú°
 = 
NULL
; \

319 (
hód
)->
tqh_œ°
 = &(hód)->
tqh_fú°
; \

320 } 0)

	)

322 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

323 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
hód
)->
tqh_fú°
Ë!
NULL
) \

324 (
hód
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = \

325 &(
ñm
)->
fõld
.
tqe_√xt
; \

327 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

328 (
hód
)->
tqh_fú°
 = (
ñm
); \

329 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
hód
)->
tqh_fú°
; \

330 } 0)

	)

332 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

333 (
ñm
)->
fõld
.
tqe_√xt
 = 
NULL
; \

334 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

335 *(
hód
)->
tqh_œ°
 = (
ñm
); \

336 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

337 } 0)

	)

339 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

340 i‡(((
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
)->fõld.tqe_√xtË!
NULL
)\

341 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

342 &(
ñm
)->
fõld
.
tqe_√xt
; \

344 (
hód
)->
tqh_œ°
 = &(
ñm
)->
fõld
.
tqe_√xt
; \

345 (
li°ñm
)->
fõld
.
tqe_√xt
 = (
ñm
); \

346 (
ñm
)->
fõld
.
tqe_¥ev
 = &(
li°ñm
)->fõld.
tqe_√xt
; \

347 } 0)

	)

349 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

350 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

351 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

352 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

353 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

354 } 0)

	)

356 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

357 i‡(((
ñm
)->
fõld
.
tqe_√xt
Ë!
NULL
) \

358 (
ñm
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

359 (
ñm
)->
fõld
.
tqe_¥ev
; \

361 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

362 *(
ñm
)->
fõld
.
tqe_¥ev
 = (ñm)->fõld.
tqe_√xt
; \

363 } 0)

	)

365 
	#TAILQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

366 i‡(((
ñm2
)->
fõld
.
tqe_√xt
 = (
ñm
)->fõld.tqe_√xtË!
NULL
) \

367 (
ñm2
)->
fõld
.
tqe_√xt
->fõld.
tqe_¥ev
 = \

368 &(
ñm2
)->
fõld
.
tqe_√xt
; \

370 (
hód
)->
tqh_œ°
 = &(
ñm2
)->
fõld
.
tqe_√xt
; \

371 (
ñm2
)->
fõld
.
tqe_¥ev
 = (
ñm
)->field.tqe_prev; \

372 *(
ñm2
)->
fõld
.
tqe_¥ev
 = (elm2); \

373 } 0)

	)

378 
	#CIRCLEQ_HEAD
(
«me
, 
ty≥
) \

379 
	s«me
 { \

380 
ty≥
 *
cqh_fú°
; \

381 
ty≥
 *
cqh_œ°
; \

382 }

	)

384 
	#CIRCLEQ_HEAD_INITIALIZER
(
hód
) \

385 { 
	`CIRCLEQ_END
(&
hód
), CIRCLEQ_END(&hódË}

	)

387 
	#CIRCLEQ_ENTRY
(
ty≥
) \

389 
ty≥
 *
cqe_√xt
; \

390 
ty≥
 *
cqe_¥ev
; \

391 }

	)

396 
	#CIRCLEQ_FIRST
(
hód
Ë((hód)->
cqh_fú°
)

	)

397 
	#CIRCLEQ_LAST
(
hód
Ë((hód)->
cqh_œ°
)

	)

398 
	#CIRCLEQ_END
(
hód
Ë((*)(hód))

	)

399 
	#CIRCLEQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_√xt
)

	)

400 
	#CIRCLEQ_PREV
(
ñm
, 
fõld
Ë(”lm)->fõld.
cqe_¥ev
)

	)

401 
	#CIRCLEQ_EMPTY
(
hód
) \

402 (
	`CIRCLEQ_FIRST
(
hód
Ë=
	`CIRCLEQ_END
(hód))

	)

404 
	#CIRCLEQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

405 (
v¨
Ë
	`CIRCLEQ_FIRST
(
hód
); \

406 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

407 (
v¨
Ë
	`CIRCLEQ_NEXT
(v¨, 
fõld
))

	)

409 
	#CIRCLEQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
fõld
) \

410 (
v¨
Ë
	`CIRCLEQ_LAST
(
hód
); \

411 (
v¨
Ë!
	`CIRCLEQ_END
(
hód
); \

412 (
v¨
Ë
	`CIRCLEQ_PREV
(v¨, 
fõld
))

	)

417 
	#CIRCLEQ_INIT
(
hód
) do { \

418 (
hód
)->
cqh_fú°
 = 
	`CIRCLEQ_END
(head); \

419 (
hód
)->
cqh_œ°
 = 
	`CIRCLEQ_END
(head); \

420 } 0)

	)

422 
	#CIRCLEQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

423 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
)->field.cqe_next; \

424 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
); \

425 i‡((
li°ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

426 (
hód
)->
cqh_œ°
 = (
ñm
); \

428 (
li°ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (
ñm
); \

429 (
li°ñm
)->
fõld
.
cqe_√xt
 = (
ñm
); \

430 } 0)

	)

432 
	#CIRCLEQ_INSERT_BEFORE
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

433 (
ñm
)->
fõld
.
cqe_√xt
 = (
li°ñm
); \

434 (
ñm
)->
fõld
.
cqe_¥ev
 = (
li°ñm
)->field.cqe_prev; \

435 i‡((
li°ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

436 (
hód
)->
cqh_fú°
 = (
ñm
); \

438 (
li°ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (
ñm
); \

439 (
li°ñm
)->
fõld
.
cqe_¥ev
 = (
ñm
); \

440 } 0)

	)

442 
	#CIRCLEQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

443 (
ñm
)->
fõld
.
cqe_√xt
 = (
hód
)->
cqh_fú°
; \

444 (
ñm
)->
fõld
.
cqe_¥ev
 = 
	`CIRCLEQ_END
(
hód
); \

445 i‡((
hód
)->
cqh_œ°
 =
	`CIRCLEQ_END
(head)) \

446 (
hód
)->
cqh_œ°
 = (
ñm
); \

448 (
hód
)->
cqh_fú°
->
fõld
.
cqe_¥ev
 = (
ñm
); \

449 (
hód
)->
cqh_fú°
 = (
ñm
); \

450 } 0)

	)

452 
	#CIRCLEQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

453 (
ñm
)->
fõld
.
cqe_√xt
 = 
	`CIRCLEQ_END
(
hód
); \

454 (
ñm
)->
fõld
.
cqe_¥ev
 = (
hód
)->
cqh_œ°
; \

455 i‡((
hód
)->
cqh_fú°
 =
	`CIRCLEQ_END
(head)) \

456 (
hód
)->
cqh_fú°
 = (
ñm
); \

458 (
hód
)->
cqh_œ°
->
fõld
.
cqe_√xt
 = (
ñm
); \

459 (
hód
)->
cqh_œ°
 = (
ñm
); \

460 } 0)

	)

462 
	#CIRCLEQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

463 i‡((
ñm
)->
fõld
.
cqe_√xt
 =
	`CIRCLEQ_END
(
hód
)) \

464 (
hód
)->
cqh_œ°
 = (
ñm
)->
fõld
.
cqe_¥ev
; \

466 (
ñm
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = \

467 (
ñm
)->
fõld
.
cqe_¥ev
; \

468 i‡((
ñm
)->
fõld
.
cqe_¥ev
 =
	`CIRCLEQ_END
(
hód
)) \

469 (
hód
)->
cqh_fú°
 = (
ñm
)->
fõld
.
cqe_√xt
; \

471 (
ñm
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = \

472 (
ñm
)->
fõld
.
cqe_√xt
; \

473 } 0)

	)

475 
	#CIRCLEQ_REPLACE
(
hód
, 
ñm
, 
ñm2
, 
fõld
) do { \

476 i‡(((
ñm2
)->
fõld
.
cqe_√xt
 = (
ñm
)->field.cqe_next) == \

477 
	`CIRCLEQ_END
(
hód
)) \

478 (
hód
).
cqh_œ°
 = (
ñm2
); \

480 (
ñm2
)->
fõld
.
cqe_√xt
->fõld.
cqe_¥ev
 = (elm2); \

481 i‡(((
ñm2
)->
fõld
.
cqe_¥ev
 = (
ñm
)->field.cqe_prev) == \

482 
	`CIRCLEQ_END
(
hód
)) \

483 (
hód
).
cqh_fú°
 = (
ñm2
); \

485 (
ñm2
)->
fõld
.
cqe_¥ev
->fõld.
cqe_√xt
 = (elm2); \

486 } 0)

	)

	@devpoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<sys/ty≥s.h
>

32 
	~<sys/ªsour˚.h
>

33 #ifde‡
HAVE_SYS_TIME_H


34 
	~<sys/time.h
>

36 
	~<sys/_libevít_time.h
>

38 
	~<sys/queue.h
>

39 
	~<sys/devpﬁl.h
>

40 
	~<sig«l.h
>

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<uni°d.h
>

45 
	~<f˙é.h
>

46 
	~<î∫o.h
>

47 
	~<as£π.h
>

49 
	~"evít.h
"

50 
	~"evít-öã∫Æ.h
"

51 
	~"evsig«l.h
"

52 
	~"log.h
"

57 
	sevdevpﬁl
 {

58 
evít
 *
	mevªad
;

59 
evít
 *
	mevwrôe
;

62 
	sdevpﬁl›
 {

63 
evdevpﬁl
 *
	mfds
;

64 
	mnfds
;

65 
pﬁlfd
 *
	mevíts
;

66 
	m√víts
;

67 
	mdpfd
;

68 
pﬁlfd
 *
	mch™ges
;

69 
	mnch™ges
;

72 *
devpﬁl_öô
 (
evít_ba£
 *);

73 
devpﬁl_add
 (*, 
evít
 *);

74 
devpﬁl_dñ
 (*, 
evít
 *);

75 
devpﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

76 
devpﬁl_dóŒoc
 (
evít_ba£
 *, *);

78 c⁄° 
evít›
 
	gdevpﬁl›s
 = {

80 
devpﬁl_öô
,

81 
devpﬁl_add
,

82 
devpﬁl_dñ
,

83 
devpﬁl_di•©ch
,

84 
devpﬁl_dóŒoc
,

88 
	#NEVENT
 32000

	)

91 
	$devpﬁl_commô
(
devpﬁl›
 *devpollop)

97 i‡(
	`pwrôe
(
devpﬁl›
->
dpfd
, devpﬁl›->
ch™ges
,

98 (
pﬁlfd
Ë* 
devpﬁl›
->
nch™ges
, 0) == -1)

101 
devpﬁl›
->
nch™ges
 = 0;

103 
	}
}

106 
	$devpﬁl_queue
(
devpﬁl›
 *devpﬁl›, 
fd
, 
evíts
) {

107 
pﬁlfd
 *
pfd
;

109 i‡(
devpﬁl›
->
nch™ges
 >devpﬁl›->
√víts
) {

114 i‡(
	`devpﬁl_commô
(
devpﬁl›
) != 0)

118 
pfd
 = &
devpﬁl›
->
ch™ges
[devpﬁl›->
nch™ges
++];

119 
pfd
->
fd
 = fd;

120 
pfd
->
evíts
 =Évents;

121 
pfd
->
ªvíts
 = 0;

124 
	}
}

127 
	$devpﬁl_öô
(
evít_ba£
 *
ba£
)

129 
dpfd
, 
nfûes
 = 
NEVENT
;

130 
æimô
 
æ
;

131 
devpﬁl›
 *devpollop;

134 i‡(
	`evutû_gëív
("EVENT_NODEVPOLL"))

135  (
NULL
);

137 i‡(!(
devpﬁl›
 = 
	`ˇŒoc
(1, (devpollop))))

138  (
NULL
);

140 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æ
) == 0 &&

141 
æ
.
æim_cur
 !
RLIM_INFINITY
)

142 
nfûes
 = 
æ
.
æim_cur
;

145 i‡((
dpfd
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
)) == -1) {

146 
	`evít_w¨n
("open: /dev/poll");

147 
	`‰ì
(
devpﬁl›
);

148  (
NULL
);

151 
devpﬁl›
->
dpfd
 = dpfd;

154 
devpﬁl›
->
evíts
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

155 i‡(
devpﬁl›
->
evíts
 =
NULL
) {

156 
	`‰ì
(
devpﬁl›
);

157 
	`˛o£
(
dpfd
);

158  (
NULL
);

160 
devpﬁl›
->
√víts
 = 
nfûes
;

162 
devpﬁl›
->
fds
 = 
	`ˇŒoc
(
nfûes
, (
evdevpﬁl
));

163 i‡(
devpﬁl›
->
fds
 =
NULL
) {

164 
	`‰ì
(
devpﬁl›
->
evíts
);

165 
	`‰ì
(
devpﬁl›
);

166 
	`˛o£
(
dpfd
);

167  (
NULL
);

169 
devpﬁl›
->
nfds
 = 
nfûes
;

171 
devpﬁl›
->
ch™ges
 = 
	`ˇŒoc
(
nfûes
, (
pﬁlfd
));

172 i‡(
devpﬁl›
->
ch™ges
 =
NULL
) {

173 
	`‰ì
(
devpﬁl›
->
fds
);

174 
	`‰ì
(
devpﬁl›
->
evíts
);

175 
	`‰ì
(
devpﬁl›
);

176 
	`˛o£
(
dpfd
);

177  (
NULL
);

180 
	`evsig«l_öô
(
ba£
);

182  (
devpﬁl›
);

183 
	}
}

186 
	$devpﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

188 
devpﬁl›
 *devpﬁl› = 
¨g
;

190 i‡(
max
 >
devpﬁl›
->
nfds
) {

191 
evdevpﬁl
 *
fds
;

192 
nfds
;

194 
nfds
 = 
devpﬁl›
->nfds;

195 
nfds
 <
max
)

196 
nfds
 <<= 1;

198 
fds
 = 
	`ªÆloc
(
devpﬁl›
->fds, 
nfds
 * (
evdevpﬁl
));

199 i‡(
fds
 =
NULL
) {

200 
	`evít_w¨n
("realloc");

203 
devpﬁl›
->
fds
 = fds;

204 
	`mem£t
(
fds
 + 
devpﬁl›
->
nfds
, 0,

205 (
nfds
 - 
devpﬁl›
->nfdsË* (
evdevpﬁl
));

206 
devpﬁl›
->
nfds
 =Çfds;

210 
	}
}

213 
	$devpﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

215 
devpﬁl›
 *devpﬁl› = 
¨g
;

216 
pﬁlfd
 *
evíts
 = 
devpﬁl›
->events;

217 
dvpﬁl
 
dvp
;

218 
evdevpﬁl
 *
evdp
;

219 
i
, 
ªs
, 
timeout
 = -1;

221 i‡(
devpﬁl›
->
nch™ges
)

222 
	`devpﬁl_commô
(
devpﬁl›
);

224 i‡(
tv
 !
NULL
)

225 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

227 
dvp
.
dp_fds
 = 
devpﬁl›
->
evíts
;

228 
dvp
.
dp_nfds
 = 
devpﬁl›
->
√víts
;

229 
dvp
.
dp_timeout
 = 
timeout
;

231 
ªs
 = 
	`io˘l
(
devpﬁl›
->
dpfd
, 
DP_POLL
, &
dvp
);

233 i‡(
ªs
 == -1) {

234 i‡(
î∫o
 !
EINTR
) {

235 
	`evít_w¨n
("ioctl: DP_POLL");

239 
	`evsig«l_¥o˚ss
(
ba£
);

241 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

242 
	`evsig«l_¥o˚ss
(
ba£
);

245 
	`evít_debug
(("%s: devpﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

247 
i
 = 0; i < 
ªs
; i++) {

248 
which
 = 0;

249 
wh©
 = 
evíts
[
i
].
ªvíts
;

250 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

252 
	`as£π
(
evíts
[
i
].
fd
 < 
devpﬁl›
->
nfds
);

253 
evdp
 = &
devpﬁl›
->
fds
[
evíts
[
i
].
fd
];

255 i‡(
wh©
 & 
POLLHUP
)

256 
wh©
 |
POLLIN
 | 
POLLOUT
;

257 i‡(
wh©
 & 
POLLERR
)

258 
wh©
 |
POLLIN
 | 
POLLOUT
;

260 i‡(
wh©
 & 
POLLIN
) {

261 
evªad
 = 
evdp
->evread;

262 
which
 |
EV_READ
;

265 i‡(
wh©
 & 
POLLOUT
) {

266 
evwrôe
 = 
evdp
->evwrite;

267 
which
 |
EV_WRITE
;

270 i‡(!
which
)

273 i‡(
evªad
 !
NULL
 && !”vªad->
ev_evíts
 & 
EV_PERSIST
))

274 
	`evít_dñ
(
evªad
);

275 i‡(
evwrôe
 !
NULL
 &&Évwrôê!
evªad
 &&

276 !(
evwrôe
->
ev_evíts
 & 
EV_PERSIST
))

277 
	`evít_dñ
(
evwrôe
);

279 i‡(
evªad
 !
NULL
)

280 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

281 i‡(
evwrôe
 !
NULL
)

282 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

286 
	}
}

290 
	$devpﬁl_add
(*
¨g
, 
evít
 *
ev
)

292 
devpﬁl›
 *devpﬁl› = 
¨g
;

293 
evdevpﬁl
 *
evdp
;

294 
fd
, 
evíts
;

296 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

297  (
	`evsig«l_add
(
ev
));

299 
fd
 = 
ev
->
ev_fd
;

300 i‡(
fd
 >
devpﬁl›
->
nfds
) {

302 i‡(
	`devpﬁl_ªˇlc
(
ev
->
ev_ba£
, 
devpﬁl›
, 
fd
) == -1)

305 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

314 
evíts
 = 0;

315 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

316 i‡(
evdp
->
evªad
 &&Évdp->evªad !
ev
) {

320 
evíts
 |
POLLIN
;

323 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

324 i‡(
evdp
->
evwrôe
 &&Évdp->evwrôê!
ev
) {

328 
evíts
 |
POLLOUT
;

331 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
evíts
) != 0)

335 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

336 
evdp
->
evªad
 = 
ev
;

337 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

338 
evdp
->
evwrôe
 = 
ev
;

341 
	}
}

344 
	$devpﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

346 
devpﬁl›
 *devpﬁl› = 
¨g
;

347 
evdevpﬁl
 *
evdp
;

348 
fd
, 
evíts
;

349 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

351 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

352  (
	`evsig«l_dñ
(
ev
));

354 
fd
 = 
ev
->
ev_fd
;

355 i‡(
fd
 >
devpﬁl›
->
nfds
)

357 
evdp
 = &
devpﬁl›
->
fds
[
fd
];

359 
evíts
 = 0;

360 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

361 
evíts
 |
POLLIN
;

362 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

363 
evíts
 |
POLLOUT
;

372 i‡(
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLREMOVE
) != 0)

375 i‡((
evíts
 & (
POLLIN
|
POLLOUT
)) != (POLLIN|POLLOUT)) {

381 i‡((
evíts
 & 
POLLIN
Ë&& 
evdp
->
evwrôe
 !
NULL
) {

383 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLOUT
);

384 
√edwrôedñëe
 = 0;

385 } i‡((
evíts
 & 
POLLOUT
Ë&& 
evdp
->
evªad
 !
NULL
) {

387 
	`devpﬁl_queue
(
devpﬁl›
, 
fd
, 
POLLIN
);

388 
√edªaddñëe
 = 0;

392 i‡(
√edªaddñëe
)

393 
evdp
->
evªad
 = 
NULL
;

394 i‡(
√edwrôedñëe
)

395 
evdp
->
evwrôe
 = 
NULL
;

398 
	}
}

401 
	$devpﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

403 
devpﬁl›
 *devpﬁl› = 
¨g
;

405 
	`evsig«l_dóŒoc
(
ba£
);

406 i‡(
devpﬁl›
->
fds
)

407 
	`‰ì
(
devpﬁl›
->
fds
);

408 i‡(
devpﬁl›
->
evíts
)

409 
	`‰ì
(
devpﬁl›
->
evíts
);

410 i‡(
devpﬁl›
->
ch™ges
)

411 
	`‰ì
(
devpﬁl›
->
ch™ges
);

412 i‡(
devpﬁl›
->
dpfd
 >= 0)

413 
	`˛o£
(
devpﬁl›
->
dpfd
);

415 
	`mem£t
(
devpﬁl›
, 0, (devpollop));

416 
	`‰ì
(
devpﬁl›
);

417 
	}
}

	@epoll.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<sys/ªsour˚.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/ïﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
HAVE_FCNTL_H


48 
	~<f˙é.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

59 
	sevïﬁl
 {

60 
evít
 *
	mevªad
;

61 
evít
 *
	mevwrôe
;

67 
	sïﬁl›
 {

68 
evïﬁl
 *
	mfds
;

69 
	mnfds
;

70 
ïﬁl_evít
 *
	mevíts
;

71 
	m√víts
;

72 
	mïfd
;

78 *
ïﬁl_öô
 (
evít_ba£
 *);

79 
ïﬁl_add
 (*, 
evít
 *);

80 
ïﬁl_dñ
 (*, 
evít
 *);

81 
ïﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

82 
ïﬁl_dóŒoc
 (
evít_ba£
 *, *);

84 c⁄° 
evít›
 
	gïﬁl›s
 = {

86 
ïﬁl_öô
,

87 
ïﬁl_add
,

88 
ïﬁl_dñ
,

89 
ïﬁl_di•©ch
,

90 
ïﬁl_dóŒoc
,

94 #ifde‡
HAVE_SETFD


95 
	#FD_CLOSEONEXEC
(
x
) do { \

96 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

97 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

98 } 0)

	)

100 
	#FD_CLOSEONEXEC
(
x
)

	)

109 
	#MAX_EPOLL_TIMEOUT_MSEC
 (35*60*1000)

	)

111 
	#INITIAL_NFILES
 32

	)

112 
	#INITIAL_NEVENTS
 32

	)

113 
	#MAX_NEVENTS
 4096

	)

119 
	$ïﬁl_öô
(
evít_ba£
 *
ba£
)

121 
ïfd
;

122 
ïﬁl›
 *epollop;

125 i‡(
	`evutû_gëív
("EVENT_NOEPOLL"))

126  (
NULL
);

130 i‡((
ïfd
 = 
	`ïﬁl_¸óã
(32000)) == -1) {

131 i‡(
î∫o
 !
ENOSYS
)

132 
	`evít_w¨n
("epoll_create");

133  (
NULL
);

137 
	`FD_CLOSEONEXEC
(
ïfd
);

139 i‡(!(
ïﬁl›
 = 
	`ˇŒoc
(1, (epollop))))

140  (
NULL
);

142 
ïﬁl›
->
ïfd
 =Épfd;

146 
ïﬁl›
->
evíts
 = 
	`mÆloc
(
INITIAL_NEVENTS
 * (
ïﬁl_evít
));

147 i‡(
ïﬁl›
->
evíts
 =
NULL
) {

148 
	`‰ì
(
ïﬁl›
);

149  (
NULL
);

151 
ïﬁl›
->
√víts
 = 
INITIAL_NEVENTS
;

154 
ïﬁl›
->
fds
 = 
	`ˇŒoc
(
INITIAL_NFILES
, (
evïﬁl
));

155 i‡(
ïﬁl›
->
fds
 =
NULL
) {

156 
	`‰ì
(
ïﬁl›
->
evíts
);

157 
	`‰ì
(
ïﬁl›
);

158  (
NULL
);

160 
ïﬁl›
->
nfds
 = 
INITIAL_NFILES
;

163 
	`evsig«l_öô
(
ba£
);

165  (
ïﬁl›
);

166 
	}
}

172 
	$ïﬁl_ªˇlc
(
evít_ba£
 *
ba£
, *
¨g
, 
max
)

174 
ïﬁl›
 *ïﬁl› = 
¨g
;

178 i‡(
max
 >
ïﬁl›
->
nfds
) {

179 
evïﬁl
 *
fds
;

180 
nfds
;

182 
nfds
 = 
ïﬁl›
->nfds;

185 
nfds
 <
max
)

186 
nfds
 <<= 1;

189 
fds
 = 
	`ªÆloc
(
ïﬁl›
->fds, 
nfds
 * (
evïﬁl
));

190 i‡(
fds
 =
NULL
) {

191 
	`evít_w¨n
("realloc");

194 
ïﬁl›
->
fds
 = fds;

197 
	`mem£t
(
fds
 + 
ïﬁl›
->
nfds
, 0,

198 (
nfds
 - 
ïﬁl›
->nfdsË* (
evïﬁl
));

200 
ïﬁl›
->
nfds
 =Çfds;

204 
	}
}

214 
	$ïﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

216 
ïﬁl›
 *ïﬁl› = 
¨g
;

217 
ïﬁl_evít
 *
evíts
 = 
ïﬁl›
->events;

218 
evïﬁl
 *
evï
;

219 
i
, 
ªs
, 
timeout
 = -1;

222 i‡(
tv
 !
NULL
)

223 
timeout
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

226 i‡(
timeout
 > 
MAX_EPOLL_TIMEOUT_MSEC
) {

229 
timeout
 = 
MAX_EPOLL_TIMEOUT_MSEC
;

232 
ªs
 = 
	`ïﬁl_waô
(
ïﬁl›
->
ïfd
, 
evíts
,Épﬁl›->
√víts
, 
timeout
);

235 i‡(
ªs
 == -1) {

236 i‡(
î∫o
 !
EINTR
) {

237 
	`evít_w¨n
("epoll_wait");

242 
	`evsig«l_¥o˚ss
(
ba£
);

244 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

245 
	`evsig«l_¥o˚ss
(
ba£
);

248 
	`evít_debug
(("%s:Épﬁl_waôÑï‹t†%d", 
__func__
, 
ªs
));

251 
i
 = 0; i < 
ªs
; i++) {

252 
wh©
 = 
evíts
[
i
].events;

253 
evít
 *
evªad
 = 
NULL
, *
evwrôe
 = NULL;

254 
fd
 = 
evíts
[
i
].
d©a
.fd;

256 i‡(
fd
 < 0 || fd >
ïﬁl›
->
nfds
)

258 
evï
 = &
ïﬁl›
->
fds
[
fd
];

264 i‡(
wh©
 & (
EPOLLHUP
|
EPOLLERR
)) {

265 
evªad
 = 
evï
->evread;

266 
evwrôe
 = 
evï
->evwrite;

268 i‡(
wh©
 & 
EPOLLIN
) {

269 
evªad
 = 
evï
->evread;

272 i‡(
wh©
 & 
EPOLLOUT
) {

273 
evwrôe
 = 
evï
->evwrite;

277 i‡(!(
evªad
||
evwrôe
))

280 i‡(
evªad
 !
NULL
)

281 
	`evít_a˘ive
(
evªad
, 
EV_READ
, 1);

282 i‡(
evwrôe
 !
NULL
)

283 
	`evít_a˘ive
(
evwrôe
, 
EV_WRITE
, 1);

287 i‡(
ªs
 =
ïﬁl›
->
√víts
 &&Épﬁl›->√vít†< 
MAX_NEVENTS
) {

290 
√w_√víts
 = 
ïﬁl›
->
√víts
 * 2;

291 
ïﬁl_evít
 *
√w_evíts
;

294 
√w_evíts
 = 
	`ªÆloc
(
ïﬁl›
->
evíts
,

295 
√w_√víts
 * (
ïﬁl_evít
));

296 i‡(
√w_evíts
) {

297 
ïﬁl›
->
evíts
 = 
√w_evíts
;

298 
ïﬁl›
->
√víts
 = 
√w_√víts
;

303 
	}
}

313 
	$ïﬁl_add
(*
¨g
, 
evít
 *
ev
)

315 
ïﬁl›
 *ïﬁl› = 
¨g
;

316 
ïﬁl_evít
 
ïev
 = {0, {0}};

317 
evïﬁl
 *
evï
;

318 
fd
, 
›
, 
evíts
;

320 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

321  (
	`evsig«l_add
(
ev
));

323 
fd
 = 
ev
->
ev_fd
;

324 i‡(
fd
 >
ïﬁl›
->
nfds
) {

326 i‡(
	`ïﬁl_ªˇlc
(
ev
->
ev_ba£
, 
ïﬁl›
, 
fd
) == -1)

329 
evï
 = &
ïﬁl›
->
fds
[
fd
];

330 
›
 = 
EPOLL_CTL_ADD
;

331 
evíts
 = 0;

334 i‡(
evï
->
evªad
 !
NULL
) {

335 
evíts
 |
EPOLLIN
;

336 
›
 = 
EPOLL_CTL_MOD
;

340 i‡(
evï
->
evwrôe
 !
NULL
) {

341 
evíts
 |
EPOLLOUT
;

342 
›
 = 
EPOLL_CTL_MOD
;

346 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

347 
evíts
 |
EPOLLIN
;

348 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

349 
evíts
 |
EPOLLOUT
;

351 
ïev
.
d©a
.
fd
 = fd;

352 
ïev
.
evíts
 =Évents;

353 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
ev
->
ev_fd
, &
ïev
) == -1)

358 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

359 
evï
->
evªad
 = 
ev
;

360 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

361 
evï
->
evwrôe
 = 
ev
;

364 
	}
}

373 
	$ïﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

375 
ïﬁl›
 *ïﬁl› = 
¨g
;

376 
ïﬁl_evít
 
ïev
 = {0, {0}};

377 
evïﬁl
 *
evï
;

378 
fd
, 
evíts
, 
›
;

379 
√edwrôedñëe
 = 1, 
√edªaddñëe
 = 1;

381 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

382  (
	`evsig«l_dñ
(
ev
));

384 
fd
 = 
ev
->
ev_fd
;

385 i‡(
fd
 >
ïﬁl›
->
nfds
)

387 
evï
 = &
ïﬁl›
->
fds
[
fd
];

389 
›
 = 
EPOLL_CTL_DEL
;

390 
evíts
 = 0;

392 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

393 
evíts
 |
EPOLLIN
;

394 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

395 
evíts
 |
EPOLLOUT
;

397 i‡((
evíts
 & (
EPOLLIN
|
EPOLLOUT
)) != (EPOLLIN|EPOLLOUT)) {

398 i‡((
evíts
 & 
EPOLLIN
Ë&& 
evï
->
evwrôe
 !
NULL
) {

399 
√edwrôedñëe
 = 0;

400 
evíts
 = 
EPOLLOUT
;

401 
›
 = 
EPOLL_CTL_MOD
;

402 } i‡((
evíts
 & 
EPOLLOUT
Ë&& 
evï
->
evªad
 !
NULL
) {

403 
√edªaddñëe
 = 0;

404 
evíts
 = 
EPOLLIN
;

405 
›
 = 
EPOLL_CTL_MOD
;

409 
ïev
.
evíts
 =Évents;

410 
ïev
.
d©a
.
fd
 = fd;

413 i‡(
√edªaddñëe
)

414 
evï
->
evªad
 = 
NULL
;

415 i‡(
√edwrôedñëe
)

416 
evï
->
evwrôe
 = 
NULL
;

418 i‡(
	`ïﬁl_˘l
(
ïﬁl›
->
ïfd
, 
›
, 
fd
, &
ïev
) == -1)

422 
	}
}

431 
	$ïﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

433 
ïﬁl›
 *ïﬁl› = 
¨g
;

435 
	`evsig«l_dóŒoc
(
ba£
);

436 i‡(
ïﬁl›
->
fds
)

437 
	`‰ì
(
ïﬁl›
->
fds
);

438 i‡(
ïﬁl›
->
evíts
)

439 
	`‰ì
(
ïﬁl›
->
evíts
);

440 i‡(
ïﬁl›
->
ïfd
 >= 0)

441 
	`˛o£
(
ïﬁl›
->
ïfd
);

443 
	`mem£t
(
ïﬁl›
, 0, (epollop));

444 
	`‰ì
(
ïﬁl›
);

445 
	}
}

	@epoll_sub.c

27 
	~<°döt.h
>

29 
	~<sys/∑øm.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/sysˇŒ.h
>

32 
	~<sys/ïﬁl.h
>

33 
	~<uni°d.h
>

36 
	$ïﬁl_¸óã
(
size
)

38  (
	`sysˇŒ
(
__NR_ïﬁl_¸óã
, 
size
));

39 
	}
}

42 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

45  (
	`sysˇŒ
(
__NR_ïﬁl_˘l
, 
ïfd
, 
›
, 
fd
, 
evít
));

46 
	}
}

49 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
maxevíts
, 
timeout
)

51  (
	`sysˇŒ
(
__NR_ïﬁl_waô
, 
ïfd
, 
evíts
, 
maxevíts
, 
timeout
));

52 
	}
}

	@evbuffer.c

28 
	~<sys/ty≥s.h
>

30 #ifde‡
HAVE_CONFIG_H


31 
	~"c⁄fig.h
"

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

38 
	~<î∫o.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<°rög.h
>

42 #ifde‡
HAVE_STDARG_H


43 
	~<°d¨g.h
>

46 #ifde‡
WIN32


47 
	~<wösock2.h
>

50 
	~"evutû.h
"

51 
	~"evít.h
"

55 
buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *, 
size_t
, size_t, *);

58 
	$buf„ªvít_add
(
evít
 *
ev
, 
timeout
)

60 
timevÆ
 
tv
, *
±v
 = 
NULL
;

62 i‡(
timeout
) {

63 
	`evutû_timî˛ór
(&
tv
);

64 
tv
.
tv_£c
 = 
timeout
;

65 
±v
 = &
tv
;

68  (
	`evít_add
(
ev
, 
±v
));

69 
	}
}

80 
	$buf„ªvít_ªad_¥essuª_cb
(
evbuf„r
 *
buf
, 
size_t
 
ﬁd
, size_à
now
,

81 *
¨g
) {

82 
buf„ªvít
 *
bu„v
 = 
¨g
;

87 i‡(
bu„v
->
wm_ªad
.
high
 =0 || 
now
 < bufev->wm_read.high) {

88 
	`evbuf„r_£tcb
(
buf
, 
NULL
, NULL);

90 i‡(
bu„v
->
íabÀd
 & 
EV_READ
)

91 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

93 
	}
}

100 
	$buf„ªvít_ªadcb
(
fd
, 
evít
, *
¨g
)

102 
buf„ªvít
 *
bu„v
 = 
¨g
;

103 
ªs
 = 0;

104 
wh©
 = 
EVBUFFER_READ
;

105 
size_t
 
Àn
;

106 
howmuch
 = -1;

109 i‡(
evít
 =
EV_TIMEOUT
) {

110 
wh©
 |
EVBUFFER_TIMEOUT
;

111 
îr‹
;

135 i‡(
bu„v
->
wm_ªad
.
high
 != 0) {

136 
howmuch
 = 
bu„v
->
wm_ªad
.
high
 - 
	`EVBUFFER_LENGTH
(bu„v->
öput
);

138 i‡(
howmuch
 <= 0) {

139 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

140 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

147 
	`evbuf„r_£tcb
(
buf
,

148 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

156 
ªs
 = 
	`evbuf„r_ªad
(
bu„v
->
öput
, 
fd
, 
howmuch
);

157 i‡(
ªs
 == -1) {

158 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

159 
ªscheduÀ
;

161 
wh©
 |
EVBUFFER_ERROR
;

162 } i‡(
ªs
 == 0) {

164 
wh©
 |
EVBUFFER_EOF
;

167 i‡(
ªs
 <= 0)

168 
îr‹
;

174 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

177 
Àn
 = 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
);

182 i‡(
bu„v
->
wm_ªad
.
low
 !0 && 
Àn
 < bufev->wm_read.low)

188 i‡(
bu„v
->
wm_ªad
.
high
 !0 && 
Àn
 >= bufev->wm_read.high) {

189 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

190 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

193 
	`evbuf„r_£tcb
(
buf
, 
buf„ªvít_ªad_¥essuª_cb
, 
bu„v
);

201 i‡(
bu„v
->
ªadcb
 !
NULL
)

202 (*
bu„v
->
ªadcb
)(bu„v, bu„v->
cb¨g
);

205 
ªscheduÀ
:

206 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
);

212 
îr‹
:

213 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

214 
	}
}

221 
	$buf„ªvít_wrôecb
(
fd
, 
evít
, *
¨g
)

223 
buf„ªvít
 *
bu„v
 = 
¨g
;

224 
ªs
 = 0;

225 
wh©
 = 
EVBUFFER_WRITE
;

227 i‡(
evít
 =
EV_TIMEOUT
) {

228 
wh©
 |
EVBUFFER_TIMEOUT
;

229 
îr‹
;

232 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
)) {

233 
ªs
 = 
	`evbuf„r_wrôe
(
bu„v
->
ouçut
, 
fd
);

234 i‡(
ªs
 == -1) {

235 #i‚de‡
WIN32


238 i‡(
î∫o
 =
EAGAIN
 ||

239 
î∫o
 =
EINTR
 ||

240 
î∫o
 =
EINPROGRESS
)

241 
ªscheduÀ
;

243 
wh©
 |
EVBUFFER_ERROR
;

246 
ªscheduÀ
;

249 } i‡(
ªs
 == 0) {

251 
wh©
 |
EVBUFFER_EOF
;

253 i‡(
ªs
 <= 0)

254 
îr‹
;

257 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

258 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

264 i‡(
bu„v
->
wrôecb
 !
NULL
 &&

265 
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
Ë<bu„v->
wm_wrôe
.
low
)

266 (*
bu„v
->
wrôecb
)(bu„v, bu„v->
cb¨g
);

270 
ªscheduÀ
:

271 i‡(
	`EVBUFFER_LENGTH
(
bu„v
->
ouçut
) != 0)

272 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

275 
îr‹
:

276 (*
bu„v
->
îr‹cb
)(bu„v, 
wh©
, bu„v->
cb¨g
);

277 
	}
}

289 
buf„ªvít
 *

290 
	$buf„ªvít_√w
(
fd
, 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
,

291 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

293 
buf„ªvít
 *
bu„v
;

296 i‡((
bu„v
 = 
	`ˇŒoc
(1, (
buf„ªvít
))Ë=
NULL
)

297  (
NULL
);

300 i‡((
bu„v
->
öput
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

301 
	`‰ì
(
bu„v
);

302  (
NULL
);

306 i‡((
bu„v
->
ouçut
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

307 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

308 
	`‰ì
(
bu„v
);

309  (
NULL
);

328 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

329 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

332 
	`buf„ªvít_£tcb
(
bu„v
, 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
cb¨g
);

346 
bu„v
->
íabÀd
 = 
EV_WRITE
;

348  (
bu„v
);

349 
	}
}

360 
	$buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

361 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
)

363 
bu„v
->
ªadcb
 =Ñeadcb;

364 
bu„v
->
wrôecb
 = writecb;

365 
bu„v
->
îr‹cb
 =Érrorcb;

367 
bu„v
->
cb¨g
 = cbarg;

368 
	}
}

371 
	$buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
)

373 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

374 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

376 
	`evít_£t
(&
bu„v
->
ev_ªad
, 
fd
, 
EV_READ
, 
buf„ªvít_ªadcb
, bufev);

377 
	`evít_£t
(&
bu„v
->
ev_wrôe
, 
fd
, 
EV_WRITE
, 
buf„ªvít_wrôecb
, bufev);

378 i‡(
bu„v
->
ev_ba£
 !
NULL
) {

379 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_ªad
);

380 
	`evít_ba£_£t
(
bu„v
->
ev_ba£
, &bu„v->
ev_wrôe
);

384 
	}
}

392 
	$buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i‹ôy
)

394 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_ªad
, 
¥i‹ôy
) == -1)

396 i‡(
	`evít_¥i‹ôy_£t
(&
bu„v
->
ev_wrôe
, 
¥i‹ôy
) == -1)

400 
	}
}

407 
	$buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
)

409 
	`evít_dñ
(&
bu„v
->
ev_ªad
);

410 
	`evít_dñ
(&
bu„v
->
ev_wrôe
);

412 
	`evbuf„r_‰ì
(
bu„v
->
öput
);

413 
	`evbuf„r_‰ì
(
bu„v
->
ouçut
);

415 
	`‰ì
(
bu„v
);

416 
	}
}

433 
	$buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
, c⁄° *
d©a
, 
size_t
 
size
)

435 
ªs
;

438 
ªs
 = 
	`evbuf„r_add
(
bu„v
->
ouçut
, 
d©a
, 
size
);

440 i‡(
ªs
 == -1)

441  (
ªs
);

448 i‡(
size
 > 0 && (
bu„v
->
íabÀd
 & 
EV_WRITE
))

449 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
);

451  (
ªs
);

452 
	}
}

455 
	$buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
)

457 
ªs
;

459 
ªs
 = 
	`buf„ªvít_wrôe
(
bu„v
, 
buf
->
buf„r
, buf->
off
);

460 i‡(
ªs
 != -1)

461 
	`evbuf„r_døö
(
buf
, buf->
off
);

463  (
ªs
);

464 
	}
}

466 
size_t


467 
	$buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, 
size_t
 
size
)

469 
evbuf„r
 *
buf
 = 
bu„v
->
öput
;

471 i‡(
buf
->
off
 < 
size
)

472 
size
 = 
buf
->
off
;

475 
	`mem˝y
(
d©a
, 
buf
->
buf„r
, 
size
);

477 i‡(
size
)

478 
	`evbuf„r_døö
(
buf
, 
size
);

480  (
size
);

481 
	}
}

484 
	$buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

486 i‡(
evít
 & 
EV_READ
) {

487 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, bu„v->
timeout_ªad
) == -1)

490 i‡(
evít
 & 
EV_WRITE
) {

491 i‡(
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, bu„v->
timeout_wrôe
) == -1)

495 
bu„v
->
íabÀd
 |
evít
;

497 
	}
}

500 
	$buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
)

502 i‡(
evít
 & 
EV_READ
) {

503 i‡(
	`evít_dñ
(&
bu„v
->
ev_ªad
) == -1)

506 i‡(
evít
 & 
EV_WRITE
) {

507 i‡(
	`evít_dñ
(&
bu„v
->
ev_wrôe
) == -1)

511 
bu„v
->
íabÀd
 &~
evít
;

513 
	}
}

520 
	$buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

521 
timeout_ªad
, 
timeout_wrôe
) {

522 
bu„v
->
timeout_ªad
 =Åimeout_read;

523 
bu„v
->
timeout_wrôe
 =Åimeout_write;

525 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_ªad
, 
EV_READ
, 
NULL
))

526 
	`buf„ªvít_add
(&
bu„v
->
ev_ªad
, 
timeout_ªad
);

527 i‡(
	`evít_≥ndög
(&
bu„v
->
ev_wrôe
, 
EV_WRITE
, 
NULL
))

528 
	`buf„ªvít_add
(&
bu„v
->
ev_wrôe
, 
timeout_wrôe
);

529 
	}
}

536 
	$buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

537 
size_t
 
lowm¨k
, size_à
highm¨k
)

539 i‡(
evíts
 & 
EV_READ
) {

540 
bu„v
->
wm_ªad
.
low
 = 
lowm¨k
;

541 
bu„v
->
wm_ªad
.
high
 = 
highm¨k
;

544 i‡(
evíts
 & 
EV_WRITE
) {

545 
bu„v
->
wm_wrôe
.
low
 = 
lowm¨k
;

546 
bu„v
->
wm_wrôe
.
high
 = 
highm¨k
;

550 
	`buf„ªvít_ªad_¥essuª_cb
(
bu„v
->
öput
,

551 0, 
	`EVBUFFER_LENGTH
(
bu„v
->
öput
), bufev);

552 
	}
}

555 
	$buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
)

557 
ªs
;

559 
bu„v
->
ev_ba£
 = 
ba£
;

561 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_ªad
);

562 i‡(
ªs
 == -1)

563  (
ªs
);

565 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
bu„v
->
ev_wrôe
);

566  (
ªs
);

567 
	}
}

	@evdns.c

37 
	~<sys/ty≥s.h
>

38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

42 #ifde‡
DNS_USE_FTIME_FOR_ID


43 
	~<sys/timeb.h
>

46 #i‚de‡
DNS_USE_CPU_CLOCK_FOR_ID


47 #i‚de‡
DNS_USE_GETTIMEOFDAY_FOR_ID


48 #i‚de‡
DNS_USE_OPENSSL_FOR_ID


49 #i‚de‡
DNS_USE_FTIME_FOR_ID


50 #îr‹ 
Mu°
 
c⁄figuª
 
©
 
Àa°
 
⁄e
 
id
 
gíî©i⁄
 
mëhod
.

51 #îr‹ 
PÀa£
 
£e
 
the
 
documíèti⁄
.

58 
	#_GNU_SOURCE


	)

60 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


61 #ifde‡
DNS_USE_OPENSSL_FOR_ID


62 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


64 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


65 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


67 
	~<time.h
>

70 #ifde‡
DNS_USE_OPENSSL_FOR_ID


71 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


72 #îr‹ 
Mu…ùÀ
 
id
 
›ti⁄s
 
£À˘ed


74 
	~<›ís¶/ønd.h
>

77 #i‚de‡
_FORTIFY_SOURCE


78 
	#_FORTIFY_SOURCE
 3

	)

81 
	~<°rög.h
>

82 
	~<f˙é.h
>

83 #ifde‡
HAVE_SYS_TIME_H


84 
	~<sys/time.h
>

86 #ifde‡
HAVE_STDINT_H


87 
	~<°döt.h
>

89 
	~<°dlib.h
>

90 
	~<°rög.h
>

91 
	~<î∫o.h
>

92 
	~<as£π.h
>

93 #ifde‡
HAVE_UNISTD_H


94 
	~<uni°d.h
>

96 
	~<limôs.h
>

97 
	~<sys/°©.h
>

98 
	~<˘y≥.h
>

99 
	~<°dio.h
>

100 
	~<°d¨g.h
>

102 
	~"evdns.h
"

103 
	~"evutû.h
"

104 
	~"log.h
"

105 #ifde‡
WIN32


106 
	~<wösock2.h
>

107 
	~<wödows.h
>

108 
	~<ùhÕ≠i.h
>

109 
	~<io.h
>

111 
	~<sys/sockë.h
>

112 
	~<√töë/ö.h
>

113 
	~<¨∑/öë.h
>

116 #ifde‡
HAVE_NETINET_IN6_H


117 
	~<√töë/ö6.h
>

120 
	#EVDNS_LOG_DEBUG
 0

	)

121 
	#EVDNS_LOG_WARN
 1

	)

123 #i‚de‡
HOST_NAME_MAX


124 
	#HOST_NAME_MAX
 255

	)

127 
	~<°dio.h
>

129 #unde‡
MIN


130 
	#MIN
(
a
,
b
Ë(◊)<(b)?◊):(b))

	)

132 #ifde‡
__USE_ISOC99B


134 
ev_uöt8_t
 
	tu_ch¨
;

135 
	tuöt
;

137 
	~<evít.h
>

139 
	#u64
 
ev_uöt64_t


	)

140 
	#u32
 
ev_uöt32_t


	)

141 
	#u16
 
ev_uöt16_t


	)

142 
	#u8
 
ev_uöt8_t


	)

144 #ifde‡
WIN32


145 
	#›í
 
_›í


	)

146 
	#ªad
 
_ªad


	)

147 
	#˛o£
 
_˛o£


	)

148 
	#°rdup
 
_°rdup


	)

151 
	#MAX_ADDRS
 32

	)

154 
	#TYPE_A
 
EVDNS_TYPE_A


	)

155 
	#TYPE_CNAME
 5

	)

156 
	#TYPE_PTR
 
EVDNS_TYPE_PTR


	)

157 
	#TYPE_AAAA
 
EVDNS_TYPE_AAAA


	)

159 
	#CLASS_INET
 
EVDNS_CLASS_INET


	)

161 
	sªque°
 {

162 
u8
 *
	mªque°
;

163 
	mªque°_Àn
;

164 
	mªissue_cou¡
;

165 
	mtx_cou¡
;

166 
	mªque°_ty≥
;

167 *
	mu£r_poöãr
;

168 
evdns_ˇŒback_ty≥
 
	mu£r_ˇŒback
;

169 
«me£rvî
 *
	mns
;

172 
	m£¨ch_ödex
;

173 
£¨ch_°©e
 *
	m£¨ch_°©e
;

174 *
	m£¨ch_‹ig«me
;

175 
	m£¨ch_Êags
;

178 
ªque°
 *
	m√xt
, *
	m¥ev
;

180 
evít
 
	mtimeout_evít
;

182 
u16
 
	må™s_id
;

183 
	mªque°_≠≥nded
;

184 
	må™smô_me
;

187 #i‚de‡
HAVE_STRUCT_IN6_ADDR


188 
	sö6_addr
 {

189 
u8
 
	ms6_addr
[16];

193 
	sª∂y
 {

194 
	mty≥
;

195 
	mhave_™swî
;

198 
u32
 
	maddrcou¡
;

199 
u32
 
	maddªs£s
[
MAX_ADDRS
];

200 } 
	ma
;

202 
u32
 
	maddrcou¡
;

203 
ö6_addr
 
	maddªs£s
[
MAX_ADDRS
];

204 } 
	mØØ
;

206 
	m«me
[
HOST_NAME_MAX
];

207 } 
	m±r
;

208 } 
	md©a
;

211 
	s«me£rvî
 {

212 
	msockë
;

213 
u32
 
	maddªss
;

214 
u16
 
	mp‹t
;

215 
	mÁûed_times
;

216 
	mtimedout
;

217 
evít
 
	mevít
;

219 
«me£rvî
 *
	m√xt
, *
	m¥ev
;

220 
evít
 
	mtimeout_evít
;

223 
	m°©e
;

224 
	mchoked
;

225 
	mwrôe_waôög
;

228 
ªque°
 *
	gªq_hód
 = 
NULL
, *
	gªq_waôög_hód
 = NULL;

229 
«me£rvî
 *
	g£rvî_hód
 = 
NULL
;

233 
	sevdns_£rvî_p‹t
 {

234 
	msockë
;

235 
	mªf˙t
;

236 
	mchoked
;

237 
	m˛osög
;

238 
evdns_ªque°_ˇŒback_‚_ty≥
 
	mu£r_ˇŒback
;

239 *
	mu£r_d©a
;

240 
evít
 
	mevít
;

242 
£rvî_ªque°
 *
	m≥ndög_ª∂õs
;

246 
	s£rvî_ª∂y_ôem
 {

247 
£rvî_ª∂y_ôem
 *
	m√xt
;

248 *
	m«me
;

249 
u16
 
	mty≥
 : 16;

250 
u16
 
	m˛ass
 : 16;

251 
u32
 
	mâl
;

252 
	mis_«me
;

253 
u16
 
	md©Æí
;

254 *
	md©a
;

259 
	s£rvî_ªque°
 {

263 
£rvî_ªque°
 *
	m√xt_≥ndög
;

264 
£rvî_ªque°
 *
	m¥ev_≥ndög
;

266 
u16
 
	må™s_id
;

267 
evdns_£rvî_p‹t
 *
	mp‹t
;

268 
sockaddr_°‹age
 
	maddr
;

269 
sockÀn_t
 
	maddæí
;

271 
	mn_™swî
;

272 
	mn_auth‹ôy
;

273 
	mn_addôi⁄Æ
;

275 
£rvî_ª∂y_ôem
 *
	m™swî
;

276 
£rvî_ª∂y_ôem
 *
	mauth‹ôy
;

277 
£rvî_ª∂y_ôem
 *
	maddôi⁄Æ
;

281 *
	mª•⁄£
;

282 
size_t
 
	mª•⁄£_Àn
;

285 
evdns_£rvî_ªque°
 
	mba£
;

289 
	#OFFSET_OF
(
°
, 
membî
Ë((
off_t
Ë(((*)&((°*)0)->membî)-(*)0))

	)

293 
	#TO_SERVER_REQUEST
(
ba£_±r
) \

294 ((
£rvî_ªque°
*) \

295 (((*)(
ba£_±r
Ë- 
	`OFFSET_OF
(
£rvî_ªque°
, 
ba£
))))

	)

298 
	gglobÆ_good_«me£rvîs
 = 0;

302 
	gglobÆ_ªque°s_öÊight
 = 0;

305 
	gglobÆ_ªque°s_waôög
 = 0;

307 
	gglobÆ_max_ªque°s_öÊight
 = 64;

309 
timevÆ
 
	gglobÆ_timeout
 = {5, 0};

310 
	gglobÆ_max_ªissues
 = 1;

311 
	gglobÆ_max_ªå™smôs
 = 3;

313 
	gglobÆ_max_«me£rvî_timeout
 = 3;

317 c⁄° 
timevÆ
 
	gglobÆ_«me£rvî_timeouts
[] = {{10, 0}, {60, 0}, {300, 0}, {900, 0}, {3600, 0}};

318 c⁄° 
	gglobÆ_«me£rvî_timeouts_Àngth
 = (
globÆ_«me£rvî_timeouts
)/(
timevÆ
);

320 
«me£rvî
 *
«me£rvî_pick
();

321 
evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
);

322 
«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

323 
evdns_å™smô
();

324 
evdns_ªque°_å™smô
(
ªque°
 *
ªq
);

325 
«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
);

326 
£¨ch_ªque°_föished
(
ªque°
 *const);

327 
£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
);

328 
£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
);

329 
evdns_ªque°s_pump_waôög_queue
();

330 
u16
 
å™ß˘i⁄_id_pick
();

331 
ªque°
 *
ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

332 
ªque°_submô
(
ªque°
 *c⁄° 
ªq
);

334 
£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
);

335 
£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
);

336 
£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
);

337 
£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
);

339 
°πoöt
(c⁄° *c⁄° 
°r
);

341 #ifde‡
WIN32


343 
	$œ°_îr‹
(
sock
)

345 
›tvÆ
, 
›tvÆÀn
=(optval);

346 
îr
 = 
	`WSAGëLa°Eº‹
();

347 i‡(
îr
 =
WSAEWOULDBLOCK
 && 
sock
 >= 0) {

348 i‡(
	`gësock›t
(
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
›tvÆ
,

349 &
›tvÆÀn
))

350  
îr
;

351 i‡(
›tvÆ
)

352  
›tvÆ
;

354  
îr
;

356 
	}
}

358 
	$îr‹_is_ógaö
(
îr
)

360  
îr
 =
EAGAIN
 ||Éº =
WSAEWOULDBLOCK
;

361 
	}
}

363 
	$öë_©⁄
(c⁄° *
c
, 
ö_addr
 *
addr
)

365 
ev_uöt32_t
 
r
;

366 i‡(
	`°rcmp
(
c
, "255.255.255.255") == 0) {

367 
addr
->
s_addr
 = 0xffffffffu;

369 
r
 = 
	`öë_addr
(
c
);

370 i‡(
r
 =
INADDR_NONE
)

372 
addr
->
s_addr
 = 
r
;

375 
	}
}

377 
	#œ°_îr‹
(
sock
Ë(
î∫o
)

	)

378 
	#îr‹_is_ógaö
(
îr
Ë(”ºË=
EAGAIN
)

	)

380 
	#CLOSE_SOCKET
(
s
Ë
	`EVUTIL_CLOSESOCKET
(s)

	)

382 
	#ISSPACE
(
c
Ë
	`is•a˚
(()()(c))

	)

383 
	#ISDIGIT
(
c
Ë
	`isdigô
(()()(c))

	)

386 
	$debug_¡ﬂ
(
u32
 
addªss
)

388 
buf
[32];

389 
u32
 
a
 = 
	`¡ohl
(
addªss
);

390 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d",

391 ()(
u8
)((
a
>>24)&0xff),

392 ()(
u8
)((
a
>>16)&0xff),

393 ()(
u8
)((
a
>>8 )&0xff),

394 ()(
u8
)((
a
 )&0xff));

395  
buf
;

396 
	}
}

398 
evdns_debug_log_‚_ty≥
 
	gevdns_log_‚
 = 
NULL
;

401 
	$evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
)

403 
evdns_log_‚
 = 
‚
;

404 
	}
}

406 #ifde‡
__GNUC__


407 
	#EVDNS_LOG_CHECK
 
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)))

	)

409 
	#EVDNS_LOG_CHECK


	)

412 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...Ë
EVDNS_LOG_CHECK
;

414 
	$_evdns_log
(
w¨n
, c⁄° *
fmt
, ...)

416 
va_li°
 
¨gs
;

417 
buf
[512];

418 i‡(!
evdns_log_‚
)

420 
	`va_°¨t
(
¨gs
,
fmt
);

421 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

422 
buf
[(buf)-1] = '\0';

423 
	`evdns_log_‚
(
w¨n
, 
buf
);

424 
	`va_íd
(
¨gs
);

425 
	}
}

427 
	#log
 
_evdns_log


	)

432 
ªque°
 *

433 
	$ªque°_föd_‰om_å™s_id
(
u16
 
å™s_id
) {

434 
ªque°
 *
ªq
 = 
ªq_hód
, *c⁄° 
°¨ãd_©
 =Ñeq_head;

436 i‡(
ªq
) {

438 i‡(
ªq
->
å™s_id
 ==Årans_id) Ñeq;

439 
ªq
 =Ñeq->
√xt
;

440 } 
ªq
 !
°¨ãd_©
);

443  
NULL
;

444 
	}
}

449 
	$«me£rvî_¥od_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

450 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

451 ()
fd
;

452 ()
evíts
;

454 
	`«me£rvî_£nd_¥obe
(
ns
);

455 
	}
}

461 
	$«me£rvî_¥obe_Áûed
(
«me£rvî
 *c⁄° 
ns
) {

462 c⁄° 
timevÆ
 * 
timeout
;

463 (Ë
	`evtimî_dñ
(&
ns
->
timeout_evít
);

464 i‡(
ns
->
°©e
 == 1) {

470 
timeout
 =

471 &
globÆ_«me£rvî_timeouts
[
	`MIN
(
ns
->
Áûed_times
,

472 
globÆ_«me£rvî_timeouts_Àngth
 - 1)];

473 
ns
->
Áûed_times
++;

475 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë
timeout
) < 0) {

476 
	`log
(
EVDNS_LOG_WARN
,

478 
	`debug_¡ﬂ
(
ns
->
addªss
));

481 
	}
}

486 
	$«me£rvî_Áûed
(
«me£rvî
 *c⁄° 
ns
, c⁄° *
msg
) {

487 
ªque°
 *
ªq
, *
°¨ãd_©
;

490 i‡(!
ns
->
°©e
) ;

492 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s has failed: %s",

493 
	`debug_¡ﬂ
(
ns
->
addªss
), 
msg
);

494 
globÆ_good_«me£rvîs
--;

495 
	`as£π
(
globÆ_good_«me£rvîs
 >= 0);

496 i‡(
globÆ_good_«me£rvîs
 == 0) {

497 
	`log
(
EVDNS_LOG_WARN
, "AllÇameservers have failed");

500 
ns
->
°©e
 = 0;

501 
ns
->
Áûed_times
 = 1;

503 i‡(
	`evtimî_add
(&
ns
->
timeout_evít
, (
timevÆ
 *Ë&
globÆ_«me£rvî_timeouts
[0]) < 0) {

504 
	`log
(
EVDNS_LOG_WARN
,

506 
	`debug_¡ﬂ
(
ns
->
addªss
));

516 i‡(!
globÆ_good_«me£rvîs
) ;

518 
ªq
 = 
ªq_hód
;

519 
°¨ãd_©
 = 
ªq_hód
;

520 i‡(
ªq
) {

522 i‡(
ªq
->
tx_cou¡
 =0 &&Ñeq->
ns
 ==Çs) {

525 
ªq
->
ns
 = 
	`«me£rvî_pick
();

527 
ªq
 =Ñeq->
√xt
;

528 } 
ªq
 !
°¨ãd_©
);

530 
	}
}

533 
	$«me£rvî_up
(
«me£rvî
 *c⁄° 
ns
) {

534 i‡(
ns
->
°©e
) ;

535 
	`log
(
EVDNS_LOG_WARN
, "Nameserver %s is back up",

536 
	`debug_¡ﬂ
(
ns
->
addªss
));

537 
	`evtimî_dñ
(&
ns
->
timeout_evít
);

538 
ns
->
°©e
 = 1;

539 
ns
->
Áûed_times
 = 0;

540 
ns
->
timedout
 = 0;

541 
globÆ_good_«me£rvîs
++;

542 
	}
}

545 
	$ªque°_å™s_id_£t
(
ªque°
 *c⁄° 
ªq
, c⁄° 
u16
 
å™s_id
) {

546 
ªq
->
å™s_id
 =Årans_id;

547 *((
u16
 *Ë
ªq
->
ªque°
Ë
	`ht⁄s
(
å™s_id
);

548 
	}
}

554 
	$ªque°_föished
(
ªque°
 *c⁄° 
ªq
, ªque° **
hód
) {

555 i‡(
hód
) {

556 i‡(
ªq
->
√xt
 ==Ñeq) {

558 *
hód
 = 
NULL
;

560 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

561 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

562 i‡(*
hód
 =
ªq
Ë*hód =Ñeq->
√xt
;

566 
	`log
(
EVDNS_LOG_DEBUG
, "RemovingÅimeout forÑequest %lx",

567 (Ë
ªq
);

568 
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

570 
	`£¨ch_ªque°_föished
(
ªq
);

571 
globÆ_ªque°s_öÊight
--;

573 i‡(!
ªq
->
ªque°_≠≥nded
) {

575 
	`‰ì
(
ªq
->
ªque°
);

581 
	`‰ì
(
ªq
);

583 
	`evdns_ªque°s_pump_waôög_queue
();

584 
	}
}

593 
	$ªque°_ªissue
(
ªque°
 *
ªq
) {

594 c⁄° 
«me£rvî
 *c⁄° 
œ°_ns
 = 
ªq
->
ns
;

598 
ªq
->
ns
 = 
	`«me£rvî_pick
();

599 i‡(
ªq
->
ns
 =
œ°_ns
) {

606 
ªq
->
ªissue_cou¡
++;

607 
ªq
->
tx_cou¡
 = 0;

608 
ªq
->
å™smô_me
 = 1;

611 
	}
}

616 
	$evdns_ªque°s_pump_waôög_queue
() {

617 
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
 &&

618 
globÆ_ªque°s_waôög
) {

619 
ªque°
 *
ªq
;

621 
	`as£π
(
ªq_waôög_hód
);

622 i‡(
ªq_waôög_hód
->
√xt
 ==Ñeq_waiting_head) {

624 
ªq
 = 
ªq_waôög_hód
;

625 
ªq_waôög_hód
 = 
NULL
;

627 
ªq
 = 
ªq_waôög_hód
;

628 
ªq
->
√xt
->
¥ev
 =Ñeq->prev;

629 
ªq
->
¥ev
->
√xt
 =Ñeq->next;

630 
ªq_waôög_hód
 = 
ªq
->
√xt
;

633 
globÆ_ªque°s_waôög
--;

634 
globÆ_ªque°s_öÊight
++;

636 
ªq
->
ns
 = 
	`«me£rvî_pick
();

637 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

639 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

640 
	`evdns_ªque°_å™smô
(
ªq
);

641 
	`evdns_å™smô
();

643 
	}
}

646 
	$ª∂y_ˇŒback
(
ªque°
 *c⁄° 
ªq
, 
u32
 
âl
, u32 
îr
, 
ª∂y
 *reply) {

647 
ªq
->
ªque°_ty≥
) {

648 
TYPE_A
:

649 i‡(
ª∂y
)

650 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv4_A
,

651 
ª∂y
->
d©a
.
a
.
addrcou¡
, 
âl
,

652 
ª∂y
->
d©a
.
a
.
addªs£s
,

653 
ªq
->
u£r_poöãr
);

655 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

657 
TYPE_PTR
:

658 i‡(
ª∂y
) {

659 *
«me
 = 
ª∂y
->
d©a
.
±r
.name;

660 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_PTR
, 1, 
âl
,

661 &
«me
, 
ªq
->
u£r_poöãr
);

663 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,

664 
ªq
->
u£r_poöãr
);

667 
TYPE_AAAA
:

668 i‡(
ª∂y
)

669 
ªq
->
	`u£r_ˇŒback
(
DNS_ERR_NONE
, 
DNS_IPv6_AAAA
,

670 
ª∂y
->
d©a
.
ØØ
.
addrcou¡
, 
âl
,

671 
ª∂y
->
d©a
.
ØØ
.
addªs£s
,

672 
ªq
->
u£r_poöãr
);

674 
ªq
->
	`u£r_ˇŒback
(
îr
, 0, 0, 0, 
NULL
,Ñeq->
u£r_poöãr
);

677 
	`as£π
(0);

678 
	}
}

682 
	$ª∂y_h™dÀ
(
ªque°
 *c⁄° 
ªq
, 
u16
 
Êags
, 
u32
 
âl
, 
ª∂y
 *reply) {

683 
îr‹
;

684 c⁄° 
îr‹_codes
[] = {

685 
DNS_ERR_FORMAT
, 
DNS_ERR_SERVERFAILED
, 
DNS_ERR_NOTEXIST
,

686 
DNS_ERR_NOTIMPL
, 
DNS_ERR_REFUSED


689 i‡(
Êags
 & 0x020‡|| !
ª∂y
 || !ª∂y->
have_™swî
) {

691 i‡(
Êags
 & 0x0200) {

692 
îr‹
 = 
DNS_ERR_TRUNCATED
;

694 
u16
 
îr‹_code
 = (
Êags
 & 0x000f) - 1;

695 i‡(
îr‹_code
 > 4) {

696 
îr‹
 = 
DNS_ERR_UNKNOWN
;

698 
îr‹
 = 
îr‹_codes
[
îr‹_code
];

702 
îr‹
) {

703 
DNS_ERR_NOTIMPL
:

704 
DNS_ERR_REFUSED
:

706 i‡(
ªq
->
ªissue_cou¡
 < 
globÆ_max_ªissues
) {

707 
msg
[64];

708 
	`evutû_¢¥ötf
(
msg
, (msg),

710 
îr‹
, 
	`evdns_îr_to_°rög
(error));

711 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
msg
);

712 i‡(!
	`ªque°_ªissue
(
ªq
)) ;

715 
DNS_ERR_SERVERFAILED
:

721 
	`log
(
EVDNS_LOG_DEBUG
, "Gotá SERVERFAILED fromÇameserver %s; "

723 
	`debug_¡ﬂ
(
ªq
->
ns
->
addªss
));

727 
	`«me£rvî_up
(
ªq
->
ns
);

730 i‡(
ªq
->
£¨ch_°©e
 &&Ñeq->
ªque°_ty≥
 !
TYPE_PTR
) {

733 i‡(!
	`£¨ch_åy_√xt
(
ªq
)) {

739 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

745 
	`ª∂y_ˇŒback
(
ªq
, 0, 
îr‹
, 
NULL
);

746 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

749 
	`ª∂y_ˇŒback
(
ªq
, 
âl
, 0, 
ª∂y
);

750 
	`«me£rvî_up
(
ªq
->
ns
);

751 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

753 
	}
}

756 
	$«me_∑r£
(
u8
 *
∑ckë
, 
Àngth
, *
idx
, *
«me_out
, 
«me_out_Àn
) {

757 
«me_íd
 = -1;

758 
j
 = *
idx
;

759 
±r_cou¡
 = 0;

760 
	#GET32
(
x
Ëdÿ{ i‡(
j
 + 4 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t32
, 
∑ckë
 + j, 4); j +4; x = 
	`¡ohl
(_t32); } 0)

	)

761 
	#GET16
(
x
Ëdÿ{ i‡(
j
 + 2 > 
Àngth
Ë
îr
; 
	`mem˝y
(&
_t
, 
∑ckë
 + j, 2); j +2; x = 
	`¡ohs
(_t); } 0)

	)

762 
	#GET8
(
x
Ëdÿ{ i‡(
j
 >
Àngth
Ë
îr
; x = 
∑ckë
[j++]; } 0)

	)

764 *
˝
 = 
«me_out
;

765 c⁄° *c⁄° 
íd
 = 
«me_out
 + 
«me_out_Àn
;

774 
u8
 
œbñ_Àn
;

775 i‡(
j
 >
Àngth
)  -1;

776 
	`GET8
(
œbñ_Àn
);

777 i‡(!
œbñ_Àn
) ;

778 i‡(
œbñ_Àn
 & 0xc0) {

779 
u8
 
±r_low
;

780 
	`GET8
(
±r_low
);

781 i‡(
«me_íd
 < 0Ë«me_íd = 
j
;

782 
j
 = ((()
œbñ_Àn
 & 0x3fË<< 8Ë+ 
±r_low
;

784 i‡(
j
 < 0 || j >
Àngth
)  -1;

787 i‡(++
±r_cou¡
 > 
Àngth
)  -1;

790 i‡(
œbñ_Àn
 > 63)  -1;

791 i‡(
˝
 !
«me_out
) {

792 i‡(
˝
 + 1 >
íd
)  -1;

793 *
˝
++ = '.';

795 i‡(
˝
 + 
œbñ_Àn
 >
íd
)  -1;

796 
	`mem˝y
(
˝
, 
∑ckë
 + 
j
, 
œbñ_Àn
);

797 
˝
 +
œbñ_Àn
;

798 
j
 +
œbñ_Àn
;

800 i‡(
˝
 >
íd
)  -1;

801 *
˝
 = '\0';

802 i‡(
«me_íd
 < 0)

803 *
idx
 = 
j
;

805 *
idx
 = 
«me_íd
;

807 
îr
:

809 
	}
}

813 
	$ª∂y_∑r£
(
u8
 *
∑ckë
, 
Àngth
) {

814 
j
 = 0, 
k
 = 0;

815 
u16
 
_t
;

816 
u32
 
_t32
;

817 
tmp_«me
[256], 
cmp_«me
[256];

819 
u16
 
å™s_id
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
, 
d©Æígth
;

820 
u16
 
Êags
 = 0;

821 
u32
 
âl
, 
âl_r
 = 0xffffffff;

822 
ª∂y
Ñeply;

823 
ªque°
 *
ªq
 = 
NULL
;

824 
i
;

826 
	`GET16
(
å™s_id
);

827 
	`GET16
(
Êags
);

828 
	`GET16
(
que°i⁄s
);

829 
	`GET16
(
™swîs
);

830 
	`GET16
(
auth‹ôy
);

831 
	`GET16
(
addôi⁄Æ
);

832 (Ë
auth‹ôy
;

833 (Ë
addôi⁄Æ
;

835 
ªq
 = 
	`ªque°_föd_‰om_å™s_id
(
å™s_id
);

836 i‡(!
ªq
)  -1;

838 
	`mem£t
(&
ª∂y
, 0, (reply));

841 i‡(!(
Êags
 & 0x8000))  -1;

842 i‡(
Êags
 & 0x020f) {

844 
îr
;

849 
	#SKIP_NAME
 \

850 dÿ{ 
tmp_«me
[0] = '\0'; \

851 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

852 
îr
; \

853 } 0)

	)

854 
	#TEST_NAME
 \

855 dÿ{ 
tmp_«me
[0] = '\0'; \

856 
cmp_«me
[0] = '\0'; \

857 
k
 = 
j
; \

858 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)\

859 
îr
; \

860 i‡(
	`«me_∑r£
(
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, &
k
, 
cmp_«me
, (cmp_name))<0) \

861 
îr
; \

862 i‡(
	`memcmp
(
tmp_«me
, 
cmp_«me
, 
	`°æí
 (tmp_name)) != 0) \

864 } 0)

	)

866 
ª∂y
.
ty≥
 = 
ªq
->
ªque°_ty≥
;

869 
i
 = 0; i < 
que°i⁄s
; ++i) {

873 
TEST_NAME
;

874 
j
 += 4;

875 i‡(
j
 > 
Àngth
Ë
îr
;

882 
i
 = 0; i < 
™swîs
; ++i) {

883 
u16
 
ty≥
, 
˛ass
;

885 
SKIP_NAME
;

886 
	`GET16
(
ty≥
);

887 
	`GET16
(
˛ass
);

888 
	`GET32
(
âl
);

889 
	`GET16
(
d©Æígth
);

891 i‡(
ty≥
 =
TYPE_A
 && 
˛ass
 =
CLASS_INET
) {

892 
addrcou¡
, 
addπoc›y
;

893 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_A
) {

894 
j
 +
d©Æígth
; ;

896 i‡((
d©Æígth
 & 3) != 0)

897 
îr
;

898 
addrcou¡
 = 
d©Æígth
 >> 2;

899 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
a
.
addrcou¡
, ()addrcount);

901 
âl_r
 = 
	`MIN
—é_r, 
âl
);

903 i‡(
j
 + 4*
addπoc›y
 > 
Àngth
Ë
îr
;

904 
	`mem˝y
(&
ª∂y
.
d©a
.
a
.
addªs£s
[ª∂y.d©a.a.
addrcou¡
],

905 
∑ckë
 + 
j
, 4*
addπoc›y
);

906 
j
 +4*
addπoc›y
;

907 
ª∂y
.
d©a
.
a
.
addrcou¡
 +
addπoc›y
;

908 
ª∂y
.
have_™swî
 = 1;

909 i‡(
ª∂y
.
d©a
.
a
.
addrcou¡
 =
MAX_ADDRS
) ;

910 } i‡(
ty≥
 =
TYPE_PTR
 && 
˛ass
 =
CLASS_INET
) {

911 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_PTR
) {

912 
j
 +
d©Æígth
; ;

914 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
ª∂y
.
d©a
.
±r
.
«me
,

915 (
ª∂y
.
d©a
.
±r
.
«me
))<0)

916 
îr
;

917 
âl_r
 = 
	`MIN
—é_r, 
âl
);

918 
ª∂y
.
have_™swî
 = 1;

920 } i‡(
ty≥
 =
TYPE_AAAA
 && 
˛ass
 =
CLASS_INET
) {

921 
addrcou¡
, 
addπoc›y
;

922 i‡(
ªq
->
ªque°_ty≥
 !
TYPE_AAAA
) {

923 
j
 +
d©Æígth
; ;

925 i‡((
d©Æígth
 & 15) != 0)

926 
îr
;

927 
addrcou¡
 = 
d©Æígth
 >> 4;

928 
addπoc›y
 = 
	`MIN
(
MAX_ADDRS
 - 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
, ()addrcount);

929 
âl_r
 = 
	`MIN
—é_r, 
âl
);

932 i‡(
j
 + 16*
addπoc›y
 > 
Àngth
Ë
îr
;

933 
	`mem˝y
(&
ª∂y
.
d©a
.
ØØ
.
addªs£s
[ª∂y.d©a.ØØ.
addrcou¡
],

934 
∑ckë
 + 
j
, 16*
addπoc›y
);

935 
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 +
addπoc›y
;

936 
j
 +16*
addπoc›y
;

937 
ª∂y
.
have_™swî
 = 1;

938 i‡(
ª∂y
.
d©a
.
ØØ
.
addrcou¡
 =
MAX_ADDRS
) ;

941 
j
 +
d©Æígth
;

945 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 
âl_r
, &
ª∂y
);

947 
îr
:

948 i‡(
ªq
)

949 
	`ª∂y_h™dÀ
(
ªq
, 
Êags
, 0, 
NULL
);

951 
	}
}

957 
	$ªque°_∑r£
(
u8
 *
∑ckë
, 
Àngth
, 
evdns_£rvî_p‹t
 *
p‹t
, 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
)

959 
j
 = 0;

960 
u16
 
_t
;

961 
tmp_«me
[256];

963 
i
;

964 
u16
 
å™s_id
, 
Êags
, 
que°i⁄s
, 
™swîs
, 
auth‹ôy
, 
addôi⁄Æ
;

965 
£rvî_ªque°
 *
£rvî_ªq
 = 
NULL
;

968 
	`GET16
(
å™s_id
);

969 
	`GET16
(
Êags
);

970 
	`GET16
(
que°i⁄s
);

971 
	`GET16
(
™swîs
);

972 
	`GET16
(
auth‹ôy
);

973 
	`GET16
(
addôi⁄Æ
);

975 i‡(
Êags
 & 0x8000)  -1;

976 
Êags
 &= 0x0110;

978 
£rvî_ªq
 = 
	`mÆloc
((
£rvî_ªque°
));

979 i‡(
£rvî_ªq
 =
NULL
)  -1;

980 
	`mem£t
(
£rvî_ªq
, 0, (
£rvî_ªque°
));

982 
£rvî_ªq
->
å™s_id
 =Årans_id;

983 
	`mem˝y
(&
£rvî_ªq
->
addr
,áddr, 
addæí
);

984 
£rvî_ªq
->
addæí
 =áddrlen;

986 
£rvî_ªq
->
ba£
.
Êags
 = flags;

987 
£rvî_ªq
->
ba£
.
nque°i⁄s
 = 0;

988 
£rvî_ªq
->
ba£
.
que°i⁄s
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
 *) * questions);

989 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
 =
NULL
)

990 
îr
;

992 
i
 = 0; i < 
que°i⁄s
; ++i) {

993 
u16
 
ty≥
, 
˛ass
;

994 
evdns_£rvî_que°i⁄
 *
q
;

995 
«mñí
;

996 i‡(
	`«me_∑r£
(
∑ckë
, 
Àngth
, &
j
, 
tmp_«me
, (tmp_name))<0)

997 
îr
;

998 
	`GET16
(
ty≥
);

999 
	`GET16
(
˛ass
);

1000 
«mñí
 = 
	`°æí
(
tmp_«me
);

1001 
q
 = 
	`mÆloc
((
evdns_£rvî_que°i⁄
Ë+ 
«mñí
);

1002 i‡(!
q
)

1003 
îr
;

1004 
q
->
ty≥
 =Åype;

1005 
q
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1006 
	`mem˝y
(
q
->
«me
, 
tmp_«me
, 
«mñí
+1);

1007 
£rvî_ªq
->
ba£
.
que°i⁄s
[£rvî_ªq->ba£.
nque°i⁄s
++] = 
q
;

1012 
£rvî_ªq
->
p‹t
 =Öort;

1013 
p‹t
->
ªf˙t
++;

1016 i‡(
Êags
 & 0x7800) {

1017 
	`evdns_£rvî_ªque°_ª•⁄d
(&(
£rvî_ªq
->
ba£
), 
DNS_ERR_NOTIMPL
);

1021 
p‹t
->
	`u£r_ˇŒback
(&(
£rvî_ªq
->
ba£
),Ö‹t->
u£r_d©a
);

1024 
îr
:

1025 i‡(
£rvî_ªq
) {

1026 i‡(
£rvî_ªq
->
ba£
.
que°i⁄s
) {

1027 
i
 = 0; i < 
£rvî_ªq
->
ba£
.
nque°i⁄s
; ++i)

1028 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
[
i
]);

1029 
	`‰ì
(
£rvî_ªq
->
ba£
.
que°i⁄s
);

1031 
	`‰ì
(
£rvî_ªq
);

1035 #unde‡
SKIP_NAME


1036 #unde‡
GET32


1037 #unde‡
GET16


1038 #unde‡
GET8


1039 
	}
}

1041 
u16


1042 
	$deÁu…_å™ß˘i⁄_id_‚
()

1044 
u16
 
å™s_id
;

1045 #ifde‡
DNS_USE_CPU_CLOCK_FOR_ID


1046 
time•ec
 
ts
;

1047 
˛kid
 = -1;

1048 i‡(
˛kid
 == -1) {

1049 
˛kid
 = 
CLOCK_REALTIME
;

1050 #ifde‡
CLOCK_MONOTONIC


1051 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) != -1)

1052 
˛kid
 = 
CLOCK_MONOTONIC
;

1055 i‡(
	`˛ock_gëtime
(
˛kid
, &
ts
) == -1)

1056 
	`evít_îr
(1, "clock_gettime");

1057 
å™s_id
 = 
ts
.
tv_n£c
 & 0xffff;

1060 #ifde‡
DNS_USE_FTIME_FOR_ID


1061 
_timeb
 
tb
;

1062 
	`_·ime
(&
tb
);

1063 
å™s_id
 = 
tb
.
mûlôm
 & 0xffff;

1066 #ifde‡
DNS_USE_GETTIMEOFDAY_FOR_ID


1067 
timevÆ
 
tv
;

1068 
	`evutû_gëtimeofday
(&
tv
, 
NULL
);

1069 
å™s_id
 = 
tv
.
tv_u£c
 & 0xffff;

1072 #ifde‡
DNS_USE_OPENSSL_FOR_ID


1073 i‡(
	`RAND_p£udo_byãs
((
u8
 *Ë&
å™s_id
, 2) == -1) {

1081 
	`ab‹t
();

1084  
å™s_id
;

1085 
	}
}

1087 
	$ev_uöt16_t
 (*
å™s_id_fun˘i⁄
)(Ë
deÁu…_å™ß˘i⁄_id_‚
;

1090 
	`evdns_£t_å™ß˘i⁄_id_‚
(
	$ev_uöt16_t
 (*
‚
)())

1092 i‡(
‚
)

1093 
å™s_id_fun˘i⁄
 = 
‚
;

1095 
å™s_id_fun˘i⁄
 = 
deÁu…_å™ß˘i⁄_id_‚
;

1096 
	}
}

1099 
u16


1100 
	$å™ß˘i⁄_id_pick
() {

1102 c⁄° 
ªque°
 *
ªq
 = 
ªq_hód
, *
°¨ãd_©
;

1103 
u16
 
å™s_id
 = 
	`å™s_id_fun˘i⁄
();

1105 i‡(
å™s_id
 == 0xffff) ;

1107 
ªq
 = 
°¨ãd_©
 = 
ªq_hód
;

1108 i‡(
ªq
) {

1110 i‡(
ªq
->
å™s_id
 ==Årans_id) ;

1111 
ªq
 =Ñeq->
√xt
;

1112 } 
ªq
 !
°¨ãd_©
);

1115 i‡(
ªq
 =
°¨ãd_©
Ë 
å™s_id
;

1117 
	}
}

1122 
«me£rvî
 *

1123 
	$«me£rvî_pick
() {

1124 
«me£rvî
 *
°¨ãd_©
 = 
£rvî_hód
, *
picked
;

1125 i‡(!
£rvî_hód
Ë 
NULL
;

1129 i‡(!
globÆ_good_«me£rvîs
) {

1130 
£rvî_hód
 = sîvî_hód->
√xt
;

1131  
£rvî_hód
;

1136 i‡(
£rvî_hód
->
°©e
) {

1138 
picked
 = 
£rvî_hód
;

1139 
£rvî_hód
 = sîvî_hód->
√xt
;

1140  
picked
;

1143 
£rvî_hód
 = sîvî_hód->
√xt
;

1144 i‡(
£rvî_hód
 =
°¨ãd_©
) {

1148 
	`as£π
(
globÆ_good_«me£rvîs
 == 0);

1149 
picked
 = 
£rvî_hód
;

1150 
£rvî_hód
 = sîvî_hód->
√xt
;

1151  
picked
;

1154 
	}
}

1157 
	$addªss_is_c‹ª˘
(
«me£rvî
 *
ns
, 
sockaddr
 *
ß
, 
sockÀn_t
 
¶í
)

1159 
sockaddr_ö
 *
sö
 = (sockaddr_ö*Ë
ß
;

1160 i‡(
ß
->
ß_Ámûy
 !
AF_INET
 || 
¶í
 !(
sockaddr_ö
))

1162 i‡(
sö
->
sö_addr
.
s_addr
 !
ns
->
addªss
)

1165 
	}
}

1169 
	$«me£rvî_ªad
(
«me£rvî
 *
ns
) {

1170 
u8
 
∑ckë
[1500];

1171 
sockaddr_°‹age
 
ss
;

1172 
sockÀn_t
 
addæí
 = (
ss
);

1175 c⁄° 
r
 = 
	`ªcv‰om
(
ns
->
sockë
, 
∑ckë
, (packet), 0,

1176 (
sockaddr
*)&
ss
, &
addæí
);

1177 i‡(
r
 < 0) {

1178 
îr
 = 
	`œ°_îr‹
(
ns
->
sockë
);

1179 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1180 
	`«me£rvî_Áûed
(
ns
, 
	`°ªº‹
(
îr
));

1183 i‡(!
	`addªss_is_c‹ª˘
(
ns
, (
sockaddr
*)&
ss
, 
addæí
)) {

1184 
	`log
(
EVDNS_LOG_WARN
, "Address mismatch onÑeceived "

1188 
ns
->
timedout
 = 0;

1189 
	`ª∂y_∑r£
(
∑ckë
, 
r
);

1191 
	}
}

1196 
	$£rvî_p‹t_ªad
(
evdns_£rvî_p‹t
 *
s
) {

1197 
u8
 
∑ckë
[1500];

1198 
sockaddr_°‹age
 
addr
;

1199 
sockÀn_t
 
addæí
;

1200 
r
;

1203 
addæí
 = (
sockaddr_°‹age
);

1204 
r
 = 
	`ªcv‰om
(
s
->
sockë
, 
∑ckë
, (packet), 0,

1205 (
sockaddr
*Ë&
addr
, &
addæí
);

1206 i‡(
r
 < 0) {

1207 
îr
 = 
	`œ°_îr‹
(
s
->
sockë
);

1208 i‡(
	`îr‹_is_ógaö
(
îr
)) ;

1209 
	`log
(
EVDNS_LOG_WARN
, "Error %s (%d) whileÑeadingÑequest.",

1210 
	`°ªº‹
(
îr
),Érr);

1213 
	`ªque°_∑r£
(
∑ckë
, 
r
, 
s
, (
sockaddr
*Ë&
addr
, 
addæí
);

1215 
	}
}

1219 
	$£rvî_p‹t_Êush
(
evdns_£rvî_p‹t
 *
p‹t
)

1221 
p‹t
->
≥ndög_ª∂õs
) {

1222 
£rvî_ªque°
 *
ªq
 = 
p‹t
->
≥ndög_ª∂õs
;

1223 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1224 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1225 i‡(
r
 < 0) {

1226 
îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1227 i‡(
	`îr‹_is_ógaö
(
îr
))

1229 
	`log
(
EVDNS_LOG_WARN
, "Eº‹ %†(%dËwhûêwrôögÑe•⁄£Åÿp‹t; dr›pög", 
	`°ªº‹
(
îr
),Érr);

1231 i‡(
	`£rvî_ªque°_‰ì
(
ªq
)) {

1238 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1239 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1240 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1241 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1242 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server.");

1245 
	}
}

1251 
	$«me£rvî_wrôe_waôög
(
«me£rvî
 *
ns
, 
waôög
) {

1252 i‡(
ns
->
wrôe_waôög
 =
waôög
) ;

1254 
ns
->
wrôe_waôög
 = 
waôög
;

1255 (Ë
	`evít_dñ
(&
ns
->
evít
);

1256 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | (
waôög
 ? 
EV_WRITE
 : 0Ë| 
EV_PERSIST
,

1257 
«me£rvî_ªady_ˇŒback
, 
ns
);

1258 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

1259 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for %s",

1260 
	`debug_¡ﬂ
(
ns
->
addªss
));

1263 
	}
}

1268 
	$«me£rvî_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1269 
«me£rvî
 *
ns
 = («me£rvî *Ë
¨g
;

1270 ()
fd
;

1272 i‡(
evíts
 & 
EV_WRITE
) {

1273 
ns
->
choked
 = 0;

1274 i‡(!
	`evdns_å™smô
()) {

1275 
	`«me£rvî_wrôe_waôög
(
ns
, 0);

1278 i‡(
evíts
 & 
EV_READ
) {

1279 
	`«me£rvî_ªad
(
ns
);

1281 
	}
}

1286 
	$£rvî_p‹t_ªady_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1287 
evdns_£rvî_p‹t
 *
p‹t
 = (evdns_£rvî_p‹à*Ë
¨g
;

1288 (Ë
fd
;

1290 i‡(
evíts
 & 
EV_WRITE
) {

1291 
p‹t
->
choked
 = 0;

1292 
	`£rvî_p‹t_Êush
(
p‹t
);

1294 i‡(
evíts
 & 
EV_READ
) {

1295 
	`£rvî_p‹t_ªad
(
p‹t
);

1297 
	}
}

1301 
	#MAX_LABELS
 128

	)

1303 
	sdn¶abñ_íåy
 { *
	mv
; 
off_t
 
	mpos
; };

1304 
	sdn¶abñ_èbÀ
 {

1305 
	mn_œbñs
;

1307 
dn¶abñ_íåy
 
	mœbñs
[
MAX_LABELS
];

1312 
	$dn¶abñ_èbÀ_öô
(
dn¶abñ_èbÀ
 *
èbÀ
)

1314 
èbÀ
->
n_œbñs
 = 0;

1315 
	}
}

1319 
	$dn¶abñ_˛ór
(
dn¶abñ_èbÀ
 *
èbÀ
)

1321 
i
;

1322 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i)

1323 
	`‰ì
(
èbÀ
->
œbñs
[
i
].
v
);

1324 
èbÀ
->
n_œbñs
 = 0;

1325 
	}
}

1330 
	$dn¶abñ_èbÀ_gë_pos
(c⁄° 
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
)

1332 
i
;

1333 
i
 = 0; i < 
èbÀ
->
n_œbñs
; ++i) {

1334 i‡(!
	`°rcmp
(
œbñ
, 
èbÀ
->
œbñs
[
i
].
v
))

1335  
èbÀ
->
œbñs
[
i
].
pos
;

1338 
	}
}

1342 
	$dn¶abñ_èbÀ_add
(
dn¶abñ_èbÀ
 *
èbÀ
, c⁄° *
œbñ
, 
off_t
 
pos
)

1344 *
v
;

1345 
p
;

1346 i‡(
èbÀ
->
n_œbñs
 =
MAX_LABELS
)

1348 
v
 = 
	`°rdup
(
œbñ
);

1349 i‡(
v
 =
NULL
)

1351 
p
 = 
èbÀ
->
n_œbñs
++;

1352 
èbÀ
->
œbñs
[
p
].
v
 = v;

1353 
èbÀ
->
œbñs
[
p
].
pos
 =Öos;

1356 
	}
}

1369 
off_t


1370 
	$dn¢ame_to_œbñs
(
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
, 
off_t
 
j
,

1371 c⁄° *
«me
, c⁄° 
«me_Àn
,

1372 
dn¶abñ_èbÀ
 *
èbÀ
) {

1373 c⁄° *
íd
 = 
«me
 + 
«me_Àn
;

1374 
ªf
 = 0;

1375 
u16
 
_t
;

1377 
	#APPEND16
(
x
) do { \

1378 i‡(
j
 + 2 > (
off_t
)
buf_Àn
) \

1379 
ovîÊow
; \

1380 
_t
 = 
	`ht⁄s
(
x
); \

1381 
	`mem˝y
(
buf
 + 
j
, &
_t
, 2); \

1382 
j
 += 2; \

1383 } 0)

	)

1384 
	#APPEND32
(
x
) do { \

1385 i‡(
j
 + 4 > (
off_t
)
buf_Àn
) \

1386 
ovîÊow
; \

1387 
_t32
 = 
	`ht⁄l
(
x
); \

1388 
	`mem˝y
(
buf
 + 
j
, &
_t32
, 4); \

1389 
j
 += 4; \

1390 } 0)

	)

1392 i‡(
«me_Àn
 > 255)  -2;

1395 c⁄° *c⁄° 
°¨t
 = 
«me
;

1396 i‡(
èbÀ
 && (
ªf
 = 
	`dn¶abñ_èbÀ_gë_pos
—abÀ, 
«me
)) >= 0) {

1397 
	`APPEND16
(
ªf
 | 0xc000);

1398  
j
;

1400 
«me
 = 
	`°rchr
(name, '.');

1401 i‡(!
«me
) {

1402 c⁄° 
œbñ_Àn
 = 
íd
 - 
°¨t
;

1403 i‡(
œbñ_Àn
 > 63)  -1;

1404 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1405 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1406 
buf
[
j
++] = 
œbñ_Àn
;

1408 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
íd
 - start);

1409 
j
 +
íd
 - 
°¨t
;

1413 c⁄° 
œbñ_Àn
 = 
«me
 - 
°¨t
;

1414 i‡(
œbñ_Àn
 > 63)  -1;

1415 i‡((
size_t
)(
j
+
œbñ_Àn
+1Ë> 
buf_Àn
)  -2;

1416 i‡(
èbÀ
Ë
	`dn¶abñ_èbÀ_add
—abÀ, 
°¨t
, 
j
);

1417 
buf
[
j
++] = 
œbñ_Àn
;

1419 
	`mem˝y
(
buf
 + 
j
, 
°¨t
, 
«me
 - start);

1420 
j
 +
«me
 - 
°¨t
;

1422 
«me
++;

1429 i‡(!
j
 || 
buf
[j-1]) buf[j++] = 0;

1430  
j
;

1431 
ovîÊow
:

1433 
	}
}

1439 
	$evdns_ªque°_Àn
(c⁄° 
«me_Àn
) {

1441 
«me_Àn
 + 2 +

1443 
	}
}

1450 
	$evdns_ªque°_d©a_buûd
(c⁄° *c⁄° 
«me
, c⁄° 
«me_Àn
,

1451 c⁄° 
u16
 
å™s_id
, c⁄° u16 
ty≥
, c⁄° u16 
˛ass
,

1452 
u8
 *c⁄° 
buf
, 
size_t
 
buf_Àn
) {

1453 
off_t
 
j
 = 0;

1454 
u16
 
_t
;

1456 
	`APPEND16
(
å™s_id
);

1457 
	`APPEND16
(0x0100);

1458 
	`APPEND16
(1);

1459 
	`APPEND16
(0);

1460 
	`APPEND16
(0);

1461 
	`APPEND16
(0);

1463 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
«me
, 
«me_Àn
, 
NULL
);

1464 i‡(
j
 < 0) {

1465  ()
j
;

1468 
	`APPEND16
(
ty≥
);

1469 
	`APPEND16
(
˛ass
);

1471  ()
j
;

1472 
ovîÊow
:

1474 
	}
}

1477 
evdns_£rvî_p‹t
 *

1478 
	$evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
cb
, *
u£r_d©a
)

1480 
evdns_£rvî_p‹t
 *
p‹t
;

1481 i‡(!(
p‹t
 = 
	`mÆloc
((
evdns_£rvî_p‹t
))))

1482  
NULL
;

1483 
	`mem£t
(
p‹t
, 0, (
evdns_£rvî_p‹t
));

1485 
	`as£π
(!
is_t˝
);

1486 
p‹t
->
sockë
 = socket;

1487 
p‹t
->
ªf˙t
 = 1;

1488 
p‹t
->
choked
 = 0;

1489 
p‹t
->
˛osög
 = 0;

1490 
p‹t
->
u£r_ˇŒback
 = 
cb
;

1491 
p‹t
->
u£r_d©a
 = user_data;

1492 
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1494 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, 
EV_READ
 | 
EV_PERSIST
,

1495 
£rvî_p‹t_ªady_ˇŒback
, 
p‹t
);

1496 
	`evít_add
(&
p‹t
->
evít
, 
NULL
);

1497  
p‹t
;

1498 
	}
}

1502 
	$evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
)

1504 i‡(--
p‹t
->
ªf˙t
 == 0)

1505 
	`£rvî_p‹t_‰ì
(
p‹t
);

1506 
p‹t
->
˛osög
 = 1;

1507 
	}
}

1511 
	$evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
_ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
)

1513 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1514 
£rvî_ª∂y_ôem
 **
ôemp
, *
ôem
;

1515 *
cou¡p
;

1517 i‡(
ªq
->
ª•⁄£
)

1520 
£˘i⁄
) {

1521 
EVDNS_ANSWER_SECTION
:

1522 
ôemp
 = &
ªq
->
™swî
;

1523 
cou¡p
 = &
ªq
->
n_™swî
;

1525 
EVDNS_AUTHORITY_SECTION
:

1526 
ôemp
 = &
ªq
->
auth‹ôy
;

1527 
cou¡p
 = &
ªq
->
n_auth‹ôy
;

1529 
EVDNS_ADDITIONAL_SECTION
:

1530 
ôemp
 = &
ªq
->
addôi⁄Æ
;

1531 
cou¡p
 = &
ªq
->
n_addôi⁄Æ
;

1536 *
ôemp
) {

1537 
ôemp
 = &((*ôemp)->
√xt
);

1539 
ôem
 = 
	`mÆloc
((
£rvî_ª∂y_ôem
));

1540 i‡(!
ôem
)

1542 
ôem
->
√xt
 = 
NULL
;

1543 i‡(!(
ôem
->
«me
 = 
	`°rdup
(name))) {

1544 
	`‰ì
(
ôem
);

1547 
ôem
->
ty≥
 =Åype;

1548 
ôem
->
dns_que°i⁄_˛ass
 = 
˛ass
;

1549 
ôem
->
âl
 =Åtl;

1550 
ôem
->
is_«me
 = is_name != 0;

1551 
ôem
->
d©Æí
 = 0;

1552 
ôem
->
d©a
 = 
NULL
;

1553 i‡(
d©a
) {

1554 i‡(
ôem
->
is_«me
) {

1555 i‡(!(
ôem
->
d©a
 = 
	`°rdup
(data))) {

1556 
	`‰ì
(
ôem
->
«me
);

1557 
	`‰ì
(
ôem
);

1560 
ôem
->
d©Æí
 = (
u16
)-1;

1562 i‡(!(
ôem
->
d©a
 = 
	`mÆloc
(
d©Æí
))) {

1563 
	`‰ì
(
ôem
->
«me
);

1564 
	`‰ì
(
ôem
);

1567 
ôem
->
d©Æí
 = datalen;

1568 
	`mem˝y
(
ôem
->
d©a
, d©a, 
d©Æí
);

1572 *
ôemp
 = 
ôem
;

1573 ++(*
cou¡p
);

1575 
	}
}

1579 
	$evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1581  
	`evdns_£rvî_ªque°_add_ª∂y
(

1582 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_A
, 
CLASS_INET
,

1583 
âl
, 
n
*4, 0, 
addrs
);

1584 
	}
}

1588 
	$evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
)

1590  
	`evdns_£rvî_ªque°_add_ª∂y
(

1591 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_AAAA
, 
CLASS_INET
,

1592 
âl
, 
n
*16, 0, 
addrs
);

1593 
	}
}

1597 
	$evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
)

1599 
u32
 
a
;

1600 
buf
[32];

1601 
	`as£π
(
ö
 || 
öaddr_«me
);

1602 
	`as£π
(!(
ö
 && 
öaddr_«me
));

1603 i‡(
ö
) {

1604 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

1605 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

1606 ()(
u8
)((
a
 )&0xff),

1607 ()(
u8
)((
a
>>8 )&0xff),

1608 ()(
u8
)((
a
>>16)&0xff),

1609 ()(
u8
)((
a
>>24)&0xff));

1610 
öaddr_«me
 = 
buf
;

1612  
	`evdns_£rvî_ªque°_add_ª∂y
(

1613 
ªq
, 
EVDNS_ANSWER_SECTION
, 
öaddr_«me
, 
TYPE_PTR
, 
CLASS_INET
,

1614 
âl
, -1, 1, 
ho°«me
);

1615 
	}
}

1619 
	$evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
)

1621  
	`evdns_£rvî_ªque°_add_ª∂y
(

1622 
ªq
, 
EVDNS_ANSWER_SECTION
, 
«me
, 
TYPE_CNAME
, 
CLASS_INET
,

1623 
âl
, -1, 1, 
˙ame
);

1624 
	}
}

1628 
	$evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
£rvî_ªque°
 *
ªq
, 
îr
)

1630 
buf
[1500];

1631 
size_t
 
buf_Àn
 = (
buf
);

1632 
off_t
 
j
 = 0, 
r
;

1633 
u16
 
_t
;

1634 
u32
 
_t32
;

1635 
i
;

1636 
u16
 
Êags
;

1637 
dn¶abñ_èbÀ
 
èbÀ
;

1639 i‡(
îr
 < 0 ||Érr > 15)  -1;

1643 
Êags
 = 
ªq
->
ba£
.flags;

1644 
Êags
 |(0x8000 | 
îr
);

1646 
	`dn¶abñ_èbÀ_öô
(&
èbÀ
);

1647 
	`APPEND16
(
ªq
->
å™s_id
);

1648 
	`APPEND16
(
Êags
);

1649 
	`APPEND16
(
ªq
->
ba£
.
nque°i⁄s
);

1650 
	`APPEND16
(
ªq
->
n_™swî
);

1651 
	`APPEND16
(
ªq
->
n_auth‹ôy
);

1652 
	`APPEND16
(
ªq
->
n_addôi⁄Æ
);

1655 
i
=0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i) {

1656 c⁄° *
s
 = 
ªq
->
ba£
.
que°i⁄s
[
i
]->
«me
;

1657 
j
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, j, 
s
, 
	`°æí
(s), &
èbÀ
);

1658 i‡(
j
 < 0) {

1659 
	`dn¶abñ_˛ór
(&
èbÀ
);

1660  (Ë
j
;

1662 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
ty≥
);

1663 
	`APPEND16
(
ªq
->
ba£
.
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
);

1667 
i
=0; i<3; ++i) {

1668 
£rvî_ª∂y_ôem
 *
ôem
;

1669 i‡(
i
==0)

1670 
ôem
 = 
ªq
->
™swî
;

1671 i‡(
i
==1)

1672 
ôem
 = 
ªq
->
auth‹ôy
;

1674 
ôem
 = 
ªq
->
addôi⁄Æ
;

1675 
ôem
) {

1676 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
«me
, 
	`°æí
(ôem->«me), &
èbÀ
);

1677 i‡(
r
 < 0)

1678 
ovîÊow
;

1679 
j
 = 
r
;

1681 
	`APPEND16
(
ôem
->
ty≥
);

1682 
	`APPEND16
(
ôem
->
dns_que°i⁄_˛ass
);

1683 
	`APPEND32
(
ôem
->
âl
);

1684 i‡(
ôem
->
is_«me
) {

1685 
off_t
 
Àn_idx
 = 
j
, 
«me_°¨t
;

1686 
j
 += 2;

1687 
«me_°¨t
 = 
j
;

1688 
r
 = 
	`dn¢ame_to_œbñs
(
buf
, 
buf_Àn
, 
j
, 
ôem
->
d©a
, 
	`°æí
(ôem->d©a), &
èbÀ
);

1689 i‡(
r
 < 0)

1690 
ovîÊow
;

1691 
j
 = 
r
;

1692 
_t
 = 
	`ht⁄s
–(Ë(
j
-
«me_°¨t
) );

1693 
	`mem˝y
(
buf
+
Àn_idx
, &
_t
, 2);

1695 
	`APPEND16
(
ôem
->
d©Æí
);

1696 i‡(
j
+
ôem
->
d©Æí
 > (
off_t
)
buf_Àn
)

1697 
ovîÊow
;

1698 
	`mem˝y
(
buf
+
j
, 
ôem
->
d©a
, iãm->
d©Æí
);

1699 
j
 +
ôem
->
d©Æí
;

1701 
ôem
 = iãm->
√xt
;

1705 i‡(
j
 > 512) {

1706 
ovîÊow
:

1707 
j
 = 512;

1708 
buf
[2] |= 0x02;

1711 
ªq
->
ª•⁄£_Àn
 = 
j
;

1713 i‡(!(
ªq
->
ª•⁄£
 = 
	`mÆloc
‘eq->
ª•⁄£_Àn
))) {

1714 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1715 
	`dn¶abñ_˛ór
(&
èbÀ
);

1718 
	`mem˝y
(
ªq
->
ª•⁄£
, 
buf
,Ñeq->
ª•⁄£_Àn
);

1719 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1720 
	`dn¶abñ_˛ór
(&
èbÀ
);

1722 
	}
}

1726 
	$evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
_ªq
, 
îr
)

1728 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1729 
evdns_£rvî_p‹t
 *
p‹t
 = 
ªq
->port;

1730 
r
;

1731 i‡(!
ªq
->
ª•⁄£
) {

1732 i‡((
r
 = 
	`evdns_£rvî_ªque°_f‹m©_ª•⁄£
(
ªq
, 
îr
))<0)

1733  
r
;

1736 
r
 = 
	`£ndto
(
p‹t
->
sockë
, 
ªq
->
ª•⁄£
,Ñeq->
ª•⁄£_Àn
, 0,

1737 (
sockaddr
*Ë&
ªq
->
addr
,Ñeq->
addæí
);

1738 i‡(
r
<0) {

1739 
sock_îr
 = 
	`œ°_îr‹
(
p‹t
->
sockë
);

1740 i‡(! 
	`îr‹_is_ógaö
(
sock_îr
))

1743 i‡(
p‹t
->
≥ndög_ª∂õs
) {

1744 
ªq
->
¥ev_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
->prev_pending;

1745 
ªq
->
√xt_≥ndög
 = 
p‹t
->
≥ndög_ª∂õs
;

1746 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =

1747 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq;

1749 
ªq
->
¥ev_≥ndög
 =Ñeq->
√xt_≥ndög
 =Ñeq;

1750 
p‹t
->
≥ndög_ª∂õs
 = 
ªq
;

1751 
p‹t
->
choked
 = 1;

1753 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1754 
	`evít_£t
(&
p‹t
->
evít
,Ö‹t->
sockë
, (p‹t->
˛osög
?0:
EV_READ
Ë| 
EV_WRITE
 | 
EV_PERSIST
, 
£rvî_p‹t_ªady_ˇŒback
,Öort);

1756 i‡(
	`evít_add
(&
p‹t
->
evít
, 
NULL
) < 0) {

1757 
	`log
(
EVDNS_LOG_WARN
, "Error fromÜibevent whenáddingÉvent for DNS server");

1764 i‡(
	`£rvî_ªque°_‰ì
(
ªq
))

1767 i‡(
p‹t
->
≥ndög_ª∂õs
)

1768 
	`£rvî_p‹t_Êush
(
p‹t
);

1771 
	}
}

1775 
	$£rvî_ªque°_‰ì_™swîs
(
£rvî_ªque°
 *
ªq
)

1777 
£rvî_ª∂y_ôem
 *
vi˘im
, *
√xt
, **
li°
;

1778 
i
;

1779 
i
 = 0; i < 3; ++i) {

1780 i‡(
i
==0)

1781 
li°
 = &
ªq
->
™swî
;

1782 i‡(
i
==1)

1783 
li°
 = &
ªq
->
auth‹ôy
;

1785 
li°
 = &
ªq
->
addôi⁄Æ
;

1787 
vi˘im
 = *
li°
;

1788 
vi˘im
) {

1789 
√xt
 = 
vi˘im
->next;

1790 
	`‰ì
(
vi˘im
->
«me
);

1791 i‡(
vi˘im
->
d©a
)

1792 
	`‰ì
(
vi˘im
->
d©a
);

1793 
	`‰ì
(
vi˘im
);

1794 
vi˘im
 = 
√xt
;

1796 *
li°
 = 
NULL
;

1798 
	}
}

1803 
	$£rvî_ªque°_‰ì
(
£rvî_ªque°
 *
ªq
)

1805 
i
, 
rc
=1;

1806 i‡(
ªq
->
ba£
.
que°i⁄s
) {

1807 
i
 = 0; i < 
ªq
->
ba£
.
nque°i⁄s
; ++i)

1808 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
[
i
]);

1809 
	`‰ì
(
ªq
->
ba£
.
que°i⁄s
);

1812 i‡(
ªq
->
p‹t
) {

1813 i‡(
ªq
->
p‹t
->
≥ndög_ª∂õs
 ==Ñeq) {

1814 i‡(
ªq
->
√xt_≥ndög
)

1815 
ªq
->
p‹t
->
≥ndög_ª∂õs
 =Ñeq->
√xt_≥ndög
;

1817 
ªq
->
p‹t
->
≥ndög_ª∂õs
 = 
NULL
;

1819 
rc
 = --
ªq
->
p‹t
->
ªf˙t
;

1822 i‡(
ªq
->
ª•⁄£
) {

1823 
	`‰ì
(
ªq
->
ª•⁄£
);

1826 
	`£rvî_ªque°_‰ì_™swîs
(
ªq
);

1828 i‡(
ªq
->
√xt_≥ndög
 &&Ñeq->next_pending !=Ñeq) {

1829 
ªq
->
√xt_≥ndög
->
¥ev_≥ndög
 =Ñeq->prev_pending;

1830 
ªq
->
¥ev_≥ndög
->
√xt_≥ndög
 =Ñeq->next_pending;

1833 i‡(
rc
 == 0) {

1834 
	`£rvî_p‹t_‰ì
(
ªq
->
p‹t
);

1835 
	`‰ì
(
ªq
);

1838 
	`‰ì
(
ªq
);

1840 
	}
}

1844 
	$£rvî_p‹t_‰ì
(
evdns_£rvî_p‹t
 *
p‹t
)

1846 
	`as£π
(
p‹t
);

1847 
	`as£π
(!
p‹t
->
ªf˙t
);

1848 
	`as£π
(!
p‹t
->
≥ndög_ª∂õs
);

1849 i‡(
p‹t
->
sockë
 > 0) {

1850 
	`CLOSE_SOCKET
(
p‹t
->
sockë
);

1851 
p‹t
->
sockë
 = -1;

1853 (Ë
	`evít_dñ
(&
p‹t
->
evít
);

1855 
	}
}

1859 
	$evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
_ªq
)

1861 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1862 
	`£rvî_ªque°_‰ì
(
ªq
);

1864 
	}
}

1868 
	$evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
)

1870 
£rvî_ªque°
 *
ªq
 = 
	`TO_SERVER_REQUEST
(
_ªq
);

1871 i‡(
addr_Àn
 < ()
ªq
->
addæí
)

1873 
	`mem˝y
(
ß
, &(
ªq
->
addr
),Ñeq->
addæí
);

1874  
ªq
->
addæí
;

1875 
	}
}

1877 #unde‡
APPEND16


1878 #unde‡
APPEND32


1883 
	$evdns_ªque°_timeout_ˇŒback
(
fd
, 
evíts
, *
¨g
) {

1884 
ªque°
 *c⁄° 
ªq
 = (ªque° *Ë
¨g
;

1885 (Ë
fd
;

1886 (Ë
evíts
;

1888 
	`log
(
EVDNS_LOG_DEBUG
, "Reque° %lxÅimed out", (Ë
¨g
);

1890 
ªq
->
ns
->
timedout
++;

1891 i‡(
ªq
->
ns
->
timedout
 > 
globÆ_max_«me£rvî_timeout
) {

1892 
ªq
->
ns
->
timedout
 = 0;

1893 
	`«me£rvî_Áûed
(
ªq
->
ns
, "requestÅimed out.");

1896 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

1897 i‡(
ªq
->
tx_cou¡
 >
globÆ_max_ªå™smôs
) {

1899 
	`ª∂y_ˇŒback
(
ªq
, 0, 
DNS_ERR_TIMEOUT
, 
NULL
);

1900 
	`ªque°_föished
(
ªq
, &
ªq_hód
);

1903 
	`evdns_ªque°_å™smô
(
ªq
);

1905 
	}
}

1914 
	$evdns_ªque°_å™smô_to
(
ªque°
 *
ªq
, 
«me£rvî
 *
£rvî
) {

1915 
sockaddr_ö
 
sö
;

1916 
r
;

1917 
	`mem£t
(&
sö
, 0, (sin));

1918 
sö
.
sö_addr
.
s_addr
 = 
ªq
->
ns
->
addªss
;

1919 
sö
.
sö_p‹t
 = 
ªq
->
ns
->
p‹t
;

1920 
sö
.
sö_Ámûy
 = 
AF_INET
;

1922 
r
 = 
	`£ndto
(
£rvî
->
sockë
, 
ªq
->
ªque°
,Ñeq->
ªque°_Àn
, 0,

1923 (
sockaddr
*)&
sö
, (sin));

1924 i‡(
r
 < 0) {

1925 
îr
 = 
	`œ°_îr‹
(
£rvî
->
sockë
);

1926 i‡(
	`îr‹_is_ógaö
(
îr
))  1;

1927 
	`«me£rvî_Áûed
(
ªq
->
ns
, 
	`°ªº‹
(
îr
));

1929 } i‡(
r
 !()
ªq
->
ªque°_Àn
) {

1934 
	}
}

1943 
	$evdns_ªque°_å™smô
(
ªque°
 *
ªq
) {

1944 
ªtcode
 = 0, 
r
;

1948 
ªq
->
å™smô_me
 = 1;

1949 i‡(
ªq
->
å™s_id
 =0xffffË
	`ab‹t
();

1951 i‡(
ªq
->
ns
->
choked
) {

1957 
r
 = 
	`evdns_ªque°_å™smô_to
(
ªq
,Ñeq->
ns
);

1958 
r
) {

1961 
ªq
->
ns
->
choked
 = 1;

1962 
	`«me£rvî_wrôe_waôög
(
ªq
->
ns
, 1);

1966 
ªtcode
 = 1;

1970 
	`log
(
EVDNS_LOG_DEBUG
,

1971 "SëtögÅimeouàf‹Ñeque° %lx", (Ë
ªq
);

1972 i‡(
	`evtimî_add
(&
ªq
->
timeout_evít
, &
globÆ_timeout
) < 0) {

1973 
	`log
(
EVDNS_LOG_WARN
,

1975 (Ë
ªq
);

1978 
ªq
->
tx_cou¡
++;

1979 
ªq
->
å™smô_me
 = 0;

1980  
ªtcode
;

1982 
	}
}

1985 
	$«me£rvî_¥obe_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
, *
addªs£s
, *
¨g
) {

1986 
«me£rvî
 *c⁄° 
ns
 = («me£rvî *Ë
¨g
;

1987 (Ë
ty≥
;

1988 (Ë
cou¡
;

1989 (Ë
âl
;

1990 (Ë
addªs£s
;

1992 i‡(
ªsu…
 =
DNS_ERR_NONE
 ||Ñesu… =
DNS_ERR_NOTEXIST
) {

1994 
	`«me£rvî_up
(
ns
);

1995 } 
	`«me£rvî_¥obe_Áûed
(
ns
);

1996 
	}
}

1999 
	$«me£rvî_£nd_¥obe
(
«me£rvî
 *c⁄° 
ns
) {

2000 
ªque°
 *
ªq
;

2004 
	`log
(
EVDNS_LOG_DEBUG
, "SídögÖrobêtÿ%s", 
	`debug_¡ﬂ
(
ns
->
addªss
));

2006 
ªq
 = 
	`ªque°_√w
(
TYPE_A
, "www.googÀ.com", 
DNS_QUERY_NO_SEARCH
, 
«me£rvî_¥obe_ˇŒback
, 
ns
);

2007 i‡(!
ªq
) ;

2009 
	`ªque°_å™s_id_£t
(
ªq
, 
	`å™ß˘i⁄_id_pick
());

2010 
ªq
->
ns
 =Çs;

2011 
	`ªque°_submô
(
ªq
);

2012 
	}
}

2018 
	$evdns_å™smô
() {

2019 
did_åy_to_å™smô
 = 0;

2021 i‡(
ªq_hód
) {

2022 
ªque°
 *c⁄° 
°¨ãd_©
 = 
ªq_hód
, *
ªq
 =Ñeq_head;

2025 i‡(
ªq
->
å™smô_me
) {

2026 
did_åy_to_å™smô
 = 1;

2027 
	`evdns_ªque°_å™smô
(
ªq
);

2030 
ªq
 =Ñeq->
√xt
;

2031 } 
ªq
 !
°¨ãd_©
);

2034  
did_åy_to_å™smô
;

2035 
	}
}

2039 
	$evdns_cou¡_«me£rvîs
()

2041 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
;

2042 
n
 = 0;

2043 i‡(!
£rvî
)

2046 ++
n
;

2047 
£rvî
 = sîvî->
√xt
;

2048 } 
£rvî
 !
£rvî_hód
);

2049  
n
;

2050 
	}
}

2054 
	$evdns_˛ór_«me£rvîs_™d_su•íd
()

2056 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *
°¨ãd_©
 = server_head;

2057 
ªque°
 *
ªq
 = 
ªq_hód
, *
ªq_°¨ãd_©
 =Ñeq_head;

2059 i‡(!
£rvî
)

2062 
«me£rvî
 *
√xt
 = 
£rvî
->next;

2063 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

2064 i‡(
	`evtimî_öôülized
(&
£rvî
->
timeout_evít
))

2065 (Ë
	`evtimî_dñ
(&
£rvî
->
timeout_evít
);

2066 i‡(
£rvî
->
sockë
 >= 0)

2067 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

2068 
	`‰ì
(
£rvî
);

2069 i‡(
√xt
 =
°¨ãd_©
)

2071 
£rvî
 = 
√xt
;

2073 
£rvî_hód
 = 
NULL
;

2074 
globÆ_good_«me£rvîs
 = 0;

2076 
ªq
) {

2077 
ªque°
 *
√xt
 = 
ªq
->next;

2078 
ªq
->
tx_cou¡
 =Ñeq->
ªissue_cou¡
 = 0;

2079 
ªq
->
ns
 = 
NULL
;

2081 (Ë
	`evtimî_dñ
(&
ªq
->
timeout_evít
);

2082 
ªq
->
å™s_id
 = 0;

2083 
ªq
->
å™smô_me
 = 0;

2085 
globÆ_ªque°s_waôög
++;

2086 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2091 
ªq_waôög_hód
 =Ñeq_waôög_hód->
¥ev
;

2093 i‡(
√xt
 =
ªq_°¨ãd_©
)

2095 
ªq
 = 
√xt
;

2097 
ªq_hód
 = 
NULL
;

2098 
globÆ_ªque°s_öÊight
 = 0;

2101 
	}
}

2106 
	$evdns_ªsume
()

2108 
	`evdns_ªque°s_pump_waôög_queue
();

2110 
	}
}

2113 
	$_evdns_«me£rvî_add_im∂
(
addªss
, 
p‹t
) {

2116 c⁄° 
«me£rvî
 *
£rvî
 = 
£rvî_hód
, *c⁄° 
°¨ãd_©
 = server_head;

2117 
«me£rvî
 *
ns
;

2118 
îr
 = 0;

2119 i‡(
£rvî
) {

2121 i‡(
£rvî
->
addªss
 ==áddress)  3;

2122 
£rvî
 = sîvî->
√xt
;

2123 } 
£rvî
 !
°¨ãd_©
);

2126 
ns
 = (
«me£rvî
 *Ë
	`mÆloc
((nameserver));

2127 i‡(!
ns
)  -1;

2129 
	`mem£t
(
ns
, 0, (
«me£rvî
));

2131 
	`evtimî_£t
(&
ns
->
timeout_evít
, 
«me£rvî_¥od_ˇŒback
,Çs);

2133 
ns
->
sockë
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

2134 i‡(
ns
->
sockë
 < 0Ë{ 
îr
 = 1; 
out1
; }

2135 
	`evutû_make_sockë_n⁄blockög
(
ns
->
sockë
);

2137 
ns
->
addªss
 =áddress;

2138 
ns
->
p‹t
 = 
	`ht⁄s
(port);

2139 
ns
->
°©e
 = 1;

2140 
	`evít_£t
(&
ns
->
evít
,Çs->
sockë
, 
EV_READ
 | 
EV_PERSIST
, 
«me£rvî_ªady_ˇŒback
,Çs);

2141 i‡(
	`evít_add
(&
ns
->
evít
, 
NULL
) < 0) {

2142 
îr
 = 2;

2143 
out2
;

2146 
	`log
(
EVDNS_LOG_DEBUG
, "AddedÇame£rvî %s", 
	`debug_¡ﬂ
(
addªss
));

2149 i‡(!
£rvî_hód
) {

2150 
ns
->
√xt
 =Çs->
¥ev
 =Çs;

2151 
£rvî_hód
 = 
ns
;

2153 
ns
->
√xt
 = 
£rvî_hód
->next;

2154 
ns
->
¥ev
 = 
£rvî_hód
;

2155 
£rvî_hód
->
√xt
 = 
ns
;

2156 i‡(
£rvî_hód
->
¥ev
 == server_head) {

2157 
£rvî_hód
->
¥ev
 = 
ns
;

2161 
globÆ_good_«me£rvîs
++;

2165 
out2
:

2166 
	`CLOSE_SOCKET
(
ns
->
sockë
);

2167 
out1
:

2168 
	`‰ì
(
ns
);

2169 
	`log
(
EVDNS_LOG_WARN
, "U«bÀÅÿaddÇame£rvî %s:Éº‹ %d", 
	`debug_¡ﬂ
(
addªss
), 
îr
);

2170  
îr
;

2171 
	}
}

2175 
	$evdns_«me£rvî_add
(
addªss
) {

2176  
	`_evdns_«me£rvî_add_im∂
(
addªss
, 53);

2177 
	}
}

2181 
	$evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
) {

2182 
ö_addr
 
öa
;

2183 
p‹t
;

2184 
buf
[20];

2185 c⁄° *
˝
;

2186 
˝
 = 
	`°rchr
(
ù_as_°rög
, ':');

2187 i‡(! 
˝
) {

2188 
˝
 = 
ù_as_°rög
;

2189 
p‹t
 = 53;

2191 
p‹t
 = 
	`°πoöt
(
˝
+1);

2192 i‡(
p‹t
 < 0 ||Öort > 65535) {

2195 i‡((
˝
-
ù_as_°rög
Ë>()(
buf
)) {

2198 
	`mem˝y
(
buf
, 
ù_as_°rög
, 
˝
-ip_as_string);

2199 
buf
[
˝
-
ù_as_°rög
] = '\0';

2200 
˝
 = 
buf
;

2202 i‡(!
	`öë_©⁄
(
˝
, &
öa
)) {

2205  
	`_evdns_«me£rvî_add_im∂
(
öa
.
s_addr
, 
p‹t
);

2206 
	}
}

2210 
	$evdns_ªque°_ö£π
(
ªque°
 *
ªq
, ªque° **
hód
) {

2211 i‡(!*
hód
) {

2212 *
hód
 = 
ªq
;

2213 
ªq
->
√xt
 =Ñeq->
¥ev
 =Ñeq;

2217 
ªq
->
¥ev
 = (*
hód
)->prev;

2218 
ªq
->
¥ev
->
√xt
 =Ñeq;

2219 
ªq
->
√xt
 = *
hód
;

2220 (*
hód
)->
¥ev
 = 
ªq
;

2221 
	}
}

2224 
	$°rög_num_dŸs
(c⁄° *
s
) {

2225 
cou¡
 = 0;

2226 (
s
 = 
	`°rchr
(s, '.'))) {

2227 
s
++;

2228 
cou¡
++;

2230  
cou¡
;

2231 
	}
}

2233 
ªque°
 *

2234 
	$ªque°_√w
(
ty≥
, c⁄° *
«me
, 
Êags
,

2235 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
u£r_±r
) {

2236 c⁄° 
issuög_now
 =

2237 (
globÆ_ªque°s_öÊight
 < 
globÆ_max_ªque°s_öÊight
) ? 1 : 0;

2239 c⁄° 
«me_Àn
 = 
	`°æí
(
«me
);

2240 c⁄° 
ªque°_max_Àn
 = 
	`evdns_ªque°_Àn
(
«me_Àn
);

2241 c⁄° 
u16
 
å™s_id
 = 
issuög_now
 ? 
	`å™ß˘i⁄_id_pick
() : 0xffff;

2243 
ªque°
 *c⁄° 
ªq
 =

2244 (
ªque°
 *Ë
	`mÆloc
((ªque°Ë+ 
ªque°_max_Àn
);

2245 
æí
;

2246 (Ë
Êags
;

2248 i‡(!
ªq
Ë 
NULL
;

2249 
	`mem£t
(
ªq
, 0, (
ªque°
));

2251 
	`evtimî_£t
(&
ªq
->
timeout_evít
, 
evdns_ªque°_timeout_ˇŒback
,Ñeq);

2254 
ªq
->
ªque°
 = ((
u8
 *)Ñeq) + (request);

2256 
ªq
->
ªque°_≠≥nded
 = 1;

2257 
æí
 = 
	`evdns_ªque°_d©a_buûd
(
«me
, 
«me_Àn
, 
å™s_id
,

2258 
ty≥
, 
CLASS_INET
, 
ªq
->
ªque°
, 
ªque°_max_Àn
);

2259 i‡(
æí
 < 0)

2260 
îr1
;

2261 
ªq
->
ªque°_Àn
 = 
æí
;

2262 
ªq
->
å™s_id
 =Årans_id;

2263 
ªq
->
tx_cou¡
 = 0;

2264 
ªq
->
ªque°_ty≥
 = 
ty≥
;

2265 
ªq
->
u£r_poöãr
 = 
u£r_±r
;

2266 
ªq
->
u£r_ˇŒback
 = 
ˇŒback
;

2267 
ªq
->
ns
 = 
issuög_now
 ? 
	`«me£rvî_pick
(Ë: 
NULL
;

2268 
ªq
->
√xt
 =Ñeq->
¥ev
 = 
NULL
;

2270  
ªq
;

2271 
îr1
:

2272 
	`‰ì
(
ªq
);

2273  
NULL
;

2274 
	}
}

2277 
	$ªque°_submô
(
ªque°
 *c⁄° 
ªq
) {

2278 i‡(
ªq
->
ns
) {

2281 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_hód
);

2282 
globÆ_ªque°s_öÊight
++;

2283 
	`evdns_ªque°_å™smô
(
ªq
);

2285 
	`evdns_ªque°_ö£π
(
ªq
, &
ªq_waôög_hód
);

2286 
globÆ_ªque°s_waôög
++;

2288 
	}
}

2291 
	$evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
,

2292 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2293 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2294 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2295 
ªque°
 *c⁄° 
ªq
 =

2296 
	`ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2297 i‡(
ªq
 =
NULL
)

2299 
	`ªque°_submô
(
ªq
);

2302  (
	`£¨ch_ªque°_√w
(
TYPE_A
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2304 
	}
}

2307 
	$evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
,

2308 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2309 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %s", 
«me
);

2310 i‡(
Êags
 & 
DNS_QUERY_NO_SEARCH
) {

2311 
ªque°
 *c⁄° 
ªq
 =

2312 
	`ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
);

2313 i‡(
ªq
 =
NULL
)

2315 
	`ªque°_submô
(
ªq
);

2318  (
	`£¨ch_ªque°_√w
(
TYPE_AAAA
, 
«me
, 
Êags
, 
ˇŒback
, 
±r
));

2320 
	}
}

2322 
	$evdns_ªsﬁve_ªvî£
(c⁄° 
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2323 
buf
[32];

2324 
ªque°
 *
ªq
;

2325 
u32
 
a
;

2326 
	`as£π
(
ö
);

2327 
a
 = 
	`¡ohl
(
ö
->
s_addr
);

2328 
	`evutû_¢¥ötf
(
buf
, (buf), "%d.%d.%d.%d.in-addr.arpa",

2329 ()(
u8
)((
a
 )&0xff),

2330 ()(
u8
)((
a
>>8 )&0xff),

2331 ()(
u8
)((
a
>>16)&0xff),

2332 ()(
u8
)((
a
>>24)&0xff));

2333 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2334 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2335 i‡(!
ªq
)  1;

2336 
	`ªque°_submô
(
ªq
);

2338 
	}
}

2340 
	$evdns_ªsﬁve_ªvî£_ùv6
(c⁄° 
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
) {

2342 
buf
[73];

2343 *
˝
;

2344 
ªque°
 *
ªq
;

2345 
i
;

2346 
	`as£π
(
ö
);

2347 
˝
 = 
buf
;

2348 
i
=15; i >= 0; --i) {

2349 
u8
 
byã
 = 
ö
->
s6_addr
[
i
];

2350 *
˝
++ = "0123456789abcdef"[
byã
 & 0x0f];

2351 *
˝
++ = '.';

2352 *
˝
++ = "0123456789abcdef"[
byã
 >> 4];

2353 *
˝
++ = '.';

2355 
	`as£π
(
˝
 + 
	`°æí
("ù6.¨∑"Ë< 
buf
+(buf));

2356 
	`mem˝y
(
˝
, "ù6.¨∑", 
	`°æí
("ip6.arpa")+1);

2357 
	`log
(
EVDNS_LOG_DEBUG
, "Resﬁvêªque°ed f‹ %†‘evî£)", 
buf
);

2358 
ªq
 = 
	`ªque°_√w
(
TYPE_PTR
, 
buf
, 
Êags
, 
ˇŒback
, 
±r
);

2359 i‡(!
ªq
)  1;

2360 
	`ªque°_submô
(
ªq
);

2362 
	}
}

2377 
	s£¨ch_domaö
 {

2378 
	mÀn
;

2379 
£¨ch_domaö
 *
	m√xt
;

2383 
	s£¨ch_°©e
 {

2384 
	mªfcou¡
;

2385 
	mndŸs
;

2386 
	mnum_domaös
;

2387 
£¨ch_domaö
 *
	mhód
;

2390 
£¨ch_°©e
 *
	gglobÆ_£¨ch_°©e
 = 
NULL
;

2393 
	$£¨ch_°©e_de¸ef
(
£¨ch_°©e
 *c⁄° 
°©e
) {

2394 i‡(!
°©e
) ;

2395 
°©e
->
ªfcou¡
--;

2396 i‡(!
°©e
->
ªfcou¡
) {

2397 
£¨ch_domaö
 *
√xt
, *
dom
;

2398 
dom
 = 
°©e
->
hód
; dom; dom = 
√xt
) {

2399 
√xt
 = 
dom
->next;

2400 
	`‰ì
(
dom
);

2402 
	`‰ì
(
°©e
);

2404 
	}
}

2406 
£¨ch_°©e
 *

2407 
	$£¨ch_°©e_√w
() {

2408 
£¨ch_°©e
 *
°©e
 = (£¨ch_°©ê*Ë
	`mÆloc
((search_state));

2409 i‡(!
°©e
Ë 
NULL
;

2410 
	`mem£t
(
°©e
, 0, (
£¨ch_°©e
));

2411 
°©e
->
ªfcou¡
 = 1;

2412 
°©e
->
ndŸs
 = 1;

2414  
°©e
;

2415 
	}
}

2418 
	$£¨ch_po°fix_˛ór
() {

2419 
	`£¨ch_°©e_de¸ef
(
globÆ_£¨ch_°©e
);

2421 
globÆ_£¨ch_°©e
 = 
	`£¨ch_°©e_√w
();

2422 
	}
}

2426 
	$evdns_£¨ch_˛ór
() {

2427 
	`£¨ch_po°fix_˛ór
();

2428 
	}
}

2431 
	$£¨ch_po°fix_add
(c⁄° *
domaö
) {

2432 
domaö_Àn
;

2433 
£¨ch_domaö
 *
sdomaö
;

2434 
domaö
[0] == '.') domain++;

2435 
domaö_Àn
 = 
	`°æí
(
domaö
);

2437 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2438 i‡(!
globÆ_£¨ch_°©e
) ;

2439 
globÆ_£¨ch_°©e
->
num_domaös
++;

2441 
sdomaö
 = (
£¨ch_domaö
 *Ë
	`mÆloc
((£¨ch_domaöË+ 
domaö_Àn
);

2442 i‡(!
sdomaö
) ;

2443 
	`mem˝y
–((
u8
 *Ë
sdomaö
Ë+ (
£¨ch_domaö
), 
domaö
, 
domaö_Àn
);

2444 
sdomaö
->
√xt
 = 
globÆ_£¨ch_°©e
->
hód
;

2445 
sdomaö
->
Àn
 = 
domaö_Àn
;

2447 
globÆ_£¨ch_°©e
->
hód
 = 
sdomaö
;

2448 
	}
}

2453 
	$£¨ch_ªvî£
() {

2454 
£¨ch_domaö
 *
cur
, *
¥ev
 = 
NULL
, *
√xt
;

2455 
cur
 = 
globÆ_£¨ch_°©e
->
hód
;

2456 
cur
) {

2457 
√xt
 = 
cur
->next;

2458 
cur
->
√xt
 = 
¥ev
;

2459 
¥ev
 = 
cur
;

2460 
cur
 = 
√xt
;

2463 
globÆ_£¨ch_°©e
->
hód
 = 
¥ev
;

2464 
	}
}

2468 
	$evdns_£¨ch_add
(c⁄° *
domaö
) {

2469 
	`£¨ch_po°fix_add
(
domaö
);

2470 
	}
}

2474 
	$evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
) {

2475 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2476 i‡(!
globÆ_£¨ch_°©e
) ;

2477 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2478 
	}
}

2481 
	$£¨ch_£t_‰om_ho°«me
() {

2482 
ho°«me
[
HOST_NAME_MAX
 + 1], *
domaö«me
;

2484 
	`£¨ch_po°fix_˛ór
();

2485 i‡(
	`gëho°«me
(
ho°«me
, (hostname))) ;

2486 
domaö«me
 = 
	`°rchr
(
ho°«me
, '.');

2487 i‡(!
domaö«me
) ;

2488 
	`£¨ch_po°fix_add
(
domaö«me
);

2489 
	}
}

2493 
	$£¨ch_make_√w
(c⁄° 
£¨ch_°©e
 *c⁄° 
°©e
, 
n
, c⁄° *c⁄° 
ba£_«me
) {

2494 c⁄° 
ba£_Àn
 = 
	`°æí
(
ba£_«me
);

2495 c⁄° 
√ed_to_≠≥nd_dŸ
 = 
ba£_«me
[
ba£_Àn
 - 1] == '.' ? 0 : 1;

2496 
£¨ch_domaö
 *
dom
;

2498 
dom
 = 
°©e
->
hód
; dom; dom = dom->
√xt
) {

2499 i‡(!
n
--) {

2502 c⁄° 
u8
 *c⁄° 
po°fix
 = ((u8 *Ë
dom
Ë+ (
£¨ch_domaö
);

2503 c⁄° 
po°fix_Àn
 = 
dom
->
Àn
;

2504 *c⁄° 
√w«me
 = (*Ë
	`mÆloc
(
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
 + 1);

2505 i‡(!
√w«me
Ë 
NULL
;

2506 
	`mem˝y
(
√w«me
, 
ba£_«me
, 
ba£_Àn
);

2507 i‡(
√ed_to_≠≥nd_dŸ
Ë
√w«me
[
ba£_Àn
] = '.';

2508 
	`mem˝y
(
√w«me
 + 
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
, 
po°fix
, 
po°fix_Àn
);

2509 
√w«me
[
ba£_Àn
 + 
√ed_to_≠≥nd_dŸ
 + 
po°fix_Àn
] = 0;

2510  
√w«me
;

2515 
	`ab‹t
();

2516  
NULL
;

2517 
	}
}

2520 
	$£¨ch_ªque°_√w
(
ty≥
, c⁄° *c⁄° 
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
u£r_ˇŒback
, *
u£r_¨g
) {

2521 
	`as£π
(
ty≥
 =
TYPE_A
 ||Åy≥ =
TYPE_AAAA
);

2522 i‡–((
Êags
 & 
DNS_QUERY_NO_SEARCH
) == 0) &&

2523 
globÆ_£¨ch_°©e
 &&

2524 
globÆ_£¨ch_°©e
->
num_domaös
) {

2526 
ªque°
 *
ªq
;

2527 i‡(
	`°rög_num_dŸs
(
«me
Ë>
globÆ_£¨ch_°©e
->
ndŸs
) {

2528 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2529 i‡(!
ªq
)  1;

2530 
ªq
->
£¨ch_ödex
 = -1;

2532 *c⁄° 
√w_«me
 = 
	`£¨ch_make_√w
(
globÆ_£¨ch_°©e
, 0, 
«me
);

2533 i‡(!
√w_«me
)  1;

2534 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
√w_«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2535 
	`‰ì
(
√w_«me
);

2536 i‡(!
ªq
)  1;

2537 
ªq
->
£¨ch_ödex
 = 0;

2539 
ªq
->
£¨ch_‹ig«me
 = 
	`°rdup
(
«me
);

2540 
ªq
->
£¨ch_°©e
 = 
globÆ_£¨ch_°©e
;

2541 
ªq
->
£¨ch_Êags
 = 
Êags
;

2542 
globÆ_£¨ch_°©e
->
ªfcou¡
++;

2543 
	`ªque°_submô
(
ªq
);

2546 
ªque°
 *c⁄° 
ªq
 = 
	`ªque°_√w
(
ty≥
, 
«me
, 
Êags
, 
u£r_ˇŒback
, 
u£r_¨g
);

2547 i‡(!
ªq
)  1;

2548 
	`ªque°_submô
(
ªq
);

2551 
	}
}

2559 
	$£¨ch_åy_√xt
(
ªque°
 *c⁄° 
ªq
) {

2560 i‡(
ªq
->
£¨ch_°©e
) {

2562 *
√w_«me
;

2563 
ªque°
 *
√wªq
;

2564 
ªq
->
£¨ch_ödex
++;

2565 i‡(
ªq
->
£¨ch_ödex
 >ªq->
£¨ch_°©e
->
num_domaös
) {

2568 i‡(
	`°rög_num_dŸs
(
ªq
->
£¨ch_‹ig«me
Ë<Ñeq->
£¨ch_°©e
->
ndŸs
) {

2570 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
,Ñeq->
£¨ch_‹ig«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2571 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÅryögÑaw quîy %s", 
ªq
->
£¨ch_‹ig«me
);

2572 i‡(
√wªq
) {

2573 
	`ªque°_submô
(
√wªq
);

2580 
√w_«me
 = 
	`£¨ch_make_√w
(
ªq
->
£¨ch_°©e
,Ñeq->
£¨ch_ödex
,Ñeq->
£¨ch_‹ig«me
);

2581 i‡(!
√w_«me
)  1;

2582 
	`log
(
EVDNS_LOG_DEBUG
, "Sórch:ÇowÅryög %†(%d)", 
√w_«me
, 
ªq
->
£¨ch_ödex
);

2583 
√wªq
 = 
	`ªque°_√w
(
ªq
->
ªque°_ty≥
, 
√w_«me
,Ñeq->
£¨ch_Êags
,Ñeq->
u£r_ˇŒback
,Ñeq->
u£r_poöãr
);

2584 
	`‰ì
(
√w_«me
);

2585 i‡(!
√wªq
)  1;

2586 
√wªq
->
£¨ch_‹ig«me
 = 
ªq
->search_origname;

2587 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2588 
√wªq
->
£¨ch_°©e
 = 
ªq
->search_state;

2589 
√wªq
->
£¨ch_Êags
 = 
ªq
->search_flags;

2590 
√wªq
->
£¨ch_ödex
 = 
ªq
->search_index;

2591 
√wªq
->
£¨ch_°©e
->
ªfcou¡
++;

2592 
	`ªque°_submô
(
√wªq
);

2596 
	}
}

2599 
	$£¨ch_ªque°_föished
(
ªque°
 *c⁄° 
ªq
) {

2600 i‡(
ªq
->
£¨ch_°©e
) {

2601 
	`£¨ch_°©e_de¸ef
(
ªq
->
£¨ch_°©e
);

2602 
ªq
->
£¨ch_°©e
 = 
NULL
;

2604 i‡(
ªq
->
£¨ch_‹ig«me
) {

2605 
	`‰ì
(
ªq
->
£¨ch_‹ig«me
);

2606 
ªq
->
£¨ch_‹ig«me
 = 
NULL
;

2608 
	}
}

2614 
	$evdns_ªsﬁv_£t_deÁu…s
(
Êags
) {

2616 i‡(
Êags
 & 
DNS_OPTION_SEARCH
Ë
	`£¨ch_£t_‰om_ho°«me
();

2617 i‡(
Êags
 & 
DNS_OPTION_NAMESERVERS
Ë
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2618 
	}
}

2620 #i‚de‡
HAVE_STRTOK_R


2622 
	$°πok_r
(*
s
, c⁄° *
dñim
, **
°©e
) {

2623  
	`°πok
(
s
, 
dñim
);

2624 
	}
}

2629 
	$°πoöt
(c⁄° *c⁄° 
°r
) {

2630 *
íd±r
;

2631 c⁄° 
r
 = 
	`°πﬁ
(
°r
, &
íd±r
, 10);

2632 i‡(*
íd±r
)  -1;

2633  
r
;

2634 
	}
}

2638 
	$°πoöt_˛ù≥d
(c⁄° *c⁄° 
°r
, 
mö
, 
max
)

2640 
r
 = 
	`°πoöt
(
°r
);

2641 i‡(
r
 == -1)

2642  
r
;

2643 i‡(
r
<
mö
)

2644  
mö
;

2645 i‡(
r
>
max
)

2646  
max
;

2648  
r
;

2649 
	}
}

2653 
	$evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
)

2655 i‡(!
	`°∫cmp
(
›ti⁄
, "ndots:", 6)) {

2656 c⁄° 
ndŸs
 = 
	`°πoöt
(
vÆ
);

2657 i‡(
ndŸs
 == -1)  -1;

2658 i‡(!(
Êags
 & 
DNS_OPTION_SEARCH
))  0;

2659 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÇdŸ†tÿ%d", 
ndŸs
);

2660 i‡(!
globÆ_£¨ch_°©e
ËglobÆ_£¨ch_°©ê
	`£¨ch_°©e_√w
();

2661 i‡(!
globÆ_£¨ch_°©e
)  -1;

2662 
globÆ_£¨ch_°©e
->
ndŸs
 =Çdots;

2663 } i‡(!
	`°∫cmp
(
›ti⁄
, "timeout:", 8)) {

2664 c⁄° 
timeout
 = 
	`°πoöt
(
vÆ
);

2665 i‡(
timeout
 == -1)  -1;

2666 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2667 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÅimeouàtÿ%d", 
timeout
);

2668 
globÆ_timeout
.
tv_£c
 = 
timeout
;

2669 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-timeouts:", 12)) {

2670 c⁄° 
maxtimeout
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 255);

2671 i‡(
maxtimeout
 == -1)  -1;

2672 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2673 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximumállowedÅimeoutsÅo %d",

2674 
maxtimeout
);

2675 
globÆ_max_«me£rvî_timeout
 = 
maxtimeout
;

2676 } i‡(!
	`°∫cmp
(
›ti⁄
, "max-inflight:", 13)) {

2677 c⁄° 
maxöÊight
 = 
	`°πoöt_˛ù≥d
(
vÆ
, 1, 65000);

2678 i‡(
maxöÊight
 == -1)  -1;

2679 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2680 
	`log
(
EVDNS_LOG_DEBUG
, "Setting maximum inflightÑequestsÅo %d",

2681 
maxöÊight
);

2682 
globÆ_max_ªque°s_öÊight
 = 
maxöÊight
;

2683 } i‡(!
	`°∫cmp
(
›ti⁄
, "attempts:", 9)) {

2684 
ªåõs
 = 
	`°πoöt
(
vÆ
);

2685 i‡(
ªåõs
 == -1)  -1;

2686 i‡(
ªåõs
 > 255)Ñetries = 255;

2687 i‡(!(
Êags
 & 
DNS_OPTION_MISC
))  0;

2688 
	`log
(
EVDNS_LOG_DEBUG
, "SëtögÑërõ†tÿ%d", 
ªåõs
);

2689 
globÆ_max_ªå™smôs
 = 
ªåõs
;

2692 
	}
}

2695 
	$ªsﬁv_c⁄f_∑r£_löe
(*c⁄° 
°¨t
, 
Êags
) {

2696 *
°πok_°©e
;

2697 c⁄° *c⁄° 
dñims
 = " \t";

2698 
	#NEXT_TOKEN
 
	`°πok_r
(
NULL
, 
dñims
, &
°πok_°©e
)

	)

2700 *c⁄° 
fú°_tokí
 = 
	`°πok_r
(
°¨t
, 
dñims
, &
°πok_°©e
);

2701 i‡(!
fú°_tokí
) ;

2703 i‡(!
	`°rcmp
(
fú°_tokí
, "«me£rvî"Ë&& (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2704 c⁄° *c⁄° 
«me£rvî
 = 
NEXT_TOKEN
;

2705 
ö_addr
 
öa
;

2707 i‡(
	`öë_©⁄
(
«me£rvî
, &
öa
)) {

2709 
	`evdns_«me£rvî_add
(
öa
.
s_addr
);

2711 } i‡(!
	`°rcmp
(
fú°_tokí
, "domaö"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2712 c⁄° *c⁄° 
domaö
 = 
NEXT_TOKEN
;

2713 i‡(
domaö
) {

2714 
	`£¨ch_po°fix_˛ór
();

2715 
	`£¨ch_po°fix_add
(
domaö
);

2717 } i‡(!
	`°rcmp
(
fú°_tokí
, "£¨ch"Ë&& (
Êags
 & 
DNS_OPTION_SEARCH
)) {

2718 c⁄° *
domaö
;

2719 
	`£¨ch_po°fix_˛ór
();

2721 (
domaö
 = 
NEXT_TOKEN
)) {

2722 
	`£¨ch_po°fix_add
(
domaö
);

2724 
	`£¨ch_ªvî£
();

2725 } i‡(!
	`°rcmp
(
fú°_tokí
, "options")) {

2726 c⁄° *
›ti⁄
;

2727 (
›ti⁄
 = 
NEXT_TOKEN
)) {

2728 c⁄° *
vÆ
 = 
	`°rchr
(
›ti⁄
, ':');

2729 
	`evdns_£t_›ti⁄
(
›ti⁄
, 
vÆ
 ? vÆ+1 : "", 
Êags
);

2732 #unde‡
NEXT_TOKEN


2733 
	}
}

2744 
	$evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
) {

2745 
°©
 
°
;

2746 
fd
, 
n
, 
r
;

2747 
u8
 *
ªsﬁv
;

2748 *
°¨t
;

2749 
îr
 = 0;

2751 
	`log
(
EVDNS_LOG_DEBUG
, "P¨sögÑesﬁv.c⁄‡fûê%s", 
fûíame
);

2753 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

2754 i‡(
fd
 < 0) {

2755 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2759 i‡(
	`f°©
(
fd
, &
°
)Ë{ 
îr
 = 2; 
out1
; }

2760 i‡(!
°
.
°_size
) {

2761 
	`evdns_ªsﬁv_£t_deÁu…s
(
Êags
);

2762 
îr
 = (
Êags
 & 
DNS_OPTION_NAMESERVERS
) ? 6 : 0;

2763 
out1
;

2765 i‡(
°
.
°_size
 > 65535Ë{ 
îr
 = 3; 
out1
; }

2767 
ªsﬁv
 = (
u8
 *Ë
	`mÆloc
((
size_t
)
°
.
°_size
 + 1);

2768 i‡(!
ªsﬁv
Ë{ 
îr
 = 4; 
out1
; }

2770 
n
 = 0;

2771 (
r
 = 
	`ªad
(
fd
, 
ªsﬁv
+
n
, (
size_t
)
°
.
°_size
-n)) > 0) {

2772 
n
 +
r
;

2773 i‡(
n
 =
°
.
°_size
)

2775 
	`as£π
(
n
 < 
°
.
°_size
);

2777 i‡(
r
 < 0Ë{ 
îr
 = 5; 
out2
; }

2778 
ªsﬁv
[
n
] = 0;

2780 
°¨t
 = (*Ë
ªsﬁv
;

2782 *c⁄° 
√wlöe
 = 
	`°rchr
(
°¨t
, '\n');

2783 i‡(!
√wlöe
) {

2784 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2787 *
√wlöe
 = 0;

2788 
	`ªsﬁv_c⁄f_∑r£_löe
(
°¨t
, 
Êags
);

2789 
°¨t
 = 
√wlöe
 + 1;

2793 i‡(!
£rvî_hód
 && (
Êags
 & 
DNS_OPTION_NAMESERVERS
)) {

2795 
	`evdns_«me£rvî_ù_add
("127.0.0.1");

2796 
îr
 = 6;

2798 i‡(
Êags
 & 
DNS_OPTION_SEARCH
 && (!
globÆ_£¨ch_°©e
 || globÆ_£¨ch_°©e->
num_domaös
 == 0)) {

2799 
	`£¨ch_£t_‰om_ho°«me
();

2802 
out2
:

2803 
	`‰ì
(
ªsﬁv
);

2804 
out1
:

2805 
	`˛o£
(
fd
);

2806  
îr
;

2807 
	}
}

2809 #ifde‡
WIN32


2812 
	$evdns_«me£rvî_ù_add_löe
(c⁄° *
ùs
) {

2813 c⁄° *
addr
;

2814 *
buf
;

2815 
r
;

2816 *
ùs
) {

2817 
	`ISSPACE
(*
ùs
) || *ips == ',' || *ips == '\t')

2818 ++
ùs
;

2819 
addr
 = 
ùs
;

2820 
	`ISDIGIT
(*
ùs
) || *ips == '.' || *ips == ':')

2821 ++
ùs
;

2822 
buf
 = 
	`mÆloc
(
ùs
-
addr
+1);

2823 i‡(!
buf
)  4;

2824 
	`mem˝y
(
buf
, 
addr
, 
ùs
-addr);

2825 
buf
[
ùs
-
addr
] = '\0';

2826 
r
 = 
	`evdns_«me£rvî_ù_add
(
buf
);

2827 
	`‰ì
(
buf
);

2828 i‡(
r
) Ñ;

2831 
	}
}

2833 
	$DWORD
(
	tWINAPI
 *
	tGëNëw‹kP¨ams_‚_t
)(
	tFIXED_INFO
 *, 
	tDWORD
*);

2838 
	$lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
()

2841 
FIXED_INFO
 *
fixed
;

2842 
HMODULE
 
h™dÀ
 = 0;

2843 
ULONG
 
size
 = (
FIXED_INFO
);

2844 *
buf
 = 
NULL
;

2845 
°©us
 = 0, 
r
, 
added_™y
;

2846 
IP_ADDR_STRING
 *
ns
;

2847 
GëNëw‹kP¨ams_‚_t
 
‚
;

2849 i‡(!(
h™dÀ
 = 
	`LﬂdLibøry
("iphlpapi.dll"))) {

2850 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot open iphlpapi.dll");

2851 
°©us
 = -1;

2852 
d⁄e
;

2854 i‡(!(
‚
 = (
GëNëw‹kP¨ams_‚_t
Ë
	`GëProcAddªss
(
h™dÀ
, "GetNetworkParams"))) {

2855 
	`log
(
EVDNS_LOG_WARN
, "CouldÇot getáddress of function.");

2856 
°©us
 = -1;

2857 
d⁄e
;

2860 
buf
 = 
	`mÆloc
(
size
);

2861 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2862 
fixed
 = 
buf
;

2863 
r
 = 
	`‚
(
fixed
, &
size
);

2864 i‡(
r
 !
ERROR_SUCCESS
 &&Ñ !
ERROR_BUFFER_OVERFLOW
) {

2865 
°©us
 = -1;

2866 
d⁄e
;

2868 i‡(
r
 !
ERROR_SUCCESS
) {

2869 
	`‰ì
(
buf
);

2870 
buf
 = 
	`mÆloc
(
size
);

2871 i‡(!
buf
Ë{ 
°©us
 = 4; 
d⁄e
; }

2872 
fixed
 = 
buf
;

2873 
r
 = 
	`‚
(
fixed
, &
size
);

2874 i‡(
r
 !
ERROR_SUCCESS
) {

2875 
	`log
(
EVDNS_LOG_DEBUG
, "fn() failed.");

2876 
°©us
 = -1;

2877 
d⁄e
;

2881 
	`as£π
(
fixed
);

2882 
added_™y
 = 0;

2883 
ns
 = &(
fixed
->
DnsSîvîLi°
);

2884 
ns
) {

2885 
r
 = 
	`evdns_«me£rvî_ù_add_löe
(
ns
->
IpAddªss
.
Såög
);

2886 i‡(
r
) {

2887 
	`log
(
EVDNS_LOG_DEBUG
,"CouldÇotáddÇameserver %sÅoÜist,error: %d",

2888 (
ns
->
IpAddªss
.
Såög
),()
	`GëLa°Eº‹
());

2889 
°©us
 = 
r
;

2890 
d⁄e
;

2892 
	`log
(
EVDNS_LOG_DEBUG
,"Suc˚sfuŒyádded %†a†«me£rvî",
ns
->
IpAddªss
.
Såög
);

2895 
added_™y
++;

2896 
ns
 =Çs->
Next
;

2899 i‡(!
added_™y
) {

2900 
	`log
(
EVDNS_LOG_DEBUG
, "NoÇameserversádded.");

2901 
°©us
 = -1;

2904 
d⁄e
:

2905 i‡(
buf
)

2906 
	`‰ì
(
buf
);

2907 i‡(
h™dÀ
)

2908 
	`FªeLibøry
(
h™dÀ
);

2909  
°©us
;

2910 
	}
}

2913 
	$c⁄fig_«me£rvî_‰om_ªg_key
(
HKEY
 
key
, c⁄° *
subkey
)

2915 *
buf
;

2916 
DWORD
 
bufsz
 = 0, 
ty≥
 = 0;

2917 
°©us
 = 0;

2919 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, 
NULL
, &
bufsz
)

2920 !
ERROR_MORE_DATA
)

2922 i‡(!(
buf
 = 
	`mÆloc
(
bufsz
)))

2925 i‡(
	`RegQuîyVÆueEx
(
key
, 
subkey
, 0, &
ty≥
, (
LPBYTE
)
buf
, &
bufsz
)

2926 =
ERROR_SUCCESS
 && 
bufsz
 > 1) {

2927 
°©us
 = 
	`evdns_«me£rvî_ù_add_löe
(
buf
);

2930 
	`‰ì
(
buf
);

2931  
°©us
;

2932 
	}
}

2934 
	#SERVICES_KEY
 "Sy°em\\CuºítC⁄åﬁSë\\Sîvi˚s\\"

	)

2935 
	#WIN_NS_9X_KEY
 
SERVICES_KEY
 "VxD\\MSTCP"

	)

2936 
	#WIN_NS_NT_KEY
 
SERVICES_KEY
 "T˝ù\\P¨amëîs"

	)

2939 
	$lﬂd_«me£rvîs_‰om_ªgi°ry
()

2941 
found
 = 0;

2942 
r
;

2943 
	#TRY
(
k
, 
«me
) \

2944 i‡(!
found
 && 
	`c⁄fig_«me£rvî_‰om_ªg_key
(
k
,
«me
) == 0) { \

2945 
	`log
(
EVDNS_LOG_DEBUG
,"FoundÇame£rvî†ö %s/%s",#k,
«me
); \

2946 
found
 = 1; \

2947 } i‡(!
found
) { \

2948 
	`log
(
EVDNS_LOG_DEBUG
,"Didn't findÇameservers in %s/%s", \

2950 }

	)

2952 i‡((()
	`GëVîsi⁄
()) > 0) {

2953 
HKEY
 
¡_key
 = 0, 
öãrÁ˚s_key
 = 0;

2955 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_NT_KEY
, 0,

2956 
KEY_READ
, &
¡_key
Ë!
ERROR_SUCCESS
) {

2957 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›íÇàkey, %d",()
	`GëLa°Eº‹
());

2960 
r
 = 
	`RegO≥nKeyEx
(
¡_key
, "Interfaces", 0,

2961 
KEY_QUERY_VALUE
|
KEY_ENUMERATE_SUB_KEYS
,

2962 &
öãrÁ˚s_key
);

2963 i‡(
r
 !
ERROR_SUCCESS
) {

2964 
	`log
(
EVDNS_LOG_DEBUG
,"Couldn'à›í i¡îÁ˚†key, %d",()
	`GëLa°Eº‹
());

2967 
	`TRY
(
¡_key
, "NameServer");

2968 
	`TRY
(
¡_key
, "DhcpNameServer");

2969 
	`TRY
(
öãrÁ˚s_key
, "NameServer");

2970 
	`TRY
(
öãrÁ˚s_key
, "DhcpNameServer");

2971 
	`RegClo£Key
(
öãrÁ˚s_key
);

2972 
	`RegClo£Key
(
¡_key
);

2974 
HKEY
 
wö_key
 = 0;

2975 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, 
WIN_NS_9X_KEY
, 0,

2976 
KEY_READ
, &
wö_key
Ë!
ERROR_SUCCESS
) {

2977 
	`log
(
EVDNS_LOG_DEBUG
, "Couldn'à›íÑegi°ry key, %d", ()
	`GëLa°Eº‹
());

2980 
	`TRY
(
wö_key
, "NameServer");

2981 
	`RegClo£Key
(
wö_key
);

2984 i‡(
found
 == 0) {

2985 
	`log
(
EVDNS_LOG_WARN
,"Didn't findányÇameservers.");

2988  
found
 ? 0 : -1;

2989 #unde‡
TRY


2990 
	}
}

2993 
	$evdns_c⁄fig_wödows_«me£rvîs
()

2995 i‡(
	`lﬂd_«me£rvîs_wôh_gë√tw‹k∑øms
() == 0)

2997  
	`lﬂd_«me£rvîs_‰om_ªgi°ry
();

2998 
	}
}

3002 
	$evdns_öô
()

3004 
ªs
 = 0;

3005 #ifde‡
WIN32


3006 
ªs
 = 
	`evdns_c⁄fig_wödows_«me£rvîs
();

3008 
ªs
 = 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTIONS_ALL
, "/etc/resolv.conf");

3011  (
ªs
);

3012 
	}
}

3015 
	$evdns_îr_to_°rög
(
îr
)

3017 
îr
) {

3018 
DNS_ERR_NONE
:  "noÉrror";

3019 
DNS_ERR_FORMAT
:  "misformatted query";

3020 
DNS_ERR_SERVERFAILED
:  "server failed";

3021 
DNS_ERR_NOTEXIST
:  "name doesÇotÉxist";

3022 
DNS_ERR_NOTIMPL
:  "queryÇot implemented";

3023 
DNS_ERR_REFUSED
:  "refused";

3025 
DNS_ERR_TRUNCATED
:  "replyÅruncated or ill-formed";

3026 
DNS_ERR_UNKNOWN
:  "unknown";

3027 
DNS_ERR_TIMEOUT
:  "requestÅimed out";

3028 
DNS_ERR_SHUTDOWN
:  "dns subsystem shut down";

3031 
	}
}

3034 
	$evdns_shutdown
(
Áû_ªque°s
)

3036 
«me£rvî
 *
£rvî
, *
£rvî_√xt
;

3037 
£¨ch_domaö
 *
dom
, *
dom_√xt
;

3039 
ªq_hód
) {

3040 i‡(
Áû_ªque°s
)

3041 
	`ª∂y_ˇŒback
(
ªq_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3042 
	`ªque°_föished
(
ªq_hód
, &req_head);

3044 
ªq_waôög_hód
) {

3045 i‡(
Áû_ªque°s
)

3046 
	`ª∂y_ˇŒback
(
ªq_waôög_hód
, 0, 
DNS_ERR_SHUTDOWN
, 
NULL
);

3047 
	`ªque°_föished
(
ªq_waôög_hód
, &req_waiting_head);

3049 
globÆ_ªque°s_öÊight
 = 
globÆ_ªque°s_waôög
 = 0;

3051 
£rvî
 = 
£rvî_hód
; sîvî; sîvî = 
£rvî_√xt
) {

3052 
£rvî_√xt
 = 
£rvî
->
√xt
;

3053 i‡(
£rvî
->
sockë
 >= 0)

3054 
	`CLOSE_SOCKET
(
£rvî
->
sockë
);

3055 (Ë
	`evít_dñ
(&
£rvî
->
evít
);

3056 i‡(
£rvî
->
°©e
 == 0)

3057 (Ë
	`evít_dñ
(&
£rvî
->
timeout_evít
);

3058 
	`‰ì
(
£rvî
);

3059 i‡(
£rvî_√xt
 =
£rvî_hód
)

3062 
£rvî_hód
 = 
NULL
;

3063 
globÆ_good_«me£rvîs
 = 0;

3065 i‡(
globÆ_£¨ch_°©e
) {

3066 
dom
 = 
globÆ_£¨ch_°©e
->
hód
; dom; dom = 
dom_√xt
) {

3067 
dom_√xt
 = 
dom
->
√xt
;

3068 
	`‰ì
(
dom
);

3070 
	`‰ì
(
globÆ_£¨ch_°©e
);

3071 
globÆ_£¨ch_°©e
 = 
NULL
;

3073 
evdns_log_‚
 = 
NULL
;

3074 
	}
}

3076 #ifde‡
EVDNS_MAIN


3078 
	$maö_ˇŒback
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

3079 *
addrs
, *
‹ig
) {

3080 *
n
 = (*)
‹ig
;

3081 
i
;

3082 
i
 = 0; i < 
cou¡
; ++i) {

3083 i‡(
ty≥
 =
DNS_IPv4_A
) {

3084 
	`¥ötf
("%s: %s\n", 
n
, 
	`debug_¡ﬂ
(((
u32
*)
addrs
)[
i
]));

3085 } i‡(
ty≥
 =
DNS_PTR
) {

3086 
	`¥ötf
("%s: %s\n", 
n
, ((**)
addrs
)[
i
]);

3089 i‡(!
cou¡
) {

3090 
	`¥ötf
("%s: Nÿ™swî (%d)\n", 
n
, 
ªsu…
);

3092 
	`fÊush
(
°dout
);

3093 
	}
}

3095 
	$evdns_£rvî_ˇŒback
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

3097 
i
, 
r
;

3098 ()
d©a
;

3101 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

3102 
u32
 
™s
 = 
	`ht⁄l
(0xc0a80b0bUL);

3103 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

3104 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3105 
	`¥ötf
(" --Ñïlyög f‹ %†(A)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3106 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3107 1, &
™s
, 10);

3108 i‡(
r
<0)

3109 
	`¥ötf
("eeep, didn't work.\n");

3110 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

3111 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
) {

3112 
	`¥ötf
(" --Ñïlyög f‹ %†(PTR)\n", 
ªq
->
que°i⁄s
[
i
]->
«me
);

3113 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
,Ñeq->
que°i⁄s
[
i
]->
«me
,

3116 
	`¥ötf
(" -- skùpög %†[%d %d]\n", 
ªq
->
que°i⁄s
[
i
]->
«me
,

3117 
ªq
->
que°i⁄s
[
i
]->
ty≥
,Ñeq->que°i⁄s[i]->
dns_que°i⁄_˛ass
);

3121 
r
 = 
	`evdns_ªque°_ª•⁄d
(
ªq
, 0);

3122 i‡(
r
<0)

3123 
	`¥ötf
("eeek, couldn't sendÑeply.\n");

3124 
	}
}

3127 
	$log‚
(
is_w¨n
, c⁄° *
msg
) {

3128 (Ë
is_w¨n
;

3129 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

3130 
	}
}

3132 
	$maö
(
c
, **
v
) {

3133 
idx
;

3134 
ªvî£
 = 0, 
vîbo£
 = 1, 
£rvîã°
 = 0;

3135 i‡(
c
<2) {

3136 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-x] [-v] ho°«me\n", 
v
[0]);

3137 
	`Ârötf
(
°dîr
, "sy¡ax: %†[-£rvîã°]\n", 
v
[0]);

3140 
idx
 = 1;

3141 
idx
 < 
c
 && 
v
[idx][0] == '-') {

3142 i‡(!
	`°rcmp
(
v
[
idx
], "-x"))

3143 
ªvî£
 = 1;

3144 i‡(!
	`°rcmp
(
v
[
idx
], "-v"))

3145 
vîbo£
 = 1;

3146 i‡(!
	`°rcmp
(
v
[
idx
], "-servertest"))

3147 
£rvîã°
 = 1;

3149 
	`Ârötf
(
°dîr
, "Unknow¿›ti⁄ %s\n", 
v
[
idx
]);

3150 ++
idx
;

3152 
	`evít_öô
();

3153 i‡(
vîbo£
)

3154 
	`evdns_£t_log_‚
(
log‚
);

3155 
	`evdns_ªsﬁv_c⁄f_∑r£
(
DNS_OPTION_NAMESERVERS
, "/etc/resolv.conf");

3156 i‡(
£rvîã°
) {

3157 
sock
;

3158 
sockaddr_ö
 
my_addr
;

3159 
sock
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

3160 
	`evutû_make_sockë_n⁄blockög
(
sock
);

3161 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

3162 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(10053);

3163 
my_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3164 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr))<0) {

3165 
	`≥º‹
("bind");

3166 
	`exô
(1);

3168 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
evdns_£rvî_ˇŒback
, 
NULL
);

3170 ; 
idx
 < 
c
; ++idx) {

3171 i‡(
ªvî£
) {

3172 
ö_addr
 
addr
;

3173 i‡(!
	`öë_©⁄
(
v
[
idx
], &
addr
)) {

3174 
	`Ârötf
(
°dîr
, "SkùpögÇ⁄-IP %s\n", 
v
[
idx
]);

3177 
	`Ârötf
(
°dîr
, "ªsﬁvög %s...\n",
v
[
idx
]);

3178 
	`evdns_ªsﬁve_ªvî£
(&
addr
, 0, 
maö_ˇŒback
, 
v
[
idx
]);

3180 
	`Ârötf
(
°dîr
, "ªsﬁvög (fwdË%s...\n",
v
[
idx
]);

3181 
	`evdns_ªsﬁve_ùv4
(
v
[
idx
], 0, 
maö_ˇŒback
, v[idx]);

3184 
	`fÊush
(
°dout
);

3185 
	`evít_di•©ch
();

3187 
	}
}

	@evdns.h

160 #i‚de‡
EVENTDNS_H


161 
	#EVENTDNS_H


	)

163 #ifde‡
__˝lu•lus


168 
	~<evutû.h
>

171 
	#DNS_ERR_NONE
 0

	)

173 
	#DNS_ERR_FORMAT
 1

	)

176 
	#DNS_ERR_SERVERFAILED
 2

	)

178 
	#DNS_ERR_NOTEXIST
 3

	)

180 
	#DNS_ERR_NOTIMPL
 4

	)

183 
	#DNS_ERR_REFUSED
 5

	)

185 
	#DNS_ERR_TRUNCATED
 65

	)

187 
	#DNS_ERR_UNKNOWN
 66

	)

189 
	#DNS_ERR_TIMEOUT
 67

	)

191 
	#DNS_ERR_SHUTDOWN
 68

	)

193 
	#DNS_IPv4_A
 1

	)

194 
	#DNS_PTR
 2

	)

195 
	#DNS_IPv6_AAAA
 3

	)

197 
	#DNS_QUERY_NO_SEARCH
 1

	)

199 
	#DNS_OPTION_SEARCH
 1

	)

200 
	#DNS_OPTION_NAMESERVERS
 2

	)

201 
	#DNS_OPTION_MISC
 4

	)

202 
	#DNS_OPTIONS_ALL
 7

	)

211 (*
evdns_ˇŒback_ty≥
Ë(
	tªsu…
, 
	tty≥
, 
	tcou¡
, 
	tâl
, *
	taddªs£s
, *
	t¨g
);

223 
evdns_öô
();

237 
evdns_shutdown
(
Áû_ªque°s
);

246 c⁄° *
evdns_îr_to_°rög
(
îr
);

259 
evdns_«me£rvî_add
(
addªss
);

273 
evdns_cou¡_«me£rvîs
();

284 
evdns_˛ór_«me£rvîs_™d_su•íd
();

296 
evdns_ªsume
();

308 
evdns_«me£rvî_ù_add
(c⁄° *
ù_as_°rög
);

321 
evdns_ªsﬁve_ùv4
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

334 
evdns_ªsﬁve_ùv6
(c⁄° *
«me
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

336 
ö_addr
;

337 
ö6_addr
;

349 
evdns_ªsﬁve_ªvî£
(c⁄° 
ö_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

362 
evdns_ªsﬁve_ªvî£_ùv6
(c⁄° 
ö6_addr
 *
ö
, 
Êags
, 
evdns_ˇŒback_ty≥
 
ˇŒback
, *
±r
);

377 
evdns_£t_›ti⁄
(c⁄° *
›ti⁄
, c⁄° *
vÆ
, 
Êags
);

401 
evdns_ªsﬁv_c⁄f_∑r£
(
Êags
, c⁄° *c⁄° 
fûíame
);

414 #ifde‡
WIN32


415 
evdns_c⁄fig_wödows_«me£rvîs
();

422 
evdns_£¨ch_˛ór
();

430 
evdns_£¨ch_add
(c⁄° *
domaö
);

441 
evdns_£¨ch_ndŸs_£t
(c⁄° 
ndŸs
);

449 (*
evdns_debug_log_‚_ty≥
)(
	tis_w¨nög
, c⁄° *
	tmsg
);

457 
evdns_£t_log_‚
(
evdns_debug_log_‚_ty≥
 
‚
);

465 
evdns_£t_å™ß˘i⁄_id_‚
(
ev_uöt16_t
 (*
‚
)());

467 
	#DNS_NO_SEARCH
 1

	)

473 
	sevdns_£rvî_ªque°
 {

474 
Êags
;

475 
nque°i⁄s
;

476 
evdns_£rvî_que°i⁄
 **
que°i⁄s
;

478 
	sevdns_£rvî_que°i⁄
 {

479 
ty≥
;

480 #ifde‡
__˝lu•lus


481 
dns_que°i⁄_˛ass
;

486 
˛ass
;

487 
	#dns_que°i⁄_˛ass
 
˛ass


	)

489 
«me
[1];

491 (*
evdns_ªque°_ˇŒback_‚_ty≥
)(
	tevdns_£rvî_ªque°
 *, *);

492 
	#EVDNS_ANSWER_SECTION
 0

	)

493 
	#EVDNS_AUTHORITY_SECTION
 1

	)

494 
	#EVDNS_ADDITIONAL_SECTION
 2

	)

496 
	#EVDNS_TYPE_A
 1

	)

497 
	#EVDNS_TYPE_NS
 2

	)

498 
	#EVDNS_TYPE_CNAME
 5

	)

499 
	#EVDNS_TYPE_SOA
 6

	)

500 
	#EVDNS_TYPE_PTR
 12

	)

501 
	#EVDNS_TYPE_MX
 15

	)

502 
	#EVDNS_TYPE_TXT
 16

	)

503 
	#EVDNS_TYPE_AAAA
 28

	)

505 
	#EVDNS_QTYPE_AXFR
 252

	)

506 
	#EVDNS_QTYPE_ALL
 255

	)

508 
	#EVDNS_CLASS_INET
 1

	)

510 
evdns_£rvî_p‹t
 *
evdns_add_£rvî_p‹t
(
sockë
, 
is_t˝
, 
evdns_ªque°_ˇŒback_‚_ty≥
 
ˇŒback
, *
u£r_d©a
);

511 
evdns_˛o£_£rvî_p‹t
(
evdns_£rvî_p‹t
 *
p‹t
);

513 
evdns_£rvî_ªque°_add_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
£˘i⁄
, c⁄° *
«me
, 
ty≥
, 
dns_˛ass
, 
âl
, 
d©Æí
, 
is_«me
, c⁄° *
d©a
);

514 
evdns_£rvî_ªque°_add_a_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

515 
evdns_£rvî_ªque°_add_ØØ_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, 
n
, *
addrs
, 
âl
);

516 
evdns_£rvî_ªque°_add_±r_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, 
ö_addr
 *
ö
, c⁄° *
öaddr_«me
, c⁄° *
ho°«me
, 
âl
);

517 
evdns_£rvî_ªque°_add_˙ame_ª∂y
(
evdns_£rvî_ªque°
 *
ªq
, c⁄° *
«me
, c⁄° *
˙ame
, 
âl
);

519 
evdns_£rvî_ªque°_ª•⁄d
(
evdns_£rvî_ªque°
 *
ªq
, 
îr
);

520 
evdns_£rvî_ªque°_dr›
(
evdns_£rvî_ªque°
 *
ªq
);

521 
sockaddr
;

522 
evdns_£rvî_ªque°_gë_ªque°ög_addr
(
evdns_£rvî_ªque°
 *
_ªq
, 
sockaddr
 *
ß
, 
addr_Àn
);

524 #ifde‡
__˝lu•lus


	@event-internal.h

27 #i‚de‡
_EVENT_INTERNAL_H_


28 
	#_EVENT_INTERNAL_H_


	)

30 #ifde‡
__˝lu•lus


34 
	~"c⁄fig.h
"

35 
	~"mö_hóp.h
"

36 
	~"evsig«l.h
"

38 
	sevít›
 {

39 c⁄° *
«me
;

40 *(*
öô
)(
evít_ba£
 *);

41 (*
add
)(*, 
evít
 *);

42 (*
dñ
)(*, 
evít
 *);

43 (*
di•©ch
)(
evít_ba£
 *, *, 
timevÆ
 *);

44 (*
dóŒoc
)(
evít_ba£
 *, *);

46 
√ed_ªöô
;

49 
	sevít_ba£
 {

50 c⁄° 
evít›
 *
ev£l
;

51 *
evba£
;

52 
evít_cou¡
;

53 
evít_cou¡_a˘ive
;

55 
evít_gŸãrm
;

56 
evít_bªak
;

64 
evít_li°
 **
a˘ivequeues
;

65 
«˘ivequeues
;

68 
evsig«l_öfo
 
sig
;

70 
evít_li°
 
evítqueue
;

71 
timevÆ
 
evít_tv
;

73 
mö_hóp
 
timehóp
;

75 
timevÆ
 
tv_ˇche
;

79 #i‚de‡
HAVE_TAILQFOREACH


80 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

81 
	#TAILQ_END
(
hód
Ë
NULL


	)

82 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

83 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

84 (
v¨
Ë
	`TAILQ_FIRST
(
hód
); \

85 (
v¨
Ë!
	`TAILQ_END
(
hód
); \

86 (
v¨
Ë
	`TAILQ_NEXT
(v¨, 
fõld
))

	)

87 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

88 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

89 (
ñm
)->
fõld
.
tqe_√xt
 = (
li°ñm
); \

90 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

91 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &(
ñm
)->fõld.
tqe_√xt
; \

92 } 0)

	)

95 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
,

96 (*
‚
)());

97 
_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
);

100 c⁄° *
evutû_gëív
(c⁄° *
v¨«me
);

102 #ifde‡
__˝lu•lus


	@event.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wödows.h
>

34 #unde‡
WIN32_LEAN_AND_MEAN


36 
	~<sys/ty≥s.h
>

37 #ifde‡
HAVE_SYS_TIME_H


38 
	~<sys/time.h
>

40 
	~<sys/_libevít_time.h
>

42 
	~<sys/queue.h
>

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 #i‚de‡
WIN32


46 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<sig«l.h
>

50 
	~<°rög.h
>

51 
	~<as£π.h
>

52 
	~<time.h
>

54 
	~"evít.h
"

55 
	~"evít-öã∫Æ.h
"

56 
	~"evutû.h
"

57 
	~"log.h
"

59 #ifde‡
HAVE_EVENT_PORTS


60 c⁄° 
evít›
 
evp‹t›s
;

62 #ifde‡
HAVE_SELECT


63 c⁄° 
evít›
 
£À˘›s
;

65 #ifde‡
HAVE_POLL


66 c⁄° 
evít›
 
pﬁl›s
;

68 #ifde‡
HAVE_EPOLL


69 c⁄° 
evít›
 
ïﬁl›s
;

71 #ifde‡
HAVE_WORKING_KQUEUE


72 c⁄° 
evít›
 
kq›s
;

74 #ifde‡
HAVE_DEVPOLL


75 c⁄° 
evít›
 
devpﬁl›s
;

77 #ifde‡
WIN32


78 c⁄° 
evít›
 
wö32›s
;

83 c⁄° 
evít›
 *
	gevít›s
[] = {

84 #ifde‡
HAVE_EVENT_PORTS


85 &
evp‹t›s
,

87 #ifde‡
HAVE_WORKING_KQUEUE


88 &
kq›s
,

90 #ifde‡
HAVE_EPOLL


91 &
ïﬁl›s
,

93 #ifde‡
HAVE_DEVPOLL


94 &
devpﬁl›s
,

96 #ifde‡
HAVE_POLL


97 &
pﬁl›s
,

99 #ifde‡
HAVE_SELECT


100 &
£À˘›s
,

102 #ifde‡
WIN32


103 &
wö32›s
,

105 
NULL


109 
evít_ba£
 *
	gcuºít_ba£
 = 
NULL
;

110 
evít_ba£
 *
evsig«l_ba£
;

111 
	gu£_m⁄Ÿ⁄ic
;

114 
evít_queue_ö£π
(
evít_ba£
 *, 
evít
 *, );

115 
evít_queue_ªmove
(
evít_ba£
 *, 
evít
 *, );

116 
evít_havìvíts
(
evít_ba£
 *);

118 
evít_¥o˚ss_a˘ive
(
evít_ba£
 *);

120 
timeout_√xt
(
evít_ba£
 *, 
timevÆ
 **);

121 
timeout_¥o˚ss
(
evít_ba£
 *);

122 
timeout_c‹ª˘
(
evít_ba£
 *, 
timevÆ
 *);

128 
	$dëe˘_m⁄Ÿ⁄ic
()

130 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

131 
time•ec
 
ts
;

133 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == 0)

134 
u£_m⁄Ÿ⁄ic
 = 1;

136 
	}
}

139 
	$gëtime
(
evít_ba£
 *
ba£
, 
timevÆ
 *
ç
)

141 i‡(
ba£
->
tv_ˇche
.
tv_£c
) {

142 *
ç
 = 
ba£
->
tv_ˇche
;

146 #i‡
	`deföed
(
HAVE_CLOCK_GETTIME
Ë&& deföed(
CLOCK_MONOTONIC
)

147 i‡(
u£_m⁄Ÿ⁄ic
) {

148 
time•ec
 
ts
;

150 i‡(
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
) == -1)

153 
ç
->
tv_£c
 = 
ts
.tv_sec;

154 
ç
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

159  (
	`evutû_gëtimeofday
(
ç
, 
NULL
));

160 
	}
}

165 
evít_ba£
 *

166 
	$evít_öô
()

168 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

170 i‡(
ba£
 !
NULL
)

171 
cuºít_ba£
 = 
ba£
;

173  (
ba£
);

174 
	}
}

179 
evít_ba£
 *

180 
	$evít_ba£_√w
()

182 
i
;

183 
evít_ba£
 *
ba£
;

185 i‡((
ba£
 = 
	`ˇŒoc
(1, (
evít_ba£
))Ë=
NULL
)

186 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

188 
	`dëe˘_m⁄Ÿ⁄ic
();

189 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

191 
	`mö_hóp_˘‹
(&
ba£
->
timehóp
);

192 
	`TAILQ_INIT
(&
ba£
->
evítqueue
);

195 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

196 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

202 
ba£
->
evba£
 = 
NULL
;

203 
i
 = 0; 
evít›s
[i] && !
ba£
->
evba£
; i++) {

204 
ba£
->
ev£l
 = 
evít›s
[
i
];

206 
ba£
->
evba£
 = ba£->
ev£l
->
	`öô
(base);

209 i‡(
ba£
->
evba£
 =
NULL
)

210 
	`evít_îrx
(1, "%s:Çÿevíàmech™ismávaûabÀ", 
__func__
);

212 i‡(
	`evutû_gëív
("EVENT_SHOW_METHOD"))

213 
	`evít_msgx
("libevent using: %s\n",

214 
ba£
->
ev£l
->
«me
);

223 
	`evít_ba£_¥i‹ôy_öô
(
ba£
, 1);

225  (
ba£
);

226 
	}
}

229 
	$evít_ba£_‰ì
(
evít_ba£
 *
ba£
)

231 
i
, 
n_dñëed
=0;

232 
evít
 *
ev
;

234 i‡(
ba£
 =
NULL
 && 
cuºít_ba£
)

235 
ba£
 = 
cuºít_ba£
;

236 i‡(
ba£
 =
cuºít_ba£
)

237 
cuºít_ba£
 = 
NULL
;

240 
	`as£π
(
ba£
);

242 
ev
 = 
	`TAILQ_FIRST
(&
ba£
->
evítqueue
);Év; ) {

243 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_√xt
);

244 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

245 
	`evít_dñ
(
ev
);

246 ++
n_dñëed
;

248 
ev
 = 
√xt
;

250 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë!
NULL
) {

251 
	`evít_dñ
(
ev
);

252 ++
n_dñëed
;

255 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

256 
ev
 = 
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]);Év; ) {

257 
evít
 *
√xt
 = 
	`TAILQ_NEXT
(
ev
, 
ev_a˘ive_√xt
);

258 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)) {

259 
	`evít_dñ
(
ev
);

260 ++
n_dñëed
;

262 
ev
 = 
√xt
;

266 i‡(
n_dñëed
)

267 
	`evít_debug
(("%s: %dÉvents were still set in base",

268 
__func__
, 
n_dñëed
));

270 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

271 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

273 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

274 
	`as£π
(
	`TAILQ_EMPTY
(
ba£
->
a˘ivequeues
[
i
]));

276 
	`as£π
(
	`mö_hóp_em±y
(&
ba£
->
timehóp
));

277 
	`mö_hóp_dt‹
(&
ba£
->
timehóp
);

279 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i)

280 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

281 
	`‰ì
(
ba£
->
a˘ivequeues
);

283 
	`as£π
(
	`TAILQ_EMPTY
(&
ba£
->
evítqueue
));

285 
	`‰ì
(
ba£
);

286 
	}
}

290 
	$evít_ªöô
(
evít_ba£
 *
ba£
)

292 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

293 *
evba£
 = 
ba£
->evbase;

294 
ªs
 = 0;

295 
evít
 *
ev
;

298 i‡(!
ev£l
->
√ed_ªöô
)

302 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

305 
	`evít_queue_ªmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

306 
EVLIST_INSERTED
);

307 i‡(
ba£
->
sig
.
ev_sig«l
.
ev_Êags
 & 
EVLIST_ACTIVE
)

308 
	`evít_queue_ªmove
(
ba£
, &ba£->
sig
.
ev_sig«l
,

309 
EVLIST_ACTIVE
);

310 
ba£
->
sig
.
ev_sig«l_added
 = 0;

313 i‡(
ba£
->
ev£l
->
dóŒoc
 !
NULL
)

314 
ba£
->
ev£l
->
	`dóŒoc
(ba£, ba£->
evba£
);

315 
evba£
 = 
ba£
->evba£ = 
ev£l
->
	`öô
(base);

316 i‡(
ba£
->
evba£
 =
NULL
)

317 
	`evít_îrx
(1, "%s: couldÇotÑeinitializeÉvent mechanism",

318 
__func__
);

320 
	`TAILQ_FOREACH
(
ev
, &
ba£
->
evítqueue
, 
ev_√xt
) {

321 i‡(
ev£l
->
	`add
(
evba£
, 
ev
) == -1)

322 
ªs
 = -1;

325  (
ªs
);

326 
	}
}

329 
	$evít_¥i‹ôy_öô
(
≈ri‹ôõs
)

331  
	`evít_ba£_¥i‹ôy_öô
(
cuºít_ba£
, 
≈ri‹ôõs
);

332 
	}
}

335 
	$evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *
ba£
, 
≈ri‹ôõs
)

337 
i
;

339 i‡(
ba£
->
evít_cou¡_a˘ive
)

342 i‡(
ba£
->
«˘ivequeues
 && 
≈ri‹ôõs
 != base->nactivequeues) {

343 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

344 
	`‰ì
(
ba£
->
a˘ivequeues
[
i
]);

346 
	`‰ì
(
ba£
->
a˘ivequeues
);

350 
ba£
->
«˘ivequeues
 = 
≈ri‹ôõs
;

351 
ba£
->
a˘ivequeues
 = (
evít_li°
 **)

352 
	`ˇŒoc
(
ba£
->
«˘ivequeues
, (
evít_li°
 *));

353 i‡(
ba£
->
a˘ivequeues
 =
NULL
)

354 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

356 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

357 
ba£
->
a˘ivequeues
[
i
] = 
	`mÆloc
((
evít_li°
));

358 i‡(
ba£
->
a˘ivequeues
[
i
] =
NULL
)

359 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

360 
	`TAILQ_INIT
(
ba£
->
a˘ivequeues
[
i
]);

364 
	}
}

367 
	$evít_havìvíts
(
evít_ba£
 *
ba£
)

369  (
ba£
->
evít_cou¡
 > 0);

370 
	}
}

379 
	$evít_¥o˚ss_a˘ive
(
evít_ba£
 *
ba£
)

381 
evít
 *
ev
;

382 
evít_li°
 *
a˘iveq
 = 
NULL
;

383 
i
;

384 
nˇŒs
;

390 
i
 = 0; i < 
ba£
->
«˘ivequeues
; ++i) {

391 i‡(
	`TAILQ_FIRST
(
ba£
->
a˘ivequeues
[
i
]Ë!
NULL
) {

392 
a˘iveq
 = 
ba£
->
a˘ivequeues
[
i
];

397 
	`as£π
(
a˘iveq
 !
NULL
);

402 
ev
 = 
	`TAILQ_FIRST
(
a˘iveq
);Év;Év = TAILQ_FIRST(activeq)) {

403 i‡(
ev
->
ev_evíts
 & 
EV_PERSIST
)

404 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

406 
	`evít_dñ
(
ev
);

409 
nˇŒs
 = 
ev
->
ev_nˇŒs
;

410 
ev
->
ev_≤ˇŒs
 = &
nˇŒs
;

413 
nˇŒs
) {

414 
nˇŒs
--;

415 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

416 (*
ev
->
ev_ˇŒback
)((Îv->
ev_fd
,Év->
ev_ªs
,Év->
ev_¨g
);

417 i‡(
ba£
->
evít_bªak
)

421 
	}
}

428 
	$evít_di•©ch
()

430  (
	`evít_lo›
(0));

431 
	}
}

434 
	$evít_ba£_di•©ch
(
evít_ba£
 *event_base)

436  (
	`evít_ba£_lo›
(
evít_ba£
, 0));

437 
	}
}

440 
	$evít_ba£_gë_mëhod
(
evít_ba£
 *
ba£
)

442 
	`as£π
(
ba£
);

443  (
ba£
->
ev£l
->
«me
);

444 
	}
}

447 
	$evít_lo›exô_cb
(
fd
, 
wh©
, *
¨g
)

449 
evít_ba£
 *
ba£
 = 
¨g
;

450 
ba£
->
evít_gŸãrm
 = 1;

451 
	}
}

455 
	$evít_lo›exô
(c⁄° 
timevÆ
 *
tv
)

457  (
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

458 
cuºít_ba£
, 
tv
));

459 
	}
}

462 
	$evít_ba£_lo›exô
(
evít_ba£
 *evít_ba£, c⁄° 
timevÆ
 *
tv
)

464  (
	`evít_ba£_⁄˚
(
evít_ba£
, -1, 
EV_TIMEOUT
, 
evít_lo›exô_cb
,

465 
evít_ba£
, 
tv
));

466 
	}
}

470 
	$evít_lo›bªak
()

472  (
	`evít_ba£_lo›bªak
(
cuºít_ba£
));

473 
	}
}

476 
	$evít_ba£_lo›bªak
(
evít_ba£
 *event_base)

478 i‡(
evít_ba£
 =
NULL
)

481 
evít_ba£
->
evít_bªak
 = 1;

483 
	}
}

490 
	$evít_lo›
(
Êags
)

492  
	`evít_ba£_lo›
(
cuºít_ba£
, 
Êags
);

493 
	}
}

496 
	$evít_ba£_lo›
(
evít_ba£
 *
ba£
, 
Êags
)

498 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

499 *
evba£
 = 
ba£
->evbase;

500 
timevÆ
 
tv
;

501 
timevÆ
 *
tv_p
;

502 
ªs
, 
d⁄e
;

505 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

507 i‡(
ba£
->
sig
.
ev_sig«l_added
)

508 
evsig«l_ba£
 = 
ba£
;

509 
d⁄e
 = 0;

510 !
d⁄e
) {

512 i‡(
ba£
->
evít_gŸãrm
) {

513 
ba£
->
evít_gŸãrm
 = 0;

517 i‡(
ba£
->
evít_bªak
) {

518 
ba£
->
evít_bªak
 = 0;

525 
	`timeout_c‹ª˘
(
ba£
, &
tv
);

527 
tv_p
 = &
tv
;

532 i‡(!
ba£
->
evít_cou¡_a˘ive
 && !(
Êags
 & 
EVLOOP_NONBLOCK
)) {

534 
	`timeout_√xt
(
ba£
, &
tv_p
);

547 
	`evutû_timî˛ór
(&
tv
);

551 i‡(!
	`evít_havìvíts
(
ba£
)) {

552 
	`evít_debug
(("%s:Çÿevít†ªgi°îed.", 
__func__
));

557 
	`gëtime
(
ba£
, &ba£->
evít_tv
);

560 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

562 
ªs
 = 
ev£l
->
	`di•©ch
(
ba£
, 
evba£
, 
tv_p
);

564 i‡(
ªs
 == -1)

566 
	`gëtime
(
ba£
, &ba£->
tv_ˇche
);

569 
	`timeout_¥o˚ss
(
ba£
);

572 i‡(
ba£
->
evít_cou¡_a˘ive
) {

573 
	`evít_¥o˚ss_a˘ive
(
ba£
);

574 i‡(!
ba£
->
evít_cou¡_a˘ive
 && (
Êags
 & 
EVLOOP_ONCE
))

575 
d⁄e
 = 1;

576 } i‡(
Êags
 & 
EVLOOP_NONBLOCK
)

577 
d⁄e
 = 1;

581 
ba£
->
tv_ˇche
.
tv_£c
 = 0;

583 
	`evít_debug
(("%s:áskedÅÿãrmö©êlo›.", 
__func__
));

585 
	}
}

589 
	sevít_⁄˚
 {

590 
evít
 
	mev
;

592 (*
	mcb
)(, , *);

593 *
	m¨g
;

599 
	$evít_⁄˚_cb
(
fd
, 
evíts
, *
¨g
)

601 
evít_⁄˚
 *
e⁄˚
 = 
¨g
;

603 (*
e⁄˚
->
cb
)(
fd
, 
evíts
,É⁄˚->
¨g
);

604 
	`‰ì
(
e⁄˚
);

605 
	}
}

609 
evít_⁄˚
(
fd
, 
evíts
,

610 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

612  
	`evít_ba£_⁄˚
(
cuºít_ba£
, 
fd
, 
evíts
, 
ˇŒback
, 
¨g
, 
tv
);

613 
	}
}

617 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

618 (*
ˇŒback
)(, , *), *
¨g
, c⁄° 
timevÆ
 *
tv
)

620 
evít_⁄˚
 *
e⁄˚
;

621 
timevÆ
 
ëv
;

622 
ªs
;

625 i‡(
evíts
 & 
EV_SIGNAL
)

628 i‡((
e⁄˚
 = 
	`ˇŒoc
(1, (
evít_⁄˚
))Ë=
NULL
)

631 
e⁄˚
->
cb
 = 
ˇŒback
;

632 
e⁄˚
->
¨g
 =árg;

634 i‡(
evíts
 =
EV_TIMEOUT
) {

635 i‡(
tv
 =
NULL
) {

636 
	`evutû_timî˛ór
(&
ëv
);

637 
tv
 = &
ëv
;

640 
	`evtimî_£t
(&
e⁄˚
->
ev
, 
evít_⁄˚_cb
,Éonce);

641 } i‡(
evíts
 & (
EV_READ
|
EV_WRITE
)) {

642 
evíts
 &
EV_READ
|
EV_WRITE
;

644 
	`evít_£t
(&
e⁄˚
->
ev
, 
fd
, 
evíts
, 
evít_⁄˚_cb
,Éonce);

647 
	`‰ì
(
e⁄˚
);

651 
ªs
 = 
	`evít_ba£_£t
(
ba£
, &
e⁄˚
->
ev
);

652 i‡(
ªs
 == 0)

653 
ªs
 = 
	`evít_add
(&
e⁄˚
->
ev
, 
tv
);

654 i‡(
ªs
 != 0) {

655 
	`‰ì
(
e⁄˚
);

656  (
ªs
);

660 
	}
}

673 
evít_£t
(
evít
 *
ev
, 
fd
, 
evíts
,

674 (*
ˇŒback
)(, , *), *
¨g
)

677 
ev
->
ev_ba£
 = 
cuºít_ba£
;

679 
ev
->
ev_ˇŒback
 = 
ˇŒback
;

680 
ev
->
ev_¨g
 = 
¨g
;

681 
ev
->
ev_fd
 = 
fd
;

682 
ev
->
ev_evíts
 = 
evíts
;

683 
ev
->
ev_ªs
 = 0;

684 
ev
->
ev_Êags
 = 
EVLIST_INIT
;

685 
ev
->
ev_nˇŒs
 = 0;

686 
ev
->
ev_≤ˇŒs
 = 
NULL
;

688 
	`mö_hóp_ñem_öô
(
ev
);

691 if(
cuºít_ba£
)

692 
ev
->
ev_¥i
 = 
cuºít_ba£
->
«˘ivequeues
/2;

693 
	}
}

696 
	$evít_ba£_£t
(
evít_ba£
 *
ba£
, 
evít
 *
ev
)

699 i‡(
ev
->
ev_Êags
 !
EVLIST_INIT
)

702 
ev
->
ev_ba£
 = 
ba£
;

703 
ev
->
ev_¥i
 = 
ba£
->
«˘ivequeues
/2;

706 
	}
}

714 
	$evít_¥i‹ôy_£t
(
evít
 *
ev
, 
¥i
)

716 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

718 i‡(
¥i
 < 0 ||Örò>
ev
->
ev_ba£
->
«˘ivequeues
)

721 
ev
->
ev_¥i
 = 
¥i
;

724 
	}
}

731 
	$evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
)

733 
timevÆ
 
now
, 
ªs
;

734 
Êags
 = 0;

736 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
)

737 
Êags
 |(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
));

738 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

739 
Êags
 |
ev
->
ev_ªs
;

740 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

741 
Êags
 |
EV_TIMEOUT
;

743 
evít
 &(
EV_TIMEOUT
|
EV_READ
|
EV_WRITE
|
EV_SIGNAL
);

746 i‡(
tv
 !
NULL
 && (
Êags
 & 
evít
 & 
EV_TIMEOUT
)) {

747 
	`gëtime
(
ev
->
ev_ba£
, &
now
);

748 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, &
ªs
);

750 
	`evutû_gëtimeofday
(&
now
, 
NULL
);

751 
	`evutû_timîadd
(&
now
, &
ªs
, 
tv
);

754  (
Êags
 & 
evít
);

755 
	}
}

764 
	$evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
tv
)

766 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

767 c⁄° 
evít›
 *
ev£l
 = 
ba£
->evsel;

768 *
evba£
 = 
ba£
->evbase;

769 
ªs
 = 0;

771 
	`evít_debug
((

773 
ev
,

774 
ev
->
ev_evíts
 & 
EV_READ
 ? "EV_READ " : " ",

775 
ev
->
ev_evíts
 & 
EV_WRITE
 ? "EV_WRITE " : " ",

776 
tv
 ? "EV_TIMEOUT " : " ",

777 
ev
->
ev_ˇŒback
));

779 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

790 i‡(
tv
 !
NULL
 && !(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)) {

791 i‡(
	`mö_hóp_ª£rve
(&
ba£
->
timehóp
,

792 1 + 
	`mö_hóp_size
(&
ba£
->
timehóp
)) == -1)

802 i‡((
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
|
EV_SIGNAL
)) &&

803 !(
ev
->
ev_Êags
 & (
EVLIST_INSERTED
|
EVLIST_ACTIVE
))) {

804 
ªs
 = 
ev£l
->
	`add
(
evba£
, 
ev
);

805 i‡(
ªs
 != -1)

806 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

816 i‡(
ªs
 !-1 && 
tv
 !
NULL
) {

817 
timevÆ
 
now
;

826 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

827 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

836 i‡((
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) &&

837 (
ev
->
ev_ªs
 & 
EV_TIMEOUT
)) {

841 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

843 *
ev
->
ev_≤ˇŒs
 = 0;

846 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

849 
	`gëtime
(
ba£
, &
now
);

850 
	`evutû_timîadd
(&
now
, 
tv
, &
ev
->
ev_timeout
);

852 
	`evít_debug
((

854 
tv
->
tv_£c
, 
ev
->
ev_ˇŒback
));

856 
	`evít_queue_ö£π
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

859  (
ªs
);

860 
	}
}

863 
	$evít_dñ
(
evít
 *
ev
)

865 
evít_ba£
 *
ba£
;

866 c⁄° 
evít›
 *
ev£l
;

867 *
evba£
;

869 
	`evít_debug
(("event_del: %p, callback %p",

870 
ev
,Év->
ev_ˇŒback
));

873 i‡(
ev
->
ev_ba£
 =
NULL
)

876 
ba£
 = 
ev
->
ev_ba£
;

877 
ev£l
 = 
ba£
->evsel;

878 
evba£
 = 
ba£
->evbase;

880 
	`as£π
(!(
ev
->
ev_Êags
 & ~
EVLIST_ALL
));

883 i‡(
ev
->
ev_nˇŒs
 &&Év->
ev_≤ˇŒs
) {

885 *
ev
->
ev_≤ˇŒs
 = 0;

888 i‡(
ev
->
ev_Êags
 & 
EVLIST_TIMEOUT
)

889 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_TIMEOUT
);

891 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
)

892 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_ACTIVE
);

894 i‡(
ev
->
ev_Êags
 & 
EVLIST_INSERTED
) {

895 
	`evít_queue_ªmove
(
ba£
, 
ev
, 
EVLIST_INSERTED
);

896  (
ev£l
->
	`dñ
(
evba£
, 
ev
));

900 
	}
}

903 
	$evít_a˘ive
(
evít
 *
ev
, 
ªs
, 
nˇŒs
)

906 i‡(
ev
->
ev_Êags
 & 
EVLIST_ACTIVE
) {

907 
ev
->
ev_ªs
 |
ªs
;

911 
ev
->
ev_ªs
 = 
ªs
;

912 
ev
->
ev_nˇŒs
 = 
nˇŒs
;

913 
ev
->
ev_≤ˇŒs
 = 
NULL
;

914 
	`evít_queue_ö£π
(
ev
->
ev_ba£
,Év, 
EVLIST_ACTIVE
);

915 
	}
}

918 
	$timeout_√xt
(
evít_ba£
 *
ba£
, 
timevÆ
 **
tv_p
)

920 
timevÆ
 
now
;

921 
evít
 *
ev
;

922 
timevÆ
 *
tv
 = *
tv_p
;

925 i‡((
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
)Ë=
NULL
) {

927 *
tv_p
 = 
NULL
;

931 i‡(
	`gëtime
(
ba£
, &
now
) == -1)

940 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, <=)) {

941 
	`evutû_timî˛ór
(
tv
);

949 
	`evutû_timîsub
(&
ev
->
ev_timeout
, &
now
, 
tv
);

951 
	`as£π
(
tv
->
tv_£c
 >= 0);

952 
	`as£π
(
tv
->
tv_u£c
 >= 0);

954 
	`evít_debug
(("timeout_√xt: i¿%ld sec⁄ds", 
tv
->
tv_£c
));

956 
	}
}

965 
	$timeout_c‹ª˘
(
evít_ba£
 *
ba£
, 
timevÆ
 *
tv
)

967 
evít
 **
≥v
;

968 
size
;

969 
timevÆ
 
off
;

971 i‡(
u£_m⁄Ÿ⁄ic
)

975 
	`gëtime
(
ba£
, 
tv
);

976 i‡(
	`evutû_timîcmp
(
tv
, &
ba£
->
evít_tv
, >=)) {

977 
ba£
->
evít_tv
 = *
tv
;

981 
	`evít_debug
(("%s:Åime isÑunning backwards, corrected",

982 
__func__
));

983 
	`evutû_timîsub
(&
ba£
->
evít_tv
, 
tv
, &
off
);

989 
≥v
 = 
ba£
->
timehóp
.
p
;

990 
size
 = 
ba£
->
timehóp
.
n
;

991 ; 
size
-- > 0; ++
≥v
) {

992 
timevÆ
 *
ev_tv
 = &(**
≥v
).
ev_timeout
;

993 
	`evutû_timîsub
(
ev_tv
, &
off
,Év_tv);

996 
ba£
->
evít_tv
 = *
tv
;

997 
	}
}

1000 
	$timeout_¥o˚ss
(
evít_ba£
 *
ba£
)

1002 
timevÆ
 
now
;

1003 
evít
 *
ev
;

1005 i‡(
	`mö_hóp_em±y
(&
ba£
->
timehóp
))

1008 
	`gëtime
(
ba£
, &
now
);

1014 (
ev
 = 
	`mö_hóp_t›
(&
ba£
->
timehóp
))) {

1015 i‡(
	`evutû_timîcmp
(&
ev
->
ev_timeout
, &
now
, >))

1019 
	`evít_dñ
(
ev
);

1021 
	`evít_debug
(("timeout_process: call %p",

1022 
ev
->
ev_ˇŒback
));

1023 
	`evít_a˘ive
(
ev
, 
EV_TIMEOUT
, 1);

1025 
	}
}

1028 
	$evít_queue_ªmove
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

1030 i‡(!(
ev
->
ev_Êags
 & 
queue
))

1031 
	`evít_îrx
(1, "%s: %p(fd %dËnŸ o¿queuê%x", 
__func__
,

1032 
ev
,Év->
ev_fd
, 
queue
);

1034 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

1035 
ba£
->
evít_cou¡
--;

1037 
ev
->
ev_Êags
 &~
queue
;

1038 
queue
) {

1039 
EVLIST_INSERTED
:

1040 
	`TAILQ_REMOVE
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

1042 
EVLIST_ACTIVE
:

1043 
ba£
->
evít_cou¡_a˘ive
--;

1044 
	`TAILQ_REMOVE
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

1045 
ev
, 
ev_a˘ive_√xt
);

1047 
EVLIST_TIMEOUT
:

1048 
	`mö_hóp_îa£
(&
ba£
->
timehóp
, 
ev
);

1051 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

1053 
	}
}

1056 
	$evít_queue_ö£π
(
evít_ba£
 *
ba£
, 
evít
 *
ev
, 
queue
)

1058 i‡(
ev
->
ev_Êags
 & 
queue
) {

1060 i‡(
queue
 & 
EVLIST_ACTIVE
)

1063 
	`evít_îrx
(1, "%s: %p(fd %dËÆªady o¿queuê%x", 
__func__
,

1064 
ev
,Év->
ev_fd
, 
queue
);

1067 i‡(~
ev
->
ev_Êags
 & 
EVLIST_INTERNAL
)

1068 
ba£
->
evít_cou¡
++;

1070 
ev
->
ev_Êags
 |
queue
;

1071 
queue
) {

1072 
EVLIST_INSERTED
:

1073 
	`TAILQ_INSERT_TAIL
(&
ba£
->
evítqueue
, 
ev
, 
ev_√xt
);

1075 
EVLIST_ACTIVE
:

1076 
ba£
->
evít_cou¡_a˘ive
++;

1077 
	`TAILQ_INSERT_TAIL
(
ba£
->
a˘ivequeues
[
ev
->
ev_¥i
],

1078 
ev
,
ev_a˘ive_√xt
);

1080 
EVLIST_TIMEOUT
: {

1081 
	`mö_hóp_push
(&
ba£
->
timehóp
, 
ev
);

1085 
	`evít_îrx
(1, "%s: unknow¿queuê%x", 
__func__
, 
queue
);

1087 
	}
}

1092 
	$evít_gë_vîsi⁄
()

1094  (
VERSION
);

1095 
	}
}

1103 
	$evít_gë_mëhod
()

1105  (
cuºít_ba£
->
ev£l
->
«me
);

1106 
	}
}

	@event.h

27 #i‚de‡
_EVENT_H_


28 
	#_EVENT_H_


	)

158 #ifde‡
__˝lu•lus


162 
	~<evít-c⁄fig.h
>

163 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


164 
	~<sys/ty≥s.h
>

166 #ifde‡
_EVENT_HAVE_SYS_TIME_H


167 
	~<sys/time.h
>

169 #ifde‡
_EVENT_HAVE_STDINT_H


170 
	~<°döt.h
>

172 
	~<°d¨g.h
>

175 
	~<evutû.h
>

177 #ifde‡
WIN32


178 
	#WIN32_LEAN_AND_MEAN


	)

179 
	~<wödows.h
>

180 #unde‡
WIN32_LEAN_AND_MEAN


181 
	tu_ch¨
;

182 
	tu_sh‹t
;

185 
	#EVLIST_TIMEOUT
 0x01

	)

186 
	#EVLIST_INSERTED
 0x02

	)

187 
	#EVLIST_SIGNAL
 0x04

	)

188 
	#EVLIST_ACTIVE
 0x08

	)

189 
	#EVLIST_INTERNAL
 0x10

	)

190 
	#EVLIST_INIT
 0x80

	)

193 
	#EVLIST_ALL
 (0xf000 | 0x9f)

	)

195 
	#EV_TIMEOUT
 0x01

	)

196 
	#EV_READ
 0x02

	)

197 
	#EV_WRITE
 0x04

	)

198 
	#EV_SIGNAL
 0x08

	)

199 
	#EV_PERSIST
 0x10

	)

202 #i‚de‡
TAILQ_ENTRY


203 
	#_EVENT_DEFINED_TQENTRY


	)

204 
	#TAILQ_ENTRY
(
ty≥
) \

206 
ty≥
 *
tqe_√xt
; \

207 
ty≥
 **
tqe_¥ev
; \

208 }

	)

211 
evít_ba£
;

212 #i‚de‡
EVENT_NO_STRUCT


213 
	sevít
 {

214 
TAILQ_ENTRY
 (
evít
Ë
ev_√xt
;

215 
TAILQ_ENTRY
 (
evít
Ë
ev_a˘ive_√xt
;

216 
TAILQ_ENTRY
 (
evít
Ë
ev_sig«l_√xt
;

217 
mö_hóp_idx
;

219 
evít_ba£
 *
ev_ba£
;

221 
ev_fd
;

228 
ev_evíts
;

229 
ev_nˇŒs
;

230 *
ev_≤ˇŒs
;

232 
timevÆ
 
ev_timeout
;

235 
ev_¥i
;

237 (*
ev_ˇŒback
)(, , *
¨g
);

238 *
ev_¨g
;

240 
ev_ªs
;

246 
ev_Êags
;

249 
evít
;

252 
	#EVENT_SIGNAL
(
ev
Ë()”v)->
ev_fd


	)

253 
	#EVENT_FD
(
ev
Ë()”v)->
ev_fd


	)

259 
	sevkeyvÆ
 {

260 
TAILQ_ENTRY
(
evkeyvÆ
Ë
√xt
;

262 *
key
;

263 *
vÆue
;

266 #ifde‡
_EVENT_DEFINED_TQENTRY


267 #unde‡
TAILQ_ENTRY


268 
evít_li°
;

269 
evkeyvÆq
;

270 #unde‡
_EVENT_DEFINED_TQENTRY


272 
TAILQ_HEAD
 (
evít_li°
, 
evít
);

273 
TAILQ_HEAD
 (
evkeyvÆq
, 
evkeyvÆ
);

285 
evít_ba£
 *
evít_ba£_√w
();

296 
evít_ba£
 *
evít_öô
();

308 
evít_ªöô
(
evít_ba£
 *
ba£
);

319 
evít_di•©ch
();

328 
evít_ba£_di•©ch
(
evít_ba£
 *);

337 c⁄° *
evít_ba£_gë_mëhod
(
evít_ba£
 *);

348 
evít_ba£_‰ì
(
evít_ba£
 *);

351 
	#_EVENT_LOG_DEBUG
 0

	)

352 
	#_EVENT_LOG_MSG
 1

	)

353 
	#_EVENT_LOG_WARN
 2

	)

354 
	#_EVENT_LOG_ERR
 3

	)

355 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

363 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

371 
evít_ba£_£t
(
evít_ba£
 *, 
evít
 *);

377 
	#EVLOOP_ONCE
 0x01

	)

378 
	#EVLOOP_NONBLOCK
 0x02

	)

391 
evít_lo›
();

404 
evít_ba£_lo›
(
evít_ba£
 *, );

419 
evít_lo›exô
(c⁄° 
timevÆ
 *);

436 
evít_ba£_lo›exô
(
evít_ba£
 *, c⁄° 
timevÆ
 *);

450 
evít_lo›bªak
();

465 
evít_ba£_lo›bªak
(
evít_ba£
 *);

474 
	#evtimî_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

484 
	#evtimî_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

492 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

493 
	#evtimî_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

494 
	#evtimî_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

502 
	#timeout_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

512 
	#timeout_£t
(
ev
, 
cb
, 
¨g
Ë
	`evít_£t
”v, -1, 0, cb,árg)

	)

520 
	#timeout_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

522 
	#timeout_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_TIMEOUT
,Åv)

	)

523 
	#timeout_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

525 
	#sig«l_add
(
ev
, 
tv
Ë
	`evít_add
”v,Åv)

	)

526 
	#sig«l_£t
(
ev
, 
x
, 
cb
, 
¨g
) \

527 
	`evít_£t
(
ev
, 
x
, 
EV_SIGNAL
|
EV_PERSIST
, 
cb
, 
¨g
)

	)

528 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
”v)

	)

529 
	#sig«l_≥ndög
(
ev
, 
tv
Ë
	`evít_≥ndög
”v, 
EV_SIGNAL
,Åv)

	)

530 
	#sig«l_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

558 
evít_£t
(
evít
 *, , , (*)(, , *), *);

578 
evít_⁄˚
(, , (*)(, , *), *,

579 c⁄° 
timevÆ
 *);

600 
evít_ba£_⁄˚
(
evít_ba£
 *
ba£
, 
fd
, 
evíts
,

601 (*
ˇŒback
)(, , *), *
¨g
,

602 c⁄° 
timevÆ
 *
timeout
);

623 
evít_add
(
evít
 *
ev
, c⁄° 
timevÆ
 *
timeout
);

637 
evít_dñ
(
evít
 *);

639 
evít_a˘ive
(
evít
 *, , );

653 
evít_≥ndög
(
evít
 *
ev
, evít, 
timevÆ
 *
tv
);

666 #ifde‡
WIN32


667 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
 && (ev)->
ev_fd
 !()
INVALID_HANDLE_VALUE
)

	)

669 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

678 c⁄° *
evít_gë_vîsi⁄
();

686 c⁄° *
evít_gë_mëhod
();

709 
evít_¥i‹ôy_öô
();

722 
evít_ba£_¥i‹ôy_öô
(
evít_ba£
 *, );

733 
evít_¥i‹ôy_£t
(
evít
 *, );

738 
	sevbuf„r
 {

739 
u_ch¨
 *
buf„r
;

740 
u_ch¨
 *
‹ig_buf„r
;

742 
size_t
 
mißlign
;

743 
size_t
 
tŸÆÀn
;

744 
size_t
 
off
;

746 (*
cb
)(
evbuf„r
 *, 
size_t
, size_t, *);

747 *
cb¨g
;

751 
	#EVBUFFER_READ
 0x01

	)

752 
	#EVBUFFER_WRITE
 0x02

	)

753 
	#EVBUFFER_EOF
 0x10

	)

754 
	#EVBUFFER_ERROR
 0x20

	)

755 
	#EVBUFFER_TIMEOUT
 0x40

	)

757 
buf„ªvít
;

758 (*
evbuf„rcb
)(
	tbuf„ªvít
 *, *);

759 (*
evîr‹cb
)(
	tbuf„ªvít
 *, 
	twh©
, *);

761 
	sevít_w©îm¨k
 {

762 
size_t
 
low
;

763 
size_t
 
high
;

766 #i‚de‡
EVENT_NO_STRUCT


767 
	sbuf„ªvít
 {

768 
evít_ba£
 *
ev_ba£
;

770 
evít
 
ev_ªad
;

771 
evít
 
ev_wrôe
;

773 
evbuf„r
 *
öput
;

774 
evbuf„r
 *
ouçut
;

776 
evít_w©îm¨k
 
wm_ªad
;

777 
evít_w©îm¨k
 
wm_wrôe
;

779 
evbuf„rcb
 
ªadcb
;

780 
evbuf„rcb
 
wrôecb
;

781 
evîr‹cb
 
îr‹cb
;

782 *
cb¨g
;

784 
timeout_ªad
;

785 
timeout_wrôe
;

787 
íabÀd
;

825 
buf„ªvít
 *
buf„ªvít_√w
(
fd
,

826 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

837 
buf„ªvít_ba£_£t
(
evít_ba£
 *
ba£
, 
buf„ªvít
 *
bu„v
);

847 
buf„ªvít_¥i‹ôy_£t
(
buf„ªvít
 *
bu„v
, 
¥i
);

855 
buf„ªvít_‰ì
(
buf„ªvít
 *
bu„v
);

872 
buf„ªvít_£tcb
(
buf„ªvít
 *
bu„v
,

873 
evbuf„rcb
 
ªadcb
,Évbuf„rcb 
wrôecb
, 
evîr‹cb
 
îr‹cb
, *
cb¨g
);

881 
buf„ªvít_£tfd
(
buf„ªvít
 *
bu„v
, 
fd
);

896 
buf„ªvít_wrôe
(
buf„ªvít
 *
bu„v
,

897 c⁄° *
d©a
, 
size_t
 
size
);

909 
buf„ªvít_wrôe_buf„r
(
buf„ªvít
 *
bu„v
, 
evbuf„r
 *
buf
);

922 
size_t
 
buf„ªvít_ªad
(
buf„ªvít
 *
bu„v
, *
d©a
, size_à
size
);

932 
buf„ªvít_íabÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

943 
buf„ªvít_dißbÀ
(
buf„ªvít
 *
bu„v
, 
evít
);

953 
buf„ªvít_£âimeout
(
buf„ªvít
 *
bu„v
,

954 
timeout_ªad
, 
timeout_wrôe
);

973 
buf„ªvít_£tw©îm¨k
(
buf„ªvít
 *
bu„v
, 
evíts
,

974 
size_t
 
lowm¨k
, size_à
highm¨k
);

976 
	#EVBUFFER_LENGTH
(
x
Ë(x)->
off


977 
	#EVBUFFER_DATA
(
x
Ë(x)->
buf„r


978 
	#EVBUFFER_INPUT
(
x
Ë(x)->
öput


979 
	#EVBUFFER_OUTPUT
(
x
Ë(x)->
ouçut


980 

	)

988 
evbuf„r
 *
evbuf„r_√w
();

996 
evbuf„r_‰ì
(
evbuf„r
 *);

1008 
evbuf„r_ex∑nd
(
evbuf„r
 *, 
size_t
);

1018 
evbuf„r_add
(
evbuf„r
 *, c⁄° *, 
size_t
);

1030 
evbuf„r_ªmove
(
evbuf„r
 *, *, 
size_t
);

1042 *
evbuf„r_ªadlöe
(
evbuf„r
 *);

1055 
evbuf„r_add_buf„r
(
evbuf„r
 *, evbuffer *);

1066 
evbuf„r_add_¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, ...)

1067 #ifde‡
__GNUC__


1068 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

1081 
evbuf„r_add_v¥ötf
(
evbuf„r
 *, c⁄° *
fmt
, 
va_li°
 
≠
);

1090 
evbuf„r_døö
(
evbuf„r
 *, 
size_t
);

1103 
evbuf„r_wrôe
(
evbuf„r
 *, );

1115 
evbuf„r_ªad
(
evbuf„r
 *, , );

1126 
u_ch¨
 *
evbuf„r_föd
(
evbuf„r
 *, c⁄° u_ch¨ *, 
size_t
);

1135 
evbuf„r_£tcb
(
evbuf„r
 *, (*)(evbuf„∏*, 
size_t
, size_t, *), *);

1143 
evèg_öô
();

1145 
evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° *
d©a
,

1146 
ev_uöt32_t
 
Àn
);

1158 
ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
);

1160 
evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1161 
ev_uöt32_t
 
öãgî
);

1163 
evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
,

1164 c⁄° *
°rög
);

1166 
evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

1167 
timevÆ
 *
tv
);

1169 
evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
,

1170 
evbuf„r
 *
d°
);

1171 
evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
);

1172 
evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1173 
evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
);

1174 
evèg_c⁄sume
(
evbuf„r
 *
evbuf
);

1176 
evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1177 
ev_uöt32_t
 *
pöãgî
);

1179 
evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
,

1180 *
d©a
, 
size_t
 
Àn
);

1182 
evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1183 **
p°rög
);

1185 
evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

1186 
timevÆ
 *
±v
);

1188 #ifde‡
__˝lu•lus


	@event_tagging.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_TYPES_H


33 
	~<sys/ty≥s.h
>

35 #ifde‡
HAVE_SYS_PARAM_H


36 
	~<sys/∑øm.h
>

39 #ifde‡
WIN32


40 
	#WIN32_LEAN_AND_MEAN


	)

41 
	~<wösock2.h
>

42 
	~<wödows.h
>

43 #unde‡
WIN32_LEAN_AND_MEAN


45 
	~<sys/io˘l.h
>

48 
	~<sys/queue.h
>

49 #ifde‡
HAVE_SYS_TIME_H


50 
	~<sys/time.h
>

53 
	~<î∫o.h
>

54 
	~<°dio.h
>

55 
	~<°dlib.h
>

56 
	~<°rög.h
>

57 #i‚de‡
WIN32


58 
	~<sy¶og.h
>

60 #ifde‡
HAVE_UNISTD_H


61 
	~<uni°d.h
>

64 
	~"evít.h
"

65 
	~"evutû.h
"

66 
	~"log.h
"

68 
evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

69 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
);

70 
evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
);

72 
evbuf„r
 *
	g_buf
;

75 
	$evèg_öô
()

77 i‡(
_buf
 !
NULL
)

80 i‡((
_buf
 = 
	`evbuf„r_√w
()Ë=
NULL
)

81 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

82 
	}
}

91 
	$ícode_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
numbî
)

93 
off
 = 1, 
nibbÀs
 = 0;

94 
ev_uöt8_t
 
d©a
[5];

96 
	`mem£t
(
d©a
, 0, (
ev_uöt32_t
)+1);

97 
numbî
) {

98 i‡(
off
 & 0x1)

99 
d©a
[
off
/2] = (d©a[off/2] & 0xf0Ë| (
numbî
 & 0x0f);

101 
d©a
[
off
/2] = (data[off/2] & 0x0f) |

102 ((
numbî
 & 0x0f) << 4);

103 
numbî
 >>= 4;

104 
off
++;

107 i‡(
off
 > 2)

108 
nibbÀs
 = 
off
 - 2;

111 
d©a
[0] = (d©a[0] & 0x0fË| ((
nibbÀs
 & 0x0f) << 4);

113 
	`evbuf„r_add
(
evbuf
, 
d©a
, (
off
 + 1) / 2);

114 
	}
}

122 
	$evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
)

124 
byãs
 = 0;

125 
ev_uöt8_t
 
d©a
[5];

127 
	`mem£t
(
d©a
, 0, (data));

129 
ev_uöt8_t
 
lowî
 = 
èg
 & 0x7f;

130 
èg
 >>= 7;

132 i‡(
èg
)

133 
lowî
 |= 0x80;

135 
d©a
[
byãs
++] = 
lowî
;

136 } 
èg
);

138 i‡(
evbuf
 !
NULL
)

139 
	`evbuf„r_add
(
evbuf
, 
d©a
, 
byãs
);

141  (
byãs
);

142 
	}
}

145 
	$decode_èg_öã∫Æ
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
, 
dodøö
)

147 
ev_uöt32_t
 
numbî
 = 0;

148 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

149 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

150 
cou¡
 = 0, 
shi·
 = 0, 
d⁄e
 = 0;

152 
cou¡
++ < 
Àn
) {

153 
ev_uöt8_t
 
lowî
 = *
d©a
++;

154 
numbî
 |(
lowî
 & 0x7fË<< 
shi·
;

155 
shi·
 += 7;

157 i‡(!(
lowî
 & 0x80)) {

158 
d⁄e
 = 1;

163 i‡(!
d⁄e
)

166 i‡(
dodøö
)

167 
	`evbuf„r_døö
(
evbuf
, 
cou¡
);

169 i‡(
±ag
 !
NULL
)

170 *
±ag
 = 
numbî
;

172  (
cou¡
);

173 
	}
}

176 
	$evèg_decode_èg
(
ev_uöt32_t
 *
±ag
, 
evbuf„r
 *
evbuf
)

178  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 1 ));

179 
	}
}

188 
	$evèg_m¨shÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,

189 c⁄° *
d©a
, 
ev_uöt32_t
 
Àn
)

191 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

192 
	`ícode_öt
(
evbuf
, 
Àn
);

193 
	`evbuf„r_add
(
evbuf
, (*)
d©a
, 
Àn
);

194 
	}
}

198 
	$evèg_m¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
,Év_uöt32_à
öãgî
)

200 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

201 
	`ícode_öt
(
_buf
, 
öãgî
);

203 
	`evèg_ícode_èg
(
evbuf
, 
èg
);

204 
	`ícode_öt
(
evbuf
, 
	`EVBUFFER_LENGTH
(
_buf
));

205 
	`evbuf„r_add_buf„r
(
evbuf
, 
_buf
);

206 
	}
}

209 
	$evèg_m¨shÆ_°rög
(
evbuf„r
 *
buf
, 
ev_uöt32_t
 
èg
, c⁄° *
°rög
)

211 
	`evèg_m¨shÆ
(
buf
, 
èg
, 
°rög
, 
	`°æí
(string));

212 
	}
}

215 
	$evèg_m¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, 
timevÆ
 *
tv
)

217 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

219 
	`ícode_öt
(
_buf
, 
tv
->
tv_£c
);

220 
	`ícode_öt
(
_buf
, 
tv
->
tv_u£c
);

222 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
),

223 
	`EVBUFFER_LENGTH
(
_buf
));

224 
	}
}

227 
	$decode_öt_öã∫Æ
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
, 
dodøö
)

229 
ev_uöt32_t
 
numbî
 = 0;

230 
ev_uöt8_t
 *
d©a
 = 
	`EVBUFFER_DATA
(
evbuf
);

231 
Àn
 = 
	`EVBUFFER_LENGTH
(
evbuf
);

232 
nibbÀs
 = 0;

234 i‡(!
Àn
)

237 
nibbÀs
 = ((
d©a
[0] & 0xf0) >> 4) + 1;

238 i‡(
nibbÀs
 > 8 || (nibbÀ†>> 1Ë+ 1 > 
Àn
)

240 
Àn
 = (
nibbÀs
 >> 1) + 1;

242 
nibbÀs
 > 0) {

243 
numbî
 <<= 4;

244 i‡(
nibbÀs
 & 0x1)

245 
numbî
 |
d©a
[
nibbÀs
 >> 1] & 0x0f;

247 
numbî
 |(
d©a
[
nibbÀs
 >> 1] & 0xf0) >> 4;

248 
nibbÀs
--;

251 i‡(
dodøö
)

252 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

254 *
≤umbî
 = 
numbî
;

256  (
Àn
);

257 
	}
}

260 
	$evèg_decode_öt
(
ev_uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
)

262  (
	`decode_öt_öã∫Æ
(
≤umbî
, 
evbuf
, 1) == -1 ? -1 : 0);

263 
	}
}

266 
	$evèg_≥ek
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
±ag
)

268  (
	`decode_èg_öã∫Æ
(
±ag
, 
evbuf
, 0 ));

269 
	}
}

272 
	$evèg_≥ek_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

274 
evbuf„r
 
tmp
;

275 
ªs
, 
Àn
;

277 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

278 i‡(
Àn
 == -1)

281 
tmp
 = *
evbuf
;

282 
tmp
.
buf„r
 +
Àn
;

283 
tmp
.
off
 -
Àn
;

285 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

286 i‡(
ªs
 == -1)

289 *
∂ígth
 +
ªs
 + 
Àn
;

292 
	}
}

295 
	$evèg_∑ylﬂd_Àngth
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 *
∂ígth
)

297 
evbuf„r
 
tmp
;

298 
ªs
, 
Àn
;

300 
Àn
 = 
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 0 );

301 i‡(
Àn
 == -1)

304 
tmp
 = *
evbuf
;

305 
tmp
.
buf„r
 +
Àn
;

306 
tmp
.
off
 -
Àn
;

308 
ªs
 = 
	`decode_öt_öã∫Æ
(
∂ígth
, &
tmp
, 0);

309 i‡(
ªs
 == -1)

313 
	}
}

316 
	$evèg_c⁄sume
(
evbuf„r
 *
evbuf
)

318 
ev_uöt32_t
 
Àn
;

319 i‡(
	`decode_èg_öã∫Æ
(
NULL
, 
evbuf
, 1 ) == -1)

321 i‡(
	`evèg_decode_öt
(&
Àn
, 
evbuf
) == -1)

323 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

326 
	}
}

331 
	$evèg_unm¨shÆ
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 *
±ag
, evbuf„∏*
d°
)

333 
ev_uöt32_t
 
Àn
;

334 
ev_uöt32_t
 
öãgî
;

336 i‡(
	`decode_èg_öã∫Æ
(
±ag
, 
§c
, 1 ) == -1)

338 i‡(
	`evèg_decode_öt
(&
öãgî
, 
§c
) == -1)

340 
Àn
 = 
öãgî
;

342 i‡(
	`EVBUFFER_LENGTH
(
§c
Ë< 
Àn
)

345 i‡(
	`evbuf„r_add
(
d°
, 
	`EVBUFFER_DATA
(
§c
), 
Àn
) == -1)

348 
	`evbuf„r_døö
(
§c
, 
Àn
);

350  (
Àn
);

351 
	}
}

356 
	$evèg_unm¨shÆ_öt
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

357 
ev_uöt32_t
 *
pöãgî
)

359 
ev_uöt32_t
 
èg
;

360 
ev_uöt32_t
 
Àn
;

361 
ev_uöt32_t
 
öãgî
;

363 i‡(
	`decode_èg_öã∫Æ
(&
èg
, 
evbuf
, 1 ) == -1)

365 i‡(
√ed_èg
 !
èg
)

367 i‡(
	`evèg_decode_öt
(&
öãgî
, 
evbuf
) == -1)

369 
Àn
 = 
öãgî
;

371 i‡(
	`EVBUFFER_LENGTH
(
evbuf
Ë< 
Àn
)

374 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

375 i‡(
	`evbuf„r_add
(
_buf
, 
	`EVBUFFER_DATA
(
evbuf
), 
Àn
) == -1)

378 
	`evbuf„r_døö
(
evbuf
, 
Àn
);

380  (
	`evèg_decode_öt
(
pöãgî
, 
_buf
));

381 
	}
}

386 
	$evèg_unm¨shÆ_fixed
(
evbuf„r
 *
§c
, 
ev_uöt32_t
 
√ed_èg
, *
d©a
,

387 
size_t
 
Àn
)

389 
ev_uöt32_t
 
èg
;

392 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

395 i‡(
	`evèg_unm¨shÆ
(
§c
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

398 i‡(
	`EVBUFFER_LENGTH
(
_buf
Ë!
Àn
)

401 
	`mem˝y
(
d©a
, 
	`EVBUFFER_DATA
(
_buf
), 
Àn
);

403 
	}
}

406 
	$evèg_unm¨shÆ_°rög
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

407 **
p°rög
)

409 
ev_uöt32_t
 
èg
;

411 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

413 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

416 *
p°rög
 = 
	`ˇŒoc
(
	`EVBUFFER_LENGTH
(
_buf
) + 1, 1);

417 i‡(*
p°rög
 =
NULL
)

418 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

419 
	`evbuf„r_ªmove
(
_buf
, *
p°rög
, 
	`EVBUFFER_LENGTH
(_buf));

422 
	}
}

425 
	$evèg_unm¨shÆ_timevÆ
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
,

426 
timevÆ
 *
±v
)

428 
ev_uöt32_t
 
èg
;

429 
ev_uöt32_t
 
öãgî
;

431 
	`evbuf„r_døö
(
_buf
, 
	`EVBUFFER_LENGTH
(_buf));

432 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
_buf
Ë=-1 ||Åag !
√ed_èg
)

435 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

437 
±v
->
tv_£c
 = 
öãgî
;

438 i‡(
	`evèg_decode_öt
(&
öãgî
, 
_buf
) == -1)

440 
±v
->
tv_u£c
 = 
öãgî
;

443 
	}
}

	@evhttp.h

27 #i‚de‡
_EVHTTP_H_


28 
	#_EVHTTP_H_


	)

30 
	~<evít.h
>

32 #ifde‡
__˝lu•lus


36 #ifde‡
WIN32


37 
	#WIN32_LEAN_AND_MEAN


	)

38 
	~<wösock2.h
>

39 
	~<wödows.h
>

40 #unde‡
WIN32_LEAN_AND_MEAN


55 
	#HTTP_OK
 200

	)

56 
	#HTTP_NOCONTENT
 204

	)

57 
	#HTTP_MOVEPERM
 301

	)

58 
	#HTTP_MOVETEMP
 302

	)

59 
	#HTTP_NOTMODIFIED
 304

	)

60 
	#HTTP_BADREQUEST
 400

	)

61 
	#HTTP_NOTFOUND
 404

	)

62 
	#HTTP_SERVUNAVAIL
 503

	)

64 
evhâp
;

65 
evhâp_ªque°
;

66 
evkeyvÆq
;

73 
evhâp
 *
evhâp_√w
(
evít_ba£
 *
ba£
);

87 
evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

105 
evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
);

115 
evhâp_‰ì
(
evhâp
* 
hâp
);

118 
evhâp_£t_cb
(
evhâp
 *, const *,

119 (*)(
evhâp_ªque°
 *, *), *);

122 
evhâp_dñ_cb
(
evhâp
 *, const *);

126 
evhâp_£t_gícb
(
evhâp
 *,

127 (*)(
evhâp_ªque°
 *, *), *);

135 
evhâp_£t_timeout
(
evhâp
 *, 
timeout_ö_£cs
);

146 
evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
,

147 c⁄° *
ªas⁄
);

157 
evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
,

158 c⁄° *
ªas⁄
, 
evbuf„r
 *
d©abuf
);

161 
evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *, , const *);

162 
evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *, 
evbuf„r
 *);

163 
evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *);

174 
evhâp
 *
evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
);

179 
	eevhâp_cmd_ty≥
 { 
EVHTTP_REQ_GET
, 
EVHTTP_REQ_POST
, 
EVHTTP_REQ_HEAD
 };

181 
	eevhâp_ªque°_köd
 { 
EVHTTP_REQUEST
, 
EVHTTP_RESPONSE
 };

188 
	sevhâp_ªque°
 {

189 #i‡
deföed
(
TAILQ_ENTRY
)

190 
TAILQ_ENTRY
(
evhâp_ªque°
Ë
√xt
;

193 
evhâp_ªque°
 *
tqe_√xt
;

194 
evhâp_ªque°
 **
tqe_¥ev
;

195 } 
√xt
;

199 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

200 
Êags
;

201 
	#EVHTTP_REQ_OWN_CONNECTION
 0x0001

	)

202 
	#EVHTTP_PROXY_REQUEST
 0x0002

	)

204 
evkeyvÆq
 *
öput_hódîs
;

205 
evkeyvÆq
 *
ouçut_hódîs
;

208 *
ªmŸe_ho°
;

209 
u_sh‹t
 
ªmŸe_p‹t
;

211 
evhâp_ªque°_köd
 
köd
;

212 
evhâp_cmd_ty≥
 
ty≥
;

214 *
uri
;

216 
maj‹
;

217 
mö‹
;

219 
ª•⁄£_code
;

220 *
ª•⁄£_code_löe
;

222 
evbuf„r
 *
öput_buf„r
;

223 
ev_öt64_t
 
¡‹ód
;

224 
chunked
;

226 
evbuf„r
 *
ouçut_buf„r
;

229 (*
cb
)(
evhâp_ªque°
 *, *);

230 *
cb_¨g
;

237 (*
chunk_cb
)(
evhâp_ªque°
 *, *);

245 
evhâp_ªque°
 *
evhâp_ªque°_√w
(

246 (*
cb
)(
evhâp_ªque°
 *, *), *
¨g
);

249 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *,

250 (*
cb
)(
evhâp_ªque°
 *, *));

253 
evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
);

260 
evhâp_c⁄√˘i⁄
 *
evhâp_c⁄√˘i⁄_√w
(

261 c⁄° *
addªss
, 
p‹t
);

264 
evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
);

267 
evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

268 c⁄° *
addªss
);

271 
evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

272 
p‹t
);

275 
evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

276 
timeout_ö_£cs
);

279 
evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

280 
ªåy_max
);

283 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

284 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

290 
evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

291 
evít_ba£
 *
ba£
);

294 
evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

295 **
addªss
, 
u_sh‹t
 *
p‹t
);

298 
evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

299 
evhâp_ªque°
 *
ªq
,

300 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
);

302 c⁄° *
evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
);

306 c⁄° *
evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *, const *);

307 
evhâp_ªmove_hódî
(
evkeyvÆq
 *, const *);

308 
evhâp_add_hódî
(
evkeyvÆq
 *, const *, const *);

309 
evhâp_˛ór_hódîs
(
evkeyvÆq
 *);

322 *
evhâp_ícode_uri
(c⁄° *
uri
);

333 *
evhâp_decode_uri
(c⁄° *
uri
);

351 
evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *
hódîs
);

365 *
evhâp_htmÀsˇ≥
(c⁄° *
html
);

367 #ifde‡
__˝lu•lus


	@evport.c

53 #ifde‡
HAVE_CONFIG_H


54 
	~"c⁄fig.h
"

57 
	~<sys/time.h
>

58 
	~<as£π.h
>

59 
	~<sys/queue.h
>

60 
	~<î∫o.h
>

61 
	~<pﬁl.h
>

62 
	~<p‹t.h
>

63 
	~<sig«l.h
>

64 
	~<°dio.h
>

65 
	~<°dlib.h
>

66 
	~<°rög.h
>

67 
	~<time.h
>

68 
	~<uni°d.h
>

69 #ifde‡
CHECK_INVARIANTS


70 
	~<as£π.h
>

73 
	~"evít.h
"

74 
	~"evít-öã∫Æ.h
"

75 
	~"log.h
"

76 
	~"evsig«l.h
"

84 
	#DEFAULT_NFDS
 16

	)

92 
	#EVENTS_PER_GETN
 8

	)

99 
	sfd_öfo
 {

100 
evít
* 
	mfdi_ªvt
;

101 
evít
* 
	mfdi_wevt
;

104 
	#FDI_HAS_READ
(
fdi
Ë((fdi)->
fdi_ªvt
 !
NULL
)

	)

105 
	#FDI_HAS_WRITE
(
fdi
Ë((fdi)->
fdi_wevt
 !
NULL
)

	)

106 
	#FDI_HAS_EVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË|| 
	`FDI_HAS_WRITE
(fdi))

	)

107 
	#FDI_TO_SYSEVENTS
(
fdi
Ë(
	`FDI_HAS_READ
(fdiË? 
POLLIN
 : 0) | \

108 (
	`FDI_HAS_WRITE
(
fdi
Ë? 
POLLOUT
 : 0)

	)

110 
	sevp‹t_d©a
 {

111 
	med_p‹t
;

112 
	med_√víts
;

113 
fd_öfo
 *
	med_fds
;

115 
	med_≥ndög
[
EVENTS_PER_GETN
];

118 * 
evp‹t_öô
 (
evít_ba£
 *);

119 
evp‹t_add
 (*, 
evít
 *);

120 
evp‹t_dñ
 (*, 
evít
 *);

121 
evp‹t_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

122 
evp‹t_dóŒoc
 (
evít_ba£
 *, *);

124 c⁄° 
evít›
 
	gevp‹t›s
 = {

126 
evp‹t_öô
,

127 
evp‹t_add
,

128 
evp‹t_dñ
,

129 
evp‹t_di•©ch
,

130 
evp‹t_dóŒoc
,

139 
	$evp‹t_öô
(
evít_ba£
 *
ba£
)

141 
evp‹t_d©a
 *
evpd
;

142 
i
;

146 i‡(
	`evutû_gëív
("EVENT_NOEVPORT"))

147  (
NULL
);

149 i‡(!(
evpd
 = 
	`ˇŒoc
(1, (
evp‹t_d©a
))))

150  (
NULL
);

152 i‡((
evpd
->
ed_p‹t
 = 
	`p‹t_¸óã
()) == -1) {

153 
	`‰ì
(
evpd
);

154  (
NULL
);

160 
evpd
->
ed_fds
 = 
	`ˇŒoc
(
DEFAULT_NFDS
, (
fd_öfo
));

161 i‡(
evpd
->
ed_fds
 =
NULL
) {

162 
	`˛o£
(
evpd
->
ed_p‹t
);

163 
	`‰ì
(
evpd
);

164  (
NULL
);

166 
evpd
->
ed_√víts
 = 
DEFAULT_NFDS
;

167 
i
 = 0; i < 
EVENTS_PER_GETN
; i++)

168 
evpd
->
ed_≥ndög
[
i
] = -1;

170 
	`evsig«l_öô
(
ba£
);

172  (
evpd
);

173 
	}
}

175 #ifde‡
CHECK_INVARIANTS


183 
	$check_evp‹t›
(
evp‹t_d©a
 *
evpd
)

185 
	`as£π
(
evpd
);

186 
	`as£π
(
evpd
->
ed_√víts
 > 0);

187 
	`as£π
(
evpd
->
ed_p‹t
 > 0);

188 
	`as£π
(
evpd
->
ed_fds
 > 0);

195 
i
;

196 
i
 = 0; i < 
evpd
->
ed_√víts
; ++i) {

197 
evít
 *
ev
;

198 
fd_öfo
 *
fdi
;

200 
fdi
 = &
evpd
->
ed_fds
[
i
];

201 i‡((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
) {

202 
	`as£π
(
ev
->
ev_fd
 =
i
);

204 i‡((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
) {

205 
	`as£π
(
ev
->
ev_fd
 =
i
);

208 
	}
}

214 
	$check_evít
(
p‹t_evít_t
* 
≥vt
)

222 
	`as£π
(
≥vt
->
p‹ãv_sour˚
 =
PORT_SOURCE_FD
);

223 
	`as£π
(
≥vt
->
p‹ãv_u£r
 =
NULL
);

224 
	}
}

227 
	#check_evp‹t›
(
ï›
)

	)

228 
	#check_evít
(
≥vt
)

	)

235 
	$grow
(
evp‹t_d©a
 *
ïdp
, 
Á˘‹
)

237 
fd_öfo
 *
tmp
;

238 
ﬁdsize
 = 
ïdp
->
ed_√víts
;

239 
√wsize
 = 
Á˘‹
 * 
ﬁdsize
;

240 
	`as£π
(
Á˘‹
 > 1);

242 
	`check_evp‹t›
(
ïdp
);

244 
tmp
 = 
	`ªÆloc
(
ïdp
->
ed_fds
, (
fd_öfo
Ë* 
√wsize
);

245 i‡(
NULL
 =
tmp
)

247 
ïdp
->
ed_fds
 = 
tmp
;

248 
	`mem£t
((*Ë(
ïdp
->
ed_fds
 + 
ﬁdsize
), 0,

249 (
√wsize
 - 
ﬁdsize
)*(
fd_öfo
));

250 
ïdp
->
ed_√víts
 = 
√wsize
;

252 
	`check_evp‹t›
(
ïdp
);

255 
	}
}

263 
	$ªassocüã
(
evp‹t_d©a
 *
ïdp
, 
fd_öfo
 *
fdù
, 
fd
)

265 
sy£víts
 = 
	`FDI_TO_SYSEVENTS
(
fdù
);

267 i‡(
sy£víts
 != 0) {

268 i‡(
	`p‹t_assocüã
(
ïdp
->
ed_p‹t
, 
PORT_SOURCE_FD
,

269 
fd
, 
sy£víts
, 
NULL
) == -1) {

270 
	`evít_w¨n
("port_associate");

275 
	`check_evp‹t›
(
ïdp
);

278 
	}
}

286 
	$evp‹t_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

288 
i
, 
ªs
;

289 
evp‹t_d©a
 *
ïdp
 = 
¨g
;

290 
p‹t_evít_t
 
≥véi°
[
EVENTS_PER_GETN
];

298 
√víts
 = 1;

305 
time•ec
 
ts
;

306 
time•ec
 *
ts_p
 = 
NULL
;

307 i‡(
tv
 !
NULL
) {

308 
ts
.
tv_£c
 = 
tv
->tv_sec;

309 
ts
.
tv_n£c
 = 
tv
->
tv_u£c
 * 1000;

310 
ts_p
 = &
ts
;

318 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

319 
fd_öfo
 *
fdi
 = 
NULL
;

320 i‡(
ïdp
->
ed_≥ndög
[
i
] != -1) {

321 
fdi
 = &(
ïdp
->
ed_fds
[ïdp->
ed_≥ndög
[
i
]]);

324 i‡(
fdi
 !
NULL
 && 
	`FDI_HAS_EVENTS
(fdi)) {

325 
fd
 = 
	`FDI_HAS_READ
(
fdi
Ë? fdi->
fdi_ªvt
->
ev_fd
 :

326 
fdi
->
fdi_wevt
->
ev_fd
;

327 
	`ªassocüã
(
ïdp
, 
fdi
, 
fd
);

328 
ïdp
->
ed_≥ndög
[
i
] = -1;

332 i‡((
ªs
 = 
	`p‹t_gën
(
ïdp
->
ed_p‹t
, 
≥véi°
, 
EVENTS_PER_GETN
,

333 (*Ë&
√víts
, 
ts_p
)) == -1) {

334 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
) {

335 
	`evsig«l_¥o˚ss
(
ba£
);

337 } i‡(
î∫o
 =
ETIME
) {

338 i‡(
√víts
 == 0)

341 
	`evít_w¨n
("port_getn");

344 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

345 
	`evsig«l_¥o˚ss
(
ba£
);

348 
	`evít_debug
(("%s:Ö‹t_gë¿ªp‹t†%dÉvíts", 
__func__
, 
√víts
));

350 
i
 = 0; i < 
√víts
; ++i) {

351 
evít
 *
ev
;

352 
fd_öfo
 *
fdi
;

353 
p‹t_evít_t
 *
≥vt
 = &
≥véi°
[
i
];

354 
fd
 = (Ë
≥vt
->
p‹ãv_obje˘
;

356 
	`check_evp‹t›
(
ïdp
);

357 
	`check_evít
(
≥vt
);

358 
ïdp
->
ed_≥ndög
[
i
] = 
fd
;

364 
ªs
 = 0;

365 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLIN
)

366 
ªs
 |
EV_READ
;

367 i‡(
≥vt
->
p‹ãv_evíts
 & 
POLLOUT
)

368 
ªs
 |
EV_WRITE
;

370 
	`as£π
(
ïdp
->
ed_√víts
 > 
fd
);

371 
fdi
 = &(
ïdp
->
ed_fds
[
fd
]);

379 i‡((
ªs
 & 
EV_READ
Ë&& ((
ev
 = 
fdi
->
fdi_ªvt
Ë!
NULL
)) {

380 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

383 i‡((
ªs
 & 
EV_WRITE
Ë&& ((
ev
 = 
fdi
->
fdi_wevt
Ë!
NULL
)) {

384 
	`evít_a˘ive
(
ev
, 
ªs
, 1);

388 
	`check_evp‹t›
(
ïdp
);

391 
	}
}

400 
	$evp‹t_add
(*
¨g
, 
evít
 *
ev
)

402 
evp‹t_d©a
 *
evpd
 = 
¨g
;

403 
fd_öfo
 *
fdi
;

404 
Á˘‹
;

406 
	`check_evp‹t›
(
evpd
);

411 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

412  (
	`evsig«l_add
(
ev
));

418 
Á˘‹
 = 1;

419 
ev
->
ev_fd
 >
Á˘‹
 * 
evpd
->
ed_√víts
)

420 
Á˘‹
 *= 2;

422 i‡(
Á˘‹
 > 1) {

423 i‡(-1 =
	`grow
(
evpd
, 
Á˘‹
)) {

428 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

429 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

430 
fdi
->
fdi_ªvt
 = 
ev
;

431 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

432 
fdi
->
fdi_wevt
 = 
ev
;

434  
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
);

435 
	}
}

442 
	$evp‹t_dñ
(*
¨g
, 
evít
 *
ev
)

444 
evp‹t_d©a
 *
evpd
 = 
¨g
;

445 
fd_öfo
 *
fdi
;

446 
i
;

447 
assocüãd
 = 1;

449 
	`check_evp‹t›
(
evpd
);

454 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

455  (
	`evsig«l_dñ
(
ev
));

458 i‡(
evpd
->
ed_√víts
 < 
ev
->
ev_fd
) {

462 
i
 = 0; i < 
EVENTS_PER_GETN
; ++i) {

463 i‡(
evpd
->
ed_≥ndög
[
i
] =
ev
->
ev_fd
) {

464 
assocüãd
 = 0;

469 
fdi
 = &
evpd
->
ed_fds
[
ev
->
ev_fd
];

470 i‡(
ev
->
ev_evíts
 & 
EV_READ
)

471 
fdi
->
fdi_ªvt
 = 
NULL
;

472 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
)

473 
fdi
->
fdi_wevt
 = 
NULL
;

475 i‡(
assocüãd
) {

476 i‡(!
	`FDI_HAS_EVENTS
(
fdi
) &&

477 
	`p‹t_dissocüã
(
evpd
->
ed_p‹t
, 
PORT_SOURCE_FD
,

478 
ev
->
ev_fd
) == -1) {

483 i‡(
î∫o
 !
EBADFD
) {

484 
	`evít_w¨n
("port_dissociate");

488 i‡(
	`FDI_HAS_EVENTS
(
fdi
)) {

489  (
	`ªassocüã
(
evpd
, 
fdi
, 
ev
->
ev_fd
));

493 i‡(
fdi
->
fdi_ªvt
 =
NULL
 && fdi->
fdi_wevt
 == NULL) {

494 
evpd
->
ed_≥ndög
[
i
] = -1;

498 
	}
}

502 
	$evp‹t_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

504 
evp‹t_d©a
 *
evpd
 = 
¨g
;

506 
	`evsig«l_dóŒoc
(
ba£
);

508 
	`˛o£
(
evpd
->
ed_p‹t
);

510 i‡(
evpd
->
ed_fds
)

511 
	`‰ì
(
evpd
->
ed_fds
);

512 
	`‰ì
(
evpd
);

513 
	}
}

	@evrpc-internal.h

27 #i‚de‡
_EVRPC_INTERNAL_H_


28 
	#_EVRPC_INTERNAL_H_


	)

30 
	~"hâp-öã∫Æ.h
"

32 
	gevΩc
;

34 
	#EVRPC_URI_PREFIX
 "/.Ωc."

	)

36 
	sevΩc_hook
 {

37 
TAILQ_ENTRY
(
evΩc_hook
Ë(
	m√xt
);

40 (*
	m¥o˚ss
)(
	mevhâp_ªque°
 *, 
	mevbuf„r
 *, *);

41 *
	m¥o˚ss_¨g
;

44 
TAILQ_HEAD
(
evΩc_hook_li°
, 
evΩc_hook
);

51 
	s_evΩc_hooks
 {

53 
evΩc_hook_li°
 
	mö_hooks
;

54 
evΩc_hook_li°
 
	mout_hooks
;

57 
	#öput_hooks
 
comm⁄
.
ö_hooks


	)

58 
	#ouçut_hooks
 
comm⁄
.
out_hooks


	)

60 
	sevΩc_ba£
 {

61 
_evΩc_hooks
 
	mcomm⁄
;

64 
evhâp
* 
	mhâp_£rvî
;

67 
TAILQ_HEAD
(
evΩc_li°
, 
evΩc
Ë
	mªgi°îed_Ωcs
;

70 
	gevΩc_ªq_gíîic
;

71 
evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
);

74 
	sevΩc_poﬁ
 {

75 
_evΩc_hooks
 
	mcomm⁄
;

77 
evít_ba£
 *
	mba£
;

79 
evc⁄q
 
	mc⁄√˘i⁄s
;

81 
	mtimeout
;

83 
TAILQ_HEAD
(
evΩc_ªque°q
, 
evΩc_ªque°_wøµî
Ë
	mªque°s
;

	@evrpc.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	#WIN32_LEAN_AND_MEAN


	)

33 
	~<wösock2.h
>

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #i‚de‡
WIN32


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 
	~<sys/queue.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 #i‚de‡
WIN32


49 
	~<uni°d.h
>

51 
	~<î∫o.h
>

52 
	~<sig«l.h
>

53 
	~<°rög.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evΩc.h
"

58 
	~"evΩc-öã∫Æ.h
"

59 
	~"evhâp.h
"

60 
	~"evutû.h
"

61 
	~"log.h
"

63 
evΩc_ba£
 *

64 
	$evΩc_öô
(
evhâp
 *
hâp_£rvî
)

66 
evΩc_ba£
* 
ba£
 = 
	`ˇŒoc
(1, (evrpc_base));

67 i‡(
ba£
 =
NULL
)

68  (
NULL
);

71 
	`evèg_öô
();

73 
	`TAILQ_INIT
(&
ba£
->
ªgi°îed_Ωcs
);

74 
	`TAILQ_INIT
(&
ba£
->
öput_hooks
);

75 
	`TAILQ_INIT
(&
ba£
->
ouçut_hooks
);

76 
ba£
->
hâp_£rvî
 = http_server;

78  (
ba£
);

79 
	}
}

82 
	$evΩc_‰ì
(
evΩc_ba£
 *
ba£
)

84 
evΩc
 *
Ωc
;

85 
evΩc_hook
 *
hook
;

87 (
Ωc
 = 
	`TAILQ_FIRST
(&
ba£
->
ªgi°îed_Ωcs
)Ë!
NULL
) {

88 
	`as£π
(
	`evΩc_uƒegi°î_Ωc
(
ba£
, 
Ωc
->
uri
));

90 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
öput_hooks
)Ë!
NULL
) {

91 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_INPUT
, 
hook
));

93 (
hook
 = 
	`TAILQ_FIRST
(&
ba£
->
ouçut_hooks
)Ë!
NULL
) {

94 
	`as£π
(
	`evΩc_ªmove_hook
(
ba£
, 
EVRPC_OUTPUT
, 
hook
));

96 
	`‰ì
(
ba£
);

97 
	}
}

100 
evΩc_add_hook
(*
vba£
,

101 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

102 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

103 *
cb_¨g
)

105 
_evΩc_hooks
 *
ba£
 = 
vba£
;

106 
evΩc_hook_li°
 *
hód
 = 
NULL
;

107 
evΩc_hook
 *
hook
 = 
NULL
;

108 
hook_ty≥
) {

109 
EVRPC_INPUT
:

110 
hód
 = &
ba£
->
ö_hooks
;

112 
EVRPC_OUTPUT
:

113 
hód
 = &
ba£
->
out_hooks
;

116 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

119 
hook
 = 
	`ˇŒoc
(1, (
evΩc_hook
));

120 
	`as£π
(
hook
 !
NULL
);

122 
hook
->
¥o˚ss
 = 
cb
;

123 
hook
->
¥o˚ss_¨g
 = 
cb_¨g
;

124 
	`TAILQ_INSERT_TAIL
(
hód
, 
hook
, 
√xt
);

126  (
hook
);

127 
	}
}

130 
	$evΩc_ªmove_hook_öã∫Æ
(
evΩc_hook_li°
 *
hód
, *
h™dÀ
)

132 
evΩc_hook
 *
hook
 = 
NULL
;

133 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

134 i‡(
hook
 =
h™dÀ
) {

135 
	`TAILQ_REMOVE
(
hód
, 
hook
, 
√xt
);

136 
	`‰ì
(
hook
);

142 
	}
}

149 
	$evΩc_ªmove_hook
(*
vba£
, 
EVRPC_HOOK_TYPE
 
hook_ty≥
, *
h™dÀ
)

151 
_evΩc_hooks
 *
ba£
 = 
vba£
;

152 
evΩc_hook_li°
 *
hód
 = 
NULL
;

153 
hook_ty≥
) {

154 
EVRPC_INPUT
:

155 
hód
 = &
ba£
->
ö_hooks
;

157 
EVRPC_OUTPUT
:

158 
hód
 = &
ba£
->
out_hooks
;

161 
	`as£π
(
hook_ty≥
 =
EVRPC_INPUT
 || hook_ty≥ =
EVRPC_OUTPUT
);

164  (
	`evΩc_ªmove_hook_öã∫Æ
(
hód
, 
h™dÀ
));

165 
	}
}

168 
	$evΩc_¥o˚ss_hooks
(
evΩc_hook_li°
 *
hód
,

169 
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
evbuf
)

171 
evΩc_hook
 *
hook
;

172 
	`TAILQ_FOREACH
(
hook
, 
hód
, 
√xt
) {

173 i‡(
hook
->
	`¥o˚ss
(
ªq
, 
evbuf
, hook->
¥o˚ss_¨g
) == -1)

178 
	}
}

180 
evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
);

181 
evΩc_ªque°_cb
(
evhâp_ªque°
 *, *);

182 
evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
*);

191 
	$evΩc_c⁄°ru˘_uri
(c⁄° *
uri
)

193 *
c⁄°ru˘ed_uri
;

194 
c⁄°ru˘ed_uri_Àn
;

196 
c⁄°ru˘ed_uri_Àn
 = 
	`°æí
(
EVRPC_URI_PREFIX
Ë+ såÀn(
uri
) + 1;

197 i‡((
c⁄°ru˘ed_uri
 = 
	`mÆloc
(
c⁄°ru˘ed_uri_Àn
)Ë=
NULL
)

198 
	`evít_îr
(1, "%s: failedÅoÑegisterÑpcát %s",

199 
__func__
, 
uri
);

200 
	`mem˝y
(
c⁄°ru˘ed_uri
, 
EVRPC_URI_PREFIX
, 
	`°æí
(EVRPC_URI_PREFIX));

201 
	`mem˝y
(
c⁄°ru˘ed_uri
 + 
	`°æí
(
EVRPC_URI_PREFIX
), 
uri
, strlen(uri));

202 
c⁄°ru˘ed_uri
[
c⁄°ru˘ed_uri_Àn
 - 1] = '\0';

204  (
c⁄°ru˘ed_uri
);

205 
	}
}

208 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *
ba£
, 
evΩc
 *
Ωc
,

209 (*
cb
)(
evΩc_ªq_gíîic
 *, *), *
cb_¨g
)

211 *
c⁄°ru˘ed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
Ωc
->
uri
);

213 
Ωc
->
ba£
 = base;

214 
Ωc
->
cb
 = cb;

215 
Ωc
->
cb_¨g
 = cb_arg;

217 
	`TAILQ_INSERT_TAIL
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

219 
	`evhâp_£t_cb
(
ba£
->
hâp_£rvî
,

220 
c⁄°ru˘ed_uri
,

221 
evΩc_ªque°_cb
,

222 
Ωc
);

224 
	`‰ì
(
c⁄°ru˘ed_uri
);

227 
	}
}

230 
	$evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
)

232 *
ªgi°îed_uri
 = 
NULL
;

233 
evΩc
 *
Ωc
;

236 
	`TAILQ_FOREACH
(
Ωc
, &
ba£
->
ªgi°îed_Ωcs
, 
√xt
) {

237 i‡(
	`°rcmp
(
Ωc
->
uri
, 
«me
) == 0)

240 i‡(
Ωc
 =
NULL
) {

244 
	`TAILQ_REMOVE
(&
ba£
->
ªgi°îed_Ωcs
, 
Ωc
, 
√xt
);

246 
	`‰ì
((*)
Ωc
->
uri
);

247 
	`‰ì
(
Ωc
);

249 
ªgi°îed_uri
 = 
	`evΩc_c⁄°ru˘_uri
(
«me
);

252 
	`as£π
(
	`evhâp_dñ_cb
(
ba£
->
hâp_£rvî
, 
ªgi°îed_uri
) == 0);

254 
	`‰ì
(
ªgi°îed_uri
);

256 
	}
}

259 
	$evΩc_ªque°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

261 
evΩc
 *
Ωc
 = 
¨g
;

262 
evΩc_ªq_gíîic
 *
Ωc_°©e
 = 
NULL
;

265 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
 ||

266 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) <= 0)

267 
îr‹
;

274 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
öput_hooks
,

275 
ªq
,Ñeq->
öput_buf„r
) == -1)

276 
îr‹
;

278 
Ωc_°©e
 = 
	`ˇŒoc
(1, (
evΩc_ªq_gíîic
));

279 i‡(
Ωc_°©e
 =
NULL
)

280 
îr‹
;

283 
Ωc_°©e
->
ªque°
 = 
Ωc
->
	`ªque°_√w
();

284 i‡(
Ωc_°©e
->
ªque°
 =
NULL
)

285 
îr‹
;

287 
Ωc_°©e
->
Ωc
 =Ñpc;

289 i‡(
Ωc
->
	`ªque°_unm¨shÆ
(

290 
Ωc_°©e
->
ªque°
, 
ªq
->
öput_buf„r
) == -1) {

292 
îr‹
;

297 
Ωc_°©e
->
ª∂y
 = 
Ωc
->
	`ª∂y_√w
();

298 i‡(
Ωc_°©e
->
ª∂y
 =
NULL
)

299 
îr‹
;

301 
Ωc_°©e
->
hâp_ªq
 = 
ªq
;

302 
Ωc_°©e
->
d⁄e
 = 
evΩc_ªque°_d⁄e
;

305 
Ωc
->
	`cb
(
Ωc_°©e
,Ñpc->
cb_¨g
);

309 
îr‹
:

310 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

311 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

313 
	}
}

316 
	$evΩc_ªq°©e_‰ì
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

319 i‡(
Ωc_°©e
 !
NULL
) {

320 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

322 i‡(
Ωc_°©e
->
ªque°
 !
NULL
)

323 
Ωc
->
	`ªque°_‰ì
(
Ωc_°©e
->
ªque°
);

324 i‡(
Ωc_°©e
->
ª∂y
 !
NULL
)

325 
Ωc
->
	`ª∂y_‰ì
(
Ωc_°©e
->
ª∂y
);

326 
	`‰ì
(
Ωc_°©e
);

328 
	}
}

331 
	$evΩc_ªque°_d⁄e
(
evΩc_ªq_gíîic
* 
Ωc_°©e
)

333 
evhâp_ªque°
 *
ªq
 = 
Ωc_°©e
->
hâp_ªq
;

334 
evΩc
 *
Ωc
 = 
Ωc_°©e
->rpc;

335 
evbuf„r
* 
d©a
 = 
NULL
;

337 i‡(
Ωc
->
	`ª∂y_com∂ëe
(
Ωc_°©e
->
ª∂y
) == -1) {

339 
îr‹
;

342 i‡((
d©a
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

344 
îr‹
;

348 
Ωc
->
	`ª∂y_m¨shÆ
(
d©a
, 
Ωc_°©e
->
ª∂y
);

351 i‡(
	`evΩc_¥o˚ss_hooks
(&
Ωc
->
ba£
->
ouçut_hooks
,

352 
ªq
, 
d©a
) == -1)

353 
îr‹
;

356 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

357 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

361 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "OK", 
d©a
);

363 
	`evbuf„r_‰ì
(
d©a
);

365 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

369 
îr‹
:

370 i‡(
d©a
 !
NULL
)

371 
	`evbuf„r_‰ì
(
d©a
);

372 
	`evΩc_ªq°©e_‰ì
(
Ωc_°©e
);

373 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_SERVUNAVAIL
, "Service Error");

375 
	}
}

379 
evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

380 
evΩc_ªque°_wøµî
 *
˘x
);

382 
evΩc_poﬁ
 *

383 
	$evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
)

385 
evΩc_poﬁ
 *
poﬁ
 = 
	`ˇŒoc
(1, (evrpc_pool));

386 i‡(
poﬁ
 =
NULL
)

387  (
NULL
);

389 
	`TAILQ_INIT
(&
poﬁ
->
c⁄√˘i⁄s
);

390 
	`TAILQ_INIT
(&
poﬁ
->
ªque°s
);

392 
	`TAILQ_INIT
(&
poﬁ
->
öput_hooks
);

393 
	`TAILQ_INIT
(&
poﬁ
->
ouçut_hooks
);

395 
poﬁ
->
ba£
 = base;

396 
poﬁ
->
timeout
 = -1;

398  (
poﬁ
);

399 
	}
}

402 
	$evΩc_ªque°_wøµî_‰ì
(
evΩc_ªque°_wøµî
 *
ªque°
)

404 
	`‰ì
(
ªque°
->
«me
);

405 
	`‰ì
(
ªque°
);

406 
	}
}

409 
	$evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
)

411 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

412 
evΩc_ªque°_wøµî
 *
ªque°
;

413 
evΩc_hook
 *
hook
;

415 (
ªque°
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
)Ë!
NULL
) {

416 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

418 
	`evΩc_ªque°_wøµî_‰ì
(
ªque°
);

421 (
c⁄√˘i⁄
 = 
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
)Ë!
NULL
) {

422 
	`TAILQ_REMOVE
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

423 
	`evhâp_c⁄√˘i⁄_‰ì
(
c⁄√˘i⁄
);

426 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
öput_hooks
)Ë!
NULL
) {

427 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_INPUT
, 
hook
));

430 (
hook
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ouçut_hooks
)Ë!
NULL
) {

431 
	`as£π
(
	`evΩc_ªmove_hook
(
poﬁ
, 
EVRPC_OUTPUT
, 
hook
));

434 
	`‰ì
(
poﬁ
);

435 
	}
}

443 
	$evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
,

444 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
) {

445 
	`as£π
(
c⁄√˘i⁄
->
hâp_£rvî
 =
NULL
);

446 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
c⁄√˘i⁄s
, 
c⁄√˘i⁄
, 
√xt
);

451 i‡(
poﬁ
->
ba£
 !
NULL
)

452 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
c⁄√˘i⁄
, 
poﬁ
->
ba£
);

458 i‡(
c⁄√˘i⁄
->
timeout
 == -1)

459 
c⁄√˘i⁄
->
timeout
 = 
poﬁ
->timeout;

466 i‡(
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
Ë!
NULL
) {

467 
evΩc_ªque°_wøµî
 *
ªque°
 =

468 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

469 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
ªque°
, 
√xt
);

470 
	`evΩc_scheduÀ_ªque°
(
c⁄√˘i⁄
, 
ªque°
);

472 
	}
}

475 
	$evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
)

477 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

478 
	`TAILQ_FOREACH
(
evc⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

479 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

481 
poﬁ
->
timeout
 = 
timeout_ö_£cs
;

482 
	}
}

485 
evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *, *);

486 
evΩc_ªque°_timeout
(, , *);

492 
evhâp_c⁄√˘i⁄
 *

493 
	$evΩc_poﬁ_föd_c⁄√˘i⁄
(
evΩc_poﬁ
 *
poﬁ
)

495 
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
;

496 
	`TAILQ_FOREACH
(
c⁄√˘i⁄
, &
poﬁ
->
c⁄√˘i⁄s
, 
√xt
) {

497 i‡(
	`TAILQ_FIRST
(&
c⁄√˘i⁄
->
ªque°s
Ë=
NULL
)

498  (
c⁄√˘i⁄
);

501  (
NULL
);

502 
	}
}

508 
	$evΩc_scheduÀ_ªque°
(
evhâp_c⁄√˘i⁄
 *
c⁄√˘i⁄
,

509 
evΩc_ªque°_wøµî
 *
˘x
)

511 
evhâp_ªque°
 *
ªq
 = 
NULL
;

512 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

513 
evΩc_°©us
 
°©us
;

514 *
uri
 = 
NULL
;

515 
ªs
 = 0;

517 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evΩc_ª∂y_d⁄e
, 
˘x
)Ë=
NULL
)

518 
îr‹
;

521 
˘x
->
	`ªque°_m¨shÆ
(
ªq
->
ouçut_buf„r
, ctx->
ªque°
);

523 
uri
 = 
	`evΩc_c⁄°ru˘_uri
(
˘x
->
«me
);

524 i‡(
uri
 =
NULL
)

525 
îr‹
;

528 
˘x
->
evc⁄
 = 
c⁄√˘i⁄
;

531 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
ouçut_hooks
,

532 
ªq
,Ñeq->
ouçut_buf„r
) == -1)

533 
îr‹
;

535 i‡(
poﬁ
->
timeout
 > 0) {

539 
timevÆ
 
tv
;

540 
	`evutû_timî˛ór
(&
tv
);

541 
tv
.
tv_£c
 = 
poﬁ
->
timeout
;

542 
	`evtimî_add
(&
˘x
->
ev_timeout
, &
tv
);

546 
ªs
 = 
	`evhâp_make_ªque°
(
c⁄√˘i⁄
, 
ªq
, 
EVHTTP_REQ_POST
, 
uri
);

547 
	`‰ì
(
uri
);

549 i‡(
ªs
 == -1)

550 
îr‹
;

554 
îr‹
:

555 
	`mem£t
(&
°©us
, 0, (status));

556 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
;

557 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

558 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

560 
	}
}

563 
	$evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *
˘x
)

565 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

568 
	`evtimî_£t
(&
˘x
->
ev_timeout
, 
evΩc_ªque°_timeout
, ctx);

569 i‡(
poﬁ
->
ba£
 !
NULL
)

570 
	`evít_ba£_£t
(
poﬁ
->
ba£
, &
˘x
->
ev_timeout
);

573 
	`as£π
(
	`TAILQ_FIRST
(&
poﬁ
->
c⁄√˘i⁄s
Ë!
NULL
);

579 
	`TAILQ_INSERT_TAIL
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

581 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

584 
	}
}

587 
	$evΩc_ª∂y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

589 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

590 
evΩc_poﬁ
 *
poﬁ
 = 
˘x
->pool;

591 
evΩc_°©us
 
°©us
;

592 
ªs
 = -1;

595 
	`evít_dñ
(&
˘x
->
ev_timeout
);

597 
	`mem£t
(&
°©us
, 0, (status));

598 
°©us
.
hâp_ªq
 = 
ªq
;

601 i‡(
ªq
 !
NULL
) {

603 i‡(
	`evΩc_¥o˚ss_hooks
(&
poﬁ
->
öput_hooks
,

604 
ªq
,Ñeq->
öput_buf„r
) == -1) {

605 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_HOOKABORTED
;

606 
ªs
 = -1;

608 
ªs
 = 
˘x
->
	`ª∂y_unm¨shÆ
(˘x->
ª∂y
,

609 
ªq
->
öput_buf„r
);

610 i‡(
ªs
 == -1) {

611 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_BADPAYLOAD
;

615 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_TIMEOUT
;

618 i‡(
ªs
 == -1) {

620 
˘x
->
	`ª∂y_˛ór
(˘x->
ª∂y
);

623 (*
˘x
->
cb
)(&
°©us
, ctx->
ªque°
, ctx->
ª∂y
, ctx->
cb_¨g
);

625 
	`evΩc_ªque°_wøµî_‰ì
(
˘x
);

630 
	`evΩc_poﬁ_scheduÀ
(
poﬁ
);

631 
	}
}

634 
	$evΩc_poﬁ_scheduÀ
(
evΩc_poﬁ
 *
poﬁ
)

636 
evΩc_ªque°_wøµî
 *
˘x
 = 
	`TAILQ_FIRST
(&
poﬁ
->
ªque°s
);

637 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

640 i‡(
˘x
 =
NULL
)

643 i‡((
evc⁄
 = 
	`evΩc_poﬁ_föd_c⁄√˘i⁄
(
poﬁ
)Ë!
NULL
) {

644 
	`TAILQ_REMOVE
(&
poﬁ
->
ªque°s
, 
˘x
, 
√xt
);

645 
	`evΩc_scheduÀ_ªque°
(
evc⁄
, 
˘x
);

647 
	}
}

650 
	$evΩc_ªque°_timeout
(
fd
, 
wh©
, *
¨g
)

652 
evΩc_ªque°_wøµî
 *
˘x
 = 
¨g
;

653 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
˘x
->evcon;

654 
	`as£π
(
evc⁄
 !
NULL
);

656 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

657 
	}
}

	@evrpc.h

27 #i‚de‡
_EVRPC_H_


28 
	#_EVRPC_H_


	)

30 #ifde‡
__˝lu•lus


69 
evbuf„r
;

70 
evít_ba£
;

71 
evΩc_ªq_gíîic
;

74 
	sevΩc
 {

75 
TAILQ_ENTRY
(
evΩc
Ë
√xt
;

78 c⁄° * 
uri
;

81 *(*
ªque°_√w
)();

84 (*
ªque°_‰ì
)(*);

87 (*
ªque°_unm¨shÆ
)(*, 
evbuf„r
 *);

90 *(*
ª∂y_√w
)();

93 (*
ª∂y_‰ì
)(*);

96 (*
ª∂y_com∂ëe
)(*);

99 (*
ª∂y_m¨shÆ
)(
evbuf„r
*, *);

102 (*
cb
)(
evΩc_ªq_gíîic
 *, *);

103 *
cb_¨g
;

106 
evΩc_ba£
 *
ba£
;

113 
	#EVRPC_STRUCT
(
Ω˙ame
Ë
evΩc_ªq__
##
	)
rpcname

115 
evhâp_ªque°
;

116 
evΩc_°©us
;

119 
	sevΩc_ªq_gíîic
 {

121 *
ªque°
;

124 *
ª∂y
;

130 
evΩc
 *
Ωc
;

135 
evhâp_ªque°
* 
hâp_ªq
;

140 (*
d⁄e
)(
evΩc_ªq_gíîic
* 
Ωc
);

154 
	#EVRPC_HEADER
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

155 
	`EVRPC_STRUCT
(
Ω˙ame
) { \

156 
ªq°ru˘
* 
ªque°
; \

157 
Ωly°ru˘
* 
ª∂y
; \

158 
evΩc
* 
Ωc
; \

159 
evhâp_ªque°
* 
hâp_ªq
; \

160 (*
d⁄e
)(
evΩc_°©us
 *, \

161 
evΩc
* 
Ωc
, *
ªque°
, *
ª∂y
); \

163 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *, \

164 
ªq°ru˘
 *, 
Ωly°ru˘
 *, \

165 (*)(
evΩc_°©us
 *, \

166 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

167 *);

	)

179 
	#EVRPC_GENERATE
(
Ω˙ame
, 
ªq°ru˘
, 
Ωly°ru˘
) \

180 
evΩc_£nd_ªque°_
##
	`Ω˙ame
(
evΩc_poﬁ
 *
poﬁ
, \

181 
ªq°ru˘
 *
ªque°
, 
Ωly°ru˘
 *
ª∂y
, \

182 (*
cb
)(
evΩc_°©us
 *, \

183 
ªq°ru˘
 *, 
Ωly°ru˘
 *, *
cb¨g
), \

184 *
cb¨g
) { \

185 
evΩc_°©us
 
°©us
; \

186 
evΩc_ªque°_wøµî
 *
˘x
; \

187 
˘x
 = (
evΩc_ªque°_wøµî
 *) \

188 
	`mÆloc
((
evΩc_ªque°_wøµî
)); \

189 i‡(
˘x
 =
NULL
) \

190 
îr‹
; \

191 
˘x
->
poﬁ
 =Öool; \

192 
˘x
->
evc⁄
 = 
NULL
; \

193 
˘x
->
«me
 = 
	`°rdup
(#rpcname); \

194 i‡(
˘x
->
«me
 =
NULL
) { \

195 
	`‰ì
(
˘x
); \

196 
îr‹
; \

198 
˘x
->
cb
 = ((*)(
evΩc_°©us
 *, \

199 *, *, *))
cb
; \

200 
˘x
->
cb_¨g
 = 
cb¨g
; \

201 
˘x
->
ªque°
 = (*)request; \

202 
˘x
->
ª∂y
 = (*)reply; \

203 
˘x
->
ªque°_m¨shÆ
 = ((*)(
evbuf„r
 *, *))
ªq°ru˘
##
_m¨shÆ
; \

204 
˘x
->
ª∂y_˛ór
 = ((*)(*))
Ωly°ru˘
##
_˛ór
; \

205 
˘x
->
ª∂y_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
Ωly°ru˘
##
_unm¨shÆ
; \

206  (
	`evΩc_make_ªque°
(
˘x
)); \

207 
îr‹
: \

208 
	`mem£t
(&
°©us
, 0, (status)); \

209 
°©us
.
îr‹
 = 
EVRPC_STATUS_ERR_UNSTARTED
; \

210 (*(
cb
))(&
°©us
, 
ªque°
, 
ª∂y
, 
cb¨g
); \

212 }

	)

223 
	#EVRPC_REQUEST_HTTP
(
Ωc_ªq
Ë‘pc_ªq)->
hâp_ªq


	)

233 
	#EVRPC_REQUEST_DONE
(
Ωc_ªq
) do { \

234 
evΩc_ªq_gíîic
 *
_ªq
 = (evΩc_ªq_gíîi¯*)(
Ωc_ªq
); \

235 
_ªq
->
	`d⁄e
(_req); \

236 } 0)

	)

240 
	#EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
) \

242 (
Ωc
)->
uri
 = 
	`°rdup
(#name); \

243 i‡((
Ωc
)->
uri
 =
NULL
) { \

244 
	`Ârötf
(
°dîr
, "failedÅoÑegister object\n"); \

245 
	`exô
(1); \

247 (
Ωc
)->
ªque°_√w
 = (*(*)())
ªque°
##
_√w
; \

248 (
Ωc
)->
ªque°_‰ì
 = ((*)(*))
ªque°
##
_‰ì
; \

249 (
Ωc
)->
ªque°_unm¨shÆ
 = ((*)(*, 
evbuf„r
 *))
ªque°
##
_unm¨shÆ
; \

250 (
Ωc
)->
ª∂y_√w
 = (*(*)())
ª∂y
##
_√w
; \

251 (
Ωc
)->
ª∂y_‰ì
 = ((*)(*))
ª∂y
##
_‰ì
; \

252 (
Ωc
)->
ª∂y_com∂ëe
 = ((*)(*))
ª∂y
##
_com∂ëe
; \

253 (
Ωc
)->
ª∂y_m¨shÆ
 = ((*)(
evbuf„r
*, *))
ª∂y
##
_m¨shÆ
; \

254 } 0)

	)

256 
evΩc_ba£
;

257 
evhâp
;

267 
evΩc_ba£
 *
evΩc_öô
(
evhâp
 *
£rvî
);

277 
evΩc_‰ì
(
evΩc_ba£
 *
ba£
);

295 
	#EVRPC_REGISTER
(
ba£
, 
«me
, 
ªque°
, 
ª∂y
, 
ˇŒback
, 
cb¨g
) \

297 
evΩc
* 
Ωc
 = (evΩ¯*)
	`ˇŒoc
(1, (evrpc)); \

298 
	`EVRPC_REGISTER_OBJECT
(
Ωc
, 
«me
, 
ªque°
, 
ª∂y
); \

299 
	`evΩc_ªgi°î_Ωc
(
ba£
, 
Ωc
, \

300 ((*)(
evΩc_ªq_gíîic
*, *))
ˇŒback
, 
cb¨g
); \

301 } 0)

	)

303 
evΩc_ªgi°î_Ωc
(
evΩc_ba£
 *, 
evΩc
 *,

304 (*)(
evΩc_ªq_gíîic
*, *), *);

314 
	#EVRPC_UNREGISTER
(
ba£
, 
«me
Ë
	`evΩc_uƒegi°î_Ωc
(ba£, #«me)

	)

316 
evΩc_uƒegi°î_Ωc
(
evΩc_ba£
 *
ba£
, c⁄° *
«me
);

322 
evΩc_poﬁ
;

323 
evhâp_c⁄√˘i⁄
;

328 
	sevΩc_°©us
 {

329 
	#EVRPC_STATUS_ERR_NONE
 0

	)

330 
	#EVRPC_STATUS_ERR_TIMEOUT
 1

	)

331 
	#EVRPC_STATUS_ERR_BADPAYLOAD
 2

	)

332 
	#EVRPC_STATUS_ERR_UNSTARTED
 3

	)

333 
	#EVRPC_STATUS_ERR_HOOKABORTED
 4

	)

334 
îr‹
;

337 
evhâp_ªque°
 *
hâp_ªq
;

340 
	sevΩc_ªque°_wøµî
 {

341 
TAILQ_ENTRY
(
evΩc_ªque°_wøµî
Ë
√xt
;

344 
evΩc_poﬁ
 *
poﬁ
;

347 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

350 
evít
 
ev_timeout
;

353 *
«me
;

356 (*
cb
)(
evΩc_°©us
*, *
ªque°
, *
ª∂y
, *
¨g
);

357 *
cb_¨g
;

359 *
ªque°
;

360 *
ª∂y
;

363 (*
ªque°_m¨shÆ
)(
evbuf„r
 *, *);

366 (*
ª∂y_˛ór
)(*);

369 (*
ª∂y_unm¨shÆ
)(*, 
evbuf„r
*);

387 
	#EVRPC_MAKE_REQUEST
(
«me
, 
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
) \

388 
evΩc_£nd_ªque°_
##
	`«me
(
poﬁ
, 
ªque°
, 
ª∂y
, 
cb
, 
cb¨g
)

	)

390 
evΩc_make_ªque°
(
evΩc_ªque°_wøµî
 *);

402 
evΩc_poﬁ
 *
evΩc_poﬁ_√w
(
evít_ba£
 *
ba£
);

408 
evΩc_poﬁ_‰ì
(
evΩc_poﬁ
 *
poﬁ
);

413 
evΩc_poﬁ_add_c⁄√˘i⁄
(
evΩc_poﬁ
 *,

414 
evhâp_c⁄√˘i⁄
 *);

431 
evΩc_poﬁ_£t_timeout
(
evΩc_poﬁ
 *
poﬁ
, 
timeout_ö_£cs
);

438 
	eEVRPC_HOOK_TYPE
 {

439 
EVRPC_INPUT
,

440 
EVRPC_OUTPUT


443 #i‚de‡
WIN32


446 
	#INPUT
 
EVRPC_INPUT


	)

449 
	#OUTPUT
 
EVRPC_OUTPUT


	)

465 *
evΩc_add_hook
(*
vba£
,

466 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

467 (*
cb
)(
evhâp_ªque°
 *, 
evbuf„r
 *, *),

468 *
cb_¨g
);

478 
evΩc_ªmove_hook
(*
vba£
,

479 
EVRPC_HOOK_TYPE
 
hook_ty≥
,

480 *
h™dÀ
);

482 #ifde‡
__˝lu•lus


	@evsignal.h

27 #i‚de‡
_EVSIGNAL_H_


28 
	#_EVSIGNAL_H_


	)

30 (*
	tev_sigh™dÀr_t
)();

32 
	sevsig«l_öfo
 {

33 
evít
 
ev_sig«l
;

34 
ev_sig«l_∑ú
[2];

35 
ev_sig«l_added
;

36 vﬁ©ûê
sig_©omic_t
 
evsig«l_ˇught
;

37 
evít_li°
 
evsigevíts
[
NSIG
];

38 
sig_©omic_t
 
evsigˇught
[
NSIG
];

39 #ifde‡
HAVE_SIGACTION


40 
siga˘i⁄
 **
sh_ﬁd
;

42 
ev_sigh™dÀr_t
 **
sh_ﬁd
;

44 
sh_ﬁd_max
;

46 
	`evsig«l_öô
(
evít_ba£
 *);

47 
	`evsig«l_¥o˚ss
(
evít_ba£
 *);

48 
	`evsig«l_add
(
evít
 *);

49 
	`evsig«l_dñ
(
evít
 *);

50 
	`evsig«l_dóŒoc
(
evít_ba£
 *);

	@evutil.c

27 #ifde‡
HAVE_CONFIG_H


28 
	~"c⁄fig.h
"

31 #ifde‡
WIN32


32 
	~<wösock2.h
>

33 
	#WIN32_LEAN_AND_MEAN


	)

34 
	~<wödows.h
>

35 #unde‡
WIN32_LEAN_AND_MEAN


38 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_SOCKET_H


40 
	~<sys/sockë.h
>

42 #ifde‡
HAVE_UNISTD_H


43 
	~<uni°d.h
>

45 #ifde‡
HAVE_FCNTL_H


46 
	~<f˙é.h
>

48 #ifde‡
HAVE_STDLIB_H


49 
	~<°dlib.h
>

51 
	~<î∫o.h
>

52 #i‡
deföed
 
WIN32
 && !deföed(
HAVE_GETTIMEOFDAY_H
)

53 
	~<sys/timeb.h
>

55 
	~<°dio.h
>

56 
	~<sig«l.h
>

58 
	~<sys/queue.h
>

59 
	~"evít.h
"

60 
	~"evít-öã∫Æ.h
"

61 
	~"evutû.h
"

62 
	~"log.h
"

65 
	$evutû_sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
[2])

67 #i‚de‡
WIN32


68  
	`sockë∑ú
(
Ámûy
, 
ty≥
, 
¥Ÿocﬁ
, 
fd
);

77 
li°íî
 = -1;

78 
c⁄√˘‹
 = -1;

79 
ac˚±‹
 = -1;

80 
sockaddr_ö
 
li°í_addr
;

81 
sockaddr_ö
 
c⁄√˘_addr
;

82 
size
;

83 
ßved_î∫o
 = -1;

85 i‡(
¥Ÿocﬁ


86 #ifde‡
AF_UNIX


87 || 
Ámûy
 !
AF_UNIX


90 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEAFNOSUPPORT
);

93 i‡(!
fd
) {

94 
	`EVUTIL_SET_SOCKET_ERROR
(
WSAEINVAL
);

98 
li°íî
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

99 i‡(
li°íî
 < 0)

101 
	`mem£t
(&
li°í_addr
, 0, (listen_addr));

102 
li°í_addr
.
sö_Ámûy
 = 
AF_INET
;

103 
li°í_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

104 
li°í_addr
.
sö_p‹t
 = 0;

105 i‡(
	`böd
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
,  (listen_addr))

107 
tidy_up_™d_Áû
;

108 i‡(
	`li°í
(
li°íî
, 1) == -1)

109 
tidy_up_™d_Áû
;

111 
c⁄√˘‹
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

112 i‡(
c⁄√˘‹
 < 0)

113 
tidy_up_™d_Áû
;

115 
size
 = (
c⁄√˘_addr
);

116 i‡(
	`gësock«me
(
li°íî
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

117 
tidy_up_™d_Áû
;

118 i‡(
size
 ! (
c⁄√˘_addr
))

119 
ab‹t_tidy_up_™d_Áû
;

120 i‡(
	`c⁄√˘
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
,

121 (
c⁄√˘_addr
)) == -1)

122 
tidy_up_™d_Áû
;

124 
size
 = (
li°í_addr
);

125 
ac˚±‹
 = 
	`ac˚±
(
li°íî
, (
sockaddr
 *Ë&
li°í_addr
, &
size
);

126 i‡(
ac˚±‹
 < 0)

127 
tidy_up_™d_Áû
;

128 i‡(
size
 !(
li°í_addr
))

129 
ab‹t_tidy_up_™d_Áû
;

130 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

133 i‡(
	`gësock«me
(
c⁄√˘‹
, (
sockaddr
 *Ë&
c⁄√˘_addr
, &
size
) == -1)

134 
tidy_up_™d_Áû
;

135 i‡(
size
 ! (
c⁄√˘_addr
)

136 || 
li°í_addr
.
sö_Ámûy
 !
c⁄√˘_addr
.sin_family

137 || 
li°í_addr
.
sö_addr
.
s_addr
 !
c⁄√˘_addr
.sin_addr.s_addr

138 || 
li°í_addr
.
sö_p‹t
 !
c⁄√˘_addr
.sin_port)

139 
ab‹t_tidy_up_™d_Áû
;

140 
fd
[0] = 
c⁄√˘‹
;

141 
fd
[1] = 
ac˚±‹
;

145 
ab‹t_tidy_up_™d_Áû
:

146 
ßved_î∫o
 = 
WSAECONNABORTED
;

147 
tidy_up_™d_Áû
:

148 i‡(
ßved_î∫o
 < 0)

149 
ßved_î∫o
 = 
	`WSAGëLa°Eº‹
();

150 i‡(
li°íî
 != -1)

151 
	`EVUTIL_CLOSESOCKET
(
li°íî
);

152 i‡(
c⁄√˘‹
 != -1)

153 
	`EVUTIL_CLOSESOCKET
(
c⁄√˘‹
);

154 i‡(
ac˚±‹
 != -1)

155 
	`EVUTIL_CLOSESOCKET
(
ac˚±‹
);

157 
	`EVUTIL_SET_SOCKET_ERROR
(
ßved_î∫o
);

160 
	}
}

163 
	$evutû_make_sockë_n⁄blockög
(
fd
)

165 #ifde‡
WIN32


167 
n⁄blockög
 = 1;

168 
	`io˘lsockë
(
fd
, 
FIONBIO
, (*Ë&
n⁄blockög
);

171 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
) == -1) {

172 
	`evít_w¨n
("fcntl(O_NONBLOCK)");

177 
	}
}

179 
ev_öt64_t


180 
	$evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
)

182 #ifde‡
HAVE_STRTOLL


183  (
ev_öt64_t
)
	`°πﬁl
(
s
, 
íd±r
, 
ba£
);

184 #ñi‡
SIZEOF_LONG
 == 8

185  (
ev_öt64_t
)
	`°πﬁ
(
s
, 
íd±r
, 
ba£
);

186 #ñi‡
	`deföed
(
WIN32
Ë&& deföed(
_MSC_VER
) && _MSC_VER < 1300

189 
ev_öt64_t
 
r
;

190 i‡(
ba£
 != 10)

192 
r
 = (
ev_öt64_t
Ë
	`_©oi64
(
s
);

193 
	`is•a˚
(*
s
))

194 ++
s
;

195 
	`isdigô
(*
s
))

196 ++
s
;

197 i‡(
íd±r
)

198 *
íd±r
 = (*Ë
s
;

199  
r
;

200 #ñi‡
	`deföed
(
WIN32
)

201  (
ev_öt64_t
Ë
	`_°πoi64
(
s
, 
íd±r
, 
ba£
);

205 
	}
}

207 #i‚de‡
_EVENT_HAVE_GETTIMEOFDAY


209 
	$evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

211 
_timeb
 
tb
;

213 if(
tv
 =
NULL
)

216 
	`_·ime
(&
tb
);

217 
tv
->
tv_£c
 = (Ë
tb
.
time
;

218 
tv
->
tv_u£c
 = ((Ë
tb
.
mûlôm
) * 1000;

220 
	}
}

224 
	$evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

226 
r
;

227 
va_li°
 
≠
;

228 
	`va_°¨t
(
≠
, 
f‹m©
);

229 
r
 = 
	`evutû_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

230 
	`va_íd
(
≠
);

231  
r
;

232 
	}
}

235 
	$evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

237 #ifde‡
_MSC_VER


238 
r
 = 
	`_v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

239 
buf
[
buÊí
-1] = '\0';

240 i‡(
r
 >= 0)

241  
r
;

243  
	`_vs˝rötf
(
f‹m©
, 
≠
);

245 
r
 = 
	`v¢¥ötf
(
buf
, 
buÊí
, 
f‹m©
, 
≠
);

246 
buf
[
buÊí
-1] = '\0';

247  
r
;

249 
	}
}

252 
	$evutû_is£tugid
()

254 #ifde‡
_EVENT_HAVE_ISSETUGID


255  
	`is£tugid
();

258 #ifde‡
_EVENT_HAVE_GETEUID


259 i‡(
	`gëuid
(Ë!
	`gëeuid
())

262 #ifde‡
_EVENT_HAVE_GETEGID


263 i‡(
	`gëgid
(Ë!
	`gëegid
())

268 
	}
}

271 
	$evutû_gëív
(c⁄° *
v¨«me
)

273 i‡(
	`evutû_is£tugid
())

274  
NULL
;

276  
	`gëív
(
v¨«me
);

277 
	}
}

	@evutil.h

27 #i‚de‡
_EVUTIL_H_


28 
	#_EVUTIL_H_


	)

37 #ifde‡
__˝lu•lus


41 
	~<evít-c⁄fig.h
>

42 #ifde‡
_EVENT_HAVE_SYS_TIME_H


43 
	~<sys/time.h
>

45 #ifde‡
_EVENT_HAVE_STDINT_H


46 
	~<°döt.h
>

47 #ñi‡
deföed
(
_EVENT_HAVE_INTTYPES_H
)

48 
	~<öây≥s.h
>

50 #ifde‡
_EVENT_HAVE_SYS_TYPES_H


51 
	~<sys/ty≥s.h
>

53 
	~<°d¨g.h
>

55 #ifde‡
_EVENT_HAVE_UINT64_T


56 
	#ev_uöt64_t
 
uöt64_t


	)

57 
	#ev_öt64_t
 
öt64_t


	)

58 #ñi‡
deföed
(
WIN32
)

59 
	#ev_uöt64_t
 
__öt64


	)

60 
	#ev_öt64_t
 sig√d 
__öt64


	)

61 #ñi‡
_EVENT_SIZEOF_LONG_LONG
 == 8

62 
	#ev_uöt64_t
 

	)

63 
	#ev_öt64_t
 

	)

64 #ñi‡
_EVENT_SIZEOF_LONG
 == 8

65 
	#ev_uöt64_t
 

	)

66 
	#ev_öt64_t
 

	)

71 #ifde‡
_EVENT_HAVE_UINT32_T


72 
	#ev_uöt32_t
 
uöt32_t


	)

73 #ñi‡
deföed
(
WIN32
)

74 
	#ev_uöt32_t
 

	)

75 #ñi‡
_EVENT_SIZEOF_LONG
 == 4

76 
	#ev_uöt32_t
 

	)

77 #ñi‡
_EVENT_SIZEOF_INT
 == 4

78 
	#ev_uöt32_t
 

	)

83 #ifde‡
_EVENT_HAVE_UINT16_T


84 
	#ev_uöt16_t
 
uöt16_t


	)

85 #ñi‡
deföed
(
WIN32
)

86 
	#ev_uöt16_t
 

	)

87 #ñi‡
_EVENT_SIZEOF_INT
 == 2

88 
	#ev_uöt16_t
 

	)

89 #ñi‡
_EVENT_SIZEOF_SHORT
 == 2

90 
	#ev_uöt16_t
 

	)

95 #ifde‡
_EVENT_HAVE_UINT8_T


96 
	#ev_uöt8_t
 
uöt8_t


	)

98 
	#ev_uöt8_t
 

	)

101 
evutû_sockë∑ú
(
d
, 
ty≥
, 
¥Ÿocﬁ
, 
sv
[2]);

102 
evutû_make_sockë_n⁄blockög
(
sock
);

103 #ifde‡
WIN32


104 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£sockë
(s)

	)

106 
	#EVUTIL_CLOSESOCKET
(
s
Ë
	`˛o£
(s)

	)

109 #ifde‡
WIN32


110 
	#EVUTIL_SOCKET_ERROR
(Ë
	`WSAGëLa°Eº‹
()

	)

111 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

112 dÿ{ 
	`WSASëLa°Eº‹
(
îrcode
); } 0)

	)

114 
	#EVUTIL_SOCKET_ERROR
(Ë(
î∫o
)

	)

115 
	#EVUTIL_SET_SOCKET_ERROR
(
îrcode
) \

116 dÿ{ 
î∫o
 = (
îrcode
); } 0)

	)

122 #ifde‡
_EVENT_HAVE_TIMERADD


123 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
Ë
	`timîadd
(—vp), (uvp), (vvp))

	)

124 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
Ë
	`timîsub
(—vp), (uvp), (vvp))

	)

126 
	#evutû_timîadd
(
tvp
, 
uvp
, 
vvp
) \

128 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

129 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

130 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

131 (
vvp
)->
tv_£c
++; \

132 (
vvp
)->
tv_u£c
 -= 1000000; \

134 } 0)

	)

135 
	#evutû_timîsub
(
tvp
, 
uvp
, 
vvp
) \

137 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

138 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

139 i‡((
vvp
)->
tv_u£c
 < 0) { \

140 (
vvp
)->
tv_£c
--; \

141 (
vvp
)->
tv_u£c
 += 1000000; \

143 } 0)

	)

146 #ifde‡
_EVENT_HAVE_TIMERCLEAR


147 
	#evutû_timî˛ór
(
tvp
Ë
	`timî˛ór
—vp)

	)

149 
	#evutû_timî˛ór
(
tvp
Ë—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)

152 
	#evutû_timîcmp
(
tvp
, 
uvp
, 
cmp
) \

153 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

154 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

155 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

157 #ifde‡
_EVENT_HAVE_TIMERISSET


158 
	#evutû_timîis£t
(
tvp
Ë
	`timîis£t
—vp)

	)

160 
	#evutû_timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
ev_öt64_t
 
evutû_°πﬁl
(c⁄° *
s
, **
íd±r
, 
ba£
);

168 #ifde‡
_EVENT_HAVE_GETTIMEOFDAY


169 
	#evutû_gëtimeofday
(
tv
, 
tz
Ë
	`gëtimeofday
(—v), (tz))

	)

171 
timez⁄e
;

172 
evutû_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
);

175 
evutû_¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, ...)

176 #ifde‡
__GNUC__


177 
__©åibuã__
((
f‹m©
(
¥ötf
, 3, 4)))

180 
evutû_v¢¥ötf
(*
buf
, 
size_t
 
buÊí
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

182 #ifde‡
__˝lu•lus


	@http-internal.h

10 #i‚de‡
_HTTP_H_


11 
	#_HTTP_H_


	)

13 
	#HTTP_CONNECT_TIMEOUT
 45

	)

14 
	#HTTP_WRITE_TIMEOUT
 50

	)

15 
	#HTTP_READ_TIMEOUT
 50

	)

17 
	#HTTP_PREFIX
 "hâp://"

	)

18 
	#HTTP_DEFAULTPORT
 80

	)

20 
	emesßge_ªad_°©us
 {

21 
	mALL_DATA_READ
 = 1,

22 
	mMORE_DATA_EXPECTED
 = 0,

23 
	mDATA_CORRUPTED
 = -1,

24 
	mREQUEST_CANCELED
 = -2

27 
	eevhâp_c⁄√˘i⁄_îr‹
 {

28 
	mEVCON_HTTP_TIMEOUT
,

29 
	mEVCON_HTTP_EOF
,

30 
	mEVCON_HTTP_INVALID_HEADER


33 
	gevbuf„r
;

34 
	gaddröfo
;

35 
	gevhâp_ªque°
;

39 
	eevhâp_c⁄√˘i⁄_°©e
 {

40 
	mEVCON_DISCONNECTED
,

41 
	mEVCON_CONNECTING
,

42 
	mEVCON_IDLE
,

43 
	mEVCON_READING_FIRSTLINE
,

45 
	mEVCON_READING_HEADERS
,

46 
	mEVCON_READING_BODY
,

47 
	mEVCON_READING_TRAILER
,

48 
	mEVCON_WRITING


51 
	gevít_ba£
;

53 
	sevhâp_c⁄√˘i⁄
 {

55 
TAILQ_ENTRY
(
evhâp_c⁄√˘i⁄
Ë(
	m√xt
);

57 
	mfd
;

58 
evít
 
	mev
;

59 
evít
 
	m˛o£_ev
;

60 
evbuf„r
 *
	möput_buf„r
;

61 
evbuf„r
 *
	mouçut_buf„r
;

63 *
	mböd_addªss
;

64 
u_sh‹t
 
	mböd_p‹t
;

66 *
	maddªss
;

67 
u_sh‹t
 
	mp‹t
;

69 
	mÊags
;

70 
	#EVHTTP_CON_INCOMING
 0x0001

	)

71 
	#EVHTTP_CON_OUTGOING
 0x0002

	)

72 
	#EVHTTP_CON_CLOSEDETECT
 0x0004

	)

74 
	mtimeout
;

75 
	mªåy_˙t
;

76 
	mªåy_max
;

78 
evhâp_c⁄√˘i⁄_°©e
 
	m°©e
;

81 
evhâp
 *
	mhâp_£rvî
;

83 
TAILQ_HEAD
(
evc⁄_ªque°q
, 
evhâp_ªque°
Ë
	mªque°s
;

85 (*
	mcb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

86 *
	mcb_¨g
;

88 (*
	m˛o£cb
)(
	mevhâp_c⁄√˘i⁄
 *, *);

89 *
	m˛o£cb_¨g
;

91 
evít_ba£
 *
	mba£
;

94 
	sevhâp_cb
 {

95 
TAILQ_ENTRY
(
evhâp_cb
Ë
	m√xt
;

97 *
	mwh©
;

99 (*
	mcb
)(
evhâp_ªque°
 *
	mªq
, *);

100 *
	mcb¨g
;

104 
TAILQ_HEAD
(
evc⁄q
, 
evhâp_c⁄√˘i⁄
);

107 
	sevhâp_bound_sockë
 {

108 
TAILQ_ENTRY
(
evhâp_bound_sockë
Ë(
	m√xt
);

110 
evít
 
	mböd_ev
;

113 
	sevhâp
 {

114 
TAILQ_HEAD
(
boundq
, 
evhâp_bound_sockë
Ë
	msockës
;

116 
TAILQ_HEAD
(
hâpcbq
, 
evhâp_cb
Ë
	mˇŒbacks
;

117 
evc⁄q
 
	mc⁄√˘i⁄s
;

119 
	mtimeout
;

121 (*
	mgícb
)(
evhâp_ªque°
 *
	mªq
, *);

122 *
	mgícb¨g
;

124 
evít_ba£
 *
	mba£
;

128 
evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *);

131 
evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *);

134 
evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *,

135 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
);

137 
evhâp_gë_ªque°
(
evhâp
 *, , 
sockaddr
 *, 
sockÀn_t
);

139 
evhâp_ho°p‹tfûe
(*, **, 
u_sh‹t
 *, **);

141 
evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *, 
evbuf„r
*);

142 
evhâp_∑r£_hódîs
(
evhâp_ªque°
 *, 
evbuf„r
*);

144 
evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *);

145 
evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *, 
evhâp_ªque°
 *);

147 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *,

148 (*)(
evhâp_c⁄√˘i⁄
 *, *), *);

151 
	`evhâp_ª•⁄£_code
(
evhâp_ªque°
 *, , const *);

152 
	`evhâp_£nd_∑ge
(
evhâp_ªque°
 *, 
evbuf„r
 *);

	@http.c

28 #ifde‡
HAVE_CONFIG_H


29 
	~"c⁄fig.h
"

32 #ifde‡
HAVE_SYS_PARAM_H


33 
	~<sys/∑øm.h
>

35 #ifde‡
HAVE_SYS_TYPES_H


36 
	~<sys/ty≥s.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 #ifde‡
HAVE_SYS_IOCCOM_H


43 
	~<sys/ioccom.h
>

46 #i‚de‡
WIN32


47 
	~<sys/ªsour˚.h
>

48 
	~<sys/sockë.h
>

49 
	~<sys/°©.h
>

50 
	~<sys/waô.h
>

53 
	~<sys/queue.h
>

55 #i‚de‡
WIN32


56 
	~<√töë/ö.h
>

57 
	~<√tdb.h
>

60 #ifde‡
WIN32


61 
	~<wösock2.h
>

64 
	~<as£π.h
>

65 
	~<˘y≥.h
>

66 
	~<î∫o.h
>

67 
	~<°dio.h
>

68 
	~<°dlib.h
>

69 
	~<°rög.h
>

70 #i‚de‡
WIN32


71 
	~<sy¶og.h
>

73 
	~<sig«l.h
>

74 
	~<time.h
>

75 #ifde‡
HAVE_UNISTD_H


76 
	~<uni°d.h
>

78 #ifde‡
HAVE_FCNTL_H


79 
	~<f˙é.h
>

82 #unde‡
timeout_≥ndög


83 #unde‡
timeout_öôülized


85 
	~"°æ˝y-öã∫Æ.h
"

86 
	~"evít.h
"

87 
	~"evhâp.h
"

88 
	~"evutû.h
"

89 
	~"log.h
"

90 
	~"hâp-öã∫Æ.h
"

92 #ifde‡
WIN32


93 
	#°rˇ£cmp
 
_°ricmp


	)

94 
	#°∫ˇ£cmp
 
_°∫icmp


	)

95 
	#°rdup
 
_°rdup


	)

98 #i‚de‡
HAVE_GETNAMEINFO


99 
	#NI_MAXSERV
 32

	)

100 
	#NI_MAXHOST
 1025

	)

102 
	#NI_NUMERICHOST
 1

	)

103 
	#NI_NUMERICSERV
 2

	)

106 
	$Áke_gë«meöfo
(c⁄° 
sockaddr
 *
ß
, 
size_t
 
ßÀn
, *
ho°
,

107 
size_t
 
ho°Àn
, *
£rv
, size_à
£rvÀn
, 
Êags
)

109 
sockaddr_ö
 *
sö
 = (sockaddr_ö *)
ß
;

111 i‡(
£rv
 !
NULL
) {

112 
tmp£rv
[16];

113 
	`evutû_¢¥ötf
(
tmp£rv
, (tmpserv),

114 "%d", 
	`¡ohs
(
sö
->
sö_p‹t
));

115 i‡(
	`°æ˝y
(
£rv
, 
tmp£rv
, 
£rvÀn
) >= servlen)

119 i‡(
ho°
 !
NULL
) {

120 i‡(
Êags
 & 
NI_NUMERICHOST
) {

121 i‡(
	`°æ˝y
(
ho°
, 
	`öë_¡ﬂ
(
sö
->
sö_addr
),

122 
ho°Àn
) >= hostlen)

127 
ho°ít
 *
hp
;

128 
hp
 = 
	`gëho°byaddr
((*)&
sö
->
sö_addr
,

129 (
ö_addr
), 
AF_INET
);

130 i‡(
hp
 =
NULL
)

133 i‡(
	`°æ˝y
(
ho°
, 
hp
->
h_«me
, 
ho°Àn
) >= hostlen)

140 
	}
}

144 #i‚de‡
HAVE_GETADDRINFO


145 
	saddröfo
 {

146 
	mai_Ámûy
;

147 
	mai_sockty≥
;

148 
	mai_¥Ÿocﬁ
;

149 
size_t
 
	mai_addæí
;

150 
sockaddr
 *
	mai_addr
;

151 
addröfo
 *
	mai_√xt
;

154 
	$Áke_gëaddröfo
(c⁄° *
ho°«me
, 
addröfo
 *
ai
)

156 
ho°ít
 *
he
 = 
NULL
;

157 
sockaddr_ö
 *
ß
;

158 i‡(
ho°«me
) {

159 
he
 = 
	`gëho°by«me
(
ho°«me
);

160 i‡(!
he
)

163 
ai
->
ai_Ámûy
 = 
he
 ? he->
h_addπy≥
 : 
AF_INET
;

164 
ai
->
ai_sockty≥
 = 
SOCK_STREAM
;

165 
ai
->
ai_¥Ÿocﬁ
 = 0;

166 
ai
->
ai_addæí
 = (
sockaddr_ö
);

167 i‡(
NULL
 =(
ai
->
ai_addr
 = 
	`mÆloc
◊i->
ai_addæí
)))

169 
ß
 = (
sockaddr_ö
*)
ai
->
ai_addr
;

170 
	`mem£t
(
ß
, 0, 
ai
->
ai_addæí
);

171 i‡(
he
) {

172 
ß
->
sö_Ámûy
 = 
he
->
h_addπy≥
;

173 
	`mem˝y
(&
ß
->
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

175 
ß
->
sö_Ámûy
 = 
AF_INET
;

176 
ß
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

178 
ai
->
ai_√xt
 = 
NULL
;

180 
	}
}

182 
	$Áke_‰ìaddröfo
(
addröfo
 *
ai
)

184 
	`‰ì
(
ai
->
ai_addr
);

185 
	}
}

188 #i‚de‡
MIN


189 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

193 
	#EVHTTP_BASE_SET
(
x
, 
y
) do { \

194 i‡((
x
)->
ba£
 !
NULL
Ë
	`evít_ba£_£t
((x)->ba£, 
y
); \

195 } 0)

	)

197 
debug
;

199 
sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
);

200 
böd_sockë_ai
(
addröfo
 *, 
ªu£
);

201 
böd_sockë
(c⁄° *, 
u_sh‹t
, 
ªu£
);

202 
«me_‰om_addr
(
sockaddr
 *, 
sockÀn_t
, **, **);

203 
evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(

204 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

205 
evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(

206 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

207 
evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(

208 
evhâp_c⁄√˘i⁄
 *
evc⁄
);

209 
evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
);

210 
evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

211 
evhâp_ªque°
 *
ªq
);

212 
evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

213 
evhâp_ªque°
 *
ªq
);

214 
evhâp_add_hódî_öã∫Æ
(
evkeyvÆq
 *
hódîs
,

215 c⁄° *
key
, c⁄° *
vÆue
);

216 
evhâp_decode_uri_öã∫Æ
(c⁄° *
uri
, 
size_t
 
Àngth
,

217 *
ªt
, 
Æways_decode_∂us
);

219 
evhâp_ªad
(, , *);

220 
evhâp_wrôe
(, , *);

222 #i‚de‡
HAVE_STRSEP


226 
	$°r£p
(**
s
, c⁄° *
dñ
)

228 *
d
, *
tok
;

229 
	`as£π
(
	`°æí
(
dñ
) == 1);

230 i‡(!
s
 || !*s)

231  
NULL
;

232 
tok
 = *
s
;

233 
d
 = 
	`°r°r
(
tok
, 
dñ
);

234 i‡(
d
) {

235 *
d
 = '\0';

236 *
s
 = 
d
 + 1;

238 *
s
 = 
NULL
;

239  
tok
;

240 
	}
}

244 
	$html_ª∂a˚
(
ch
, *
buf
)

246 
ch
) {

262 
buf
[0] = 
ch
;

263 
buf
[1] = '\0';

265  
buf
;

266 
	}
}

276 
	$evhâp_htmÀsˇ≥
(c⁄° *
html
)

278 
i
, 
√w_size
 = 0, 
ﬁd_size
 = 
	`°æí
(
html
);

279 *
esˇ≥d_html
, *
p
;

280 
s¸©ch_•a˚
[2];

282 
i
 = 0; i < 
ﬁd_size
; ++i)

283 
√w_size
 +
	`°æí
(
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
));

285 
p
 = 
esˇ≥d_html
 = 
	`mÆloc
(
√w_size
 + 1);

286 i‡(
esˇ≥d_html
 =
NULL
)

287 
	`evít_îr
(1, "%s: mÆloc(%d)", 
__func__
, 
√w_size
 + 1);

288 
i
 = 0; i < 
ﬁd_size
; ++i) {

289 c⁄° *
ª∂a˚d
 = 
	`html_ª∂a˚
(
html
[
i
], 
s¸©ch_•a˚
);

291 
	`°r˝y
(
p
, 
ª∂a˚d
);

292 
p
 +
	`°æí
(
ª∂a˚d
);

295 *
p
 = '\0';

297  (
esˇ≥d_html
);

298 
	}
}

301 
	$evhâp_mëhod
(
evhâp_cmd_ty≥
 
ty≥
)

303 c⁄° *
mëhod
;

305 
ty≥
) {

306 
EVHTTP_REQ_GET
:

307 
mëhod
 = "GET";

309 
EVHTTP_REQ_POST
:

310 
mëhod
 = "POST";

312 
EVHTTP_REQ_HEAD
:

313 
mëhod
 = "HEAD";

316 
mëhod
 = 
NULL
;

320  (
mëhod
);

321 
	}
}

324 
	$evhâp_add_evít
(
evít
 *
ev
, 
timeout
, 
deÁu…_timeout
)

326 i‡(
timeout
 != 0) {

327 
timevÆ
 
tv
;

329 
	`evutû_timî˛ór
(&
tv
);

330 
tv
.
tv_£c
 = 
timeout
 !-1 ?Åimeouà: 
deÁu…_timeout
;

331 
	`evít_add
(
ev
, &
tv
);

333 
	`evít_add
(
ev
, 
NULL
);

335 
	}
}

338 
evhâp_wrôe_buf„r
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

339 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
¨g
)

341 
	`evít_debug
(("%s:Öª∑rögÅÿwrôêbuf„r\n", 
__func__
));

344 
evc⁄
->
cb
 = cb;

345 
evc⁄
->
cb_¨g
 = 
¨g
;

348 i‡(
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
))

349 
	`evít_dñ
(&
evc⁄
->
ev
);

351 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_wrôe
,Évcon);

352 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

353 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_WRITE_TIMEOUT
);

354 
	}
}

357 
	$evhâp_c⁄√˘ed
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

359 
evc⁄
->
°©e
) {

360 
EVCON_DISCONNECTED
:

361 
EVCON_CONNECTING
:

363 
EVCON_IDLE
:

364 
EVCON_READING_FIRSTLINE
:

365 
EVCON_READING_HEADERS
:

366 
EVCON_READING_BODY
:

367 
EVCON_READING_TRAILER
:

368 
EVCON_WRITING
:

372 
	}
}

378 
	$evhâp_make_hódî_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

379 
evhâp_ªque°
 *
ªq
)

381 c⁄° *
mëhod
;

383 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

386 
mëhod
 = 
	`evhâp_mëhod
(
ªq
->
ty≥
);

387 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "%s %s HTTP/%d.%d\r\n",

388 
mëhod
, 
ªq
->
uri
,Ñeq->
maj‹
,Ñeq->
mö‹
);

391 i‡(
ªq
->
ty≥
 =
EVHTTP_REQ_POST
 &&

392 
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
){

393 
size
[12];

394 
	`evutû_¢¥ötf
(
size
, (size), "%ld",

395 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

396 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "C⁄ã¡-Lígth", 
size
);

398 
	}
}

401 
	$evhâp_is_c⁄√˘i⁄_˛o£
(
Êags
, 
evkeyvÆq
* 
hódîs
)

403 i‡(
Êags
 & 
EVHTTP_PROXY_REQUEST
) {

405 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Proxy-Connection");

406  (
c⁄√˘i⁄
 =
NULL
 || 
	`°rˇ£cmp
(connection, "keep-alive") != 0);

408 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

409  (
c⁄√˘i⁄
 !
NULL
 && 
	`°rˇ£cmp
(connection, "close") == 0);

411 
	}
}

414 
	$evhâp_is_c⁄√˘i⁄_kì∑live
(
evkeyvÆq
* 
hódîs
)

416 c⁄° *
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

417  (
c⁄√˘i⁄
 !
NULL


418 && 
	`°∫ˇ£cmp
(
c⁄√˘i⁄
, "keep-alive", 10) == 0);

419 
	}
}

422 
	$evhâp_maybe_add_d©e_hódî
(
evkeyvÆq
 *
hódîs
)

424 i‡(
	`evhâp_föd_hódî
(
hódîs
, "D©e"Ë=
NULL
) {

425 
d©e
[50];

426 #i‚de‡
WIN32


427 
tm
 
cur
;

429 
tm
 *
cur_p
;

430 
time_t
 
t
 = 
	`time
(
NULL
);

431 #ifde‡
WIN32


432 
cur_p
 = 
	`gmtime
(&
t
);

434 
	`gmtime_r
(&
t
, &
cur
);

435 
cur_p
 = &
cur
;

437 i‡(
	`°r·ime
(
d©e
, (date),

438 "%a, %d %b %Y %H:%M:%S GMT", 
cur_p
) != 0) {

439 
	`evhâp_add_hódî
(
hódîs
, "D©e", 
d©e
);

442 
	}
}

445 
	$evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(
evkeyvÆq
 *
hódîs
,

446 
c⁄ã¡_Àngth
)

448 i‡(
	`evhâp_föd_hódî
(
hódîs
, "Tøns„r-Encodög"Ë=
NULL
 &&

449 
	`evhâp_föd_hódî
(
hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

450 
Àn
[12];

451 
	`evutû_¢¥ötf
(
Àn
, ÷í), "%ld", 
c⁄ã¡_Àngth
);

452 
	`evhâp_add_hódî
(
hódîs
, "C⁄ã¡-Lígth", 
Àn
);

454 
	}
}

461 
	$evhâp_make_hódî_ª•⁄£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

462 
evhâp_ªque°
 *
ªq
)

464 
is_kì∑live
 = 
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
);

465 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "HTTP/%d.%d %d %s\r\n",

466 
ªq
->
maj‹
,Ñeq->
mö‹
,Ñeq->
ª•⁄£_code
,

467 
ªq
->
ª•⁄£_code_löe
);

469 i‡(
ªq
->
maj‹
 == 1) {

470 i‡(
ªq
->
mö‹
 == 1)

471 
	`evhâp_maybe_add_d©e_hódî
(
ªq
->
ouçut_hódîs
);

477 i‡(
ªq
->
mö‹
 =0 && 
is_kì∑live
)

478 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

481 i‡(
ªq
->
mö‹
 =1 || 
is_kì∑live
) {

487 
	`evhâp_maybe_add_c⁄ã¡_Àngth_hódî
(

488 
ªq
->
ouçut_hódîs
,

489 ()
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
));

494 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
)) {

495 i‡(
	`evhâp_föd_hódî
(
ªq
->
ouçut_hódîs
,

496 "C⁄ã¡-Ty≥"Ë=
NULL
) {

497 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

503 i‡(
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)) {

504 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Connection");

505 i‡(!(
ªq
->
Êags
 & 
EVHTTP_PROXY_REQUEST
))

506 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

507 
	`evhâp_ªmove_hódî
(
ªq
->
ouçut_hódîs
, "Proxy-Connection");

509 
	}
}

512 
	$evhâp_make_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

514 
evkeyvÆ
 *
hódî
;

520 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
) {

521 
	`evhâp_make_hódî_ªque°
(
evc⁄
, 
ªq
);

523 
	`evhâp_make_hódî_ª•⁄£
(
evc⁄
, 
ªq
);

526 
	`TAILQ_FOREACH
(
hódî
, 
ªq
->
ouçut_hódîs
, 
√xt
) {

527 
	`evbuf„r_add_¥ötf
(
evc⁄
->
ouçut_buf„r
, "%s: %s\r\n",

528 
hódî
->
key
, hódî->
vÆue
);

530 
	`evbuf„r_add
(
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

532 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
ouçut_buf„r
) > 0) {

537 
	`evbuf„r_add_buf„r
(
evc⁄
->
ouçut_buf„r
, 
ªq
->output_buffer);

539 
	}
}

544 
	$evhâp_ho°p‹tfûe
(*
uæ
, **
pho°
, 
u_sh‹t
 *
µ‹t
, **
pfûe
)

547 
ho°
[1024];

548 
fûe
[1024];

549 *
p
;

550 c⁄° *
p2
;

551 
Àn
;

552 
u_sh‹t
 
p‹t
;

554 
Àn
 = 
	`°æí
(
HTTP_PREFIX
);

555 i‡(
	`°∫ˇ£cmp
(
uæ
, 
HTTP_PREFIX
, 
Àn
))

558 
uæ
 +
Àn
;

561 i‡(
	`°æ˝y
(
ho°
, 
uæ
,  (host)) >= (host))

564 
p
 = 
	`°rchr
(
ho°
, '/');

565 i‡(
p
 !
NULL
) {

566 *
p
 = '\0';

567 
p2
 = 
p
 + 1;

569 
p2
 = 
NULL
;

571 i‡(
pfûe
 !
NULL
) {

573 i‡(
p2
 =
NULL
)

574 
p2
 = "";

575 
	`evutû_¢¥ötf
(
fûe
, (fûe), "/%s", 
p2
);

578 
p
 = 
	`°rchr
(
ho°
, ':');

579 i‡(
p
 !
NULL
) {

580 *
p
 = '\0';

581 
p‹t
 = 
	`©oi
(
p
 + 1);

583 i‡(
p‹t
 == 0)

586 
p‹t
 = 
HTTP_DEFAULTPORT
;

588 i‡(
pho°
 !
NULL
)

589 *
pho°
 = 
ho°
;

590 i‡(
µ‹t
 !
NULL
)

591 *
µ‹t
 = 
p‹t
;

592 i‡(
pfûe
 !
NULL
)

593 *
pfûe
 = 
fûe
;

596 
	}
}

599 
	$evhâp_c⁄√˘i⁄_öcomög_Áû
(
evhâp_ªque°
 *
ªq
,

600 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

602 
îr‹
) {

603 
EVCON_HTTP_TIMEOUT
:

604 
EVCON_HTTP_EOF
:

612 
EVCON_HTTP_INVALID_HEADER
:

615 i‡(
ªq
->
uri
) {

616 
	`‰ì
(
ªq
->
uri
);

617 
ªq
->
uri
 = 
NULL
;

624 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

628 
	}
}

631 
	$evhâp_c⁄√˘i⁄_Áû
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

632 
evhâp_c⁄√˘i⁄_îr‹
 
îr‹
)

634 
evhâp_ªque°
* 
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

635 (*
cb
)(
evhâp_ªque°
 *, *);

636 *
cb_¨g
;

637 
	`as£π
(
ªq
 !
NULL
);

639 i‡(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
) {

648 i‡(
	`evhâp_c⁄√˘i⁄_öcomög_Áû
(
ªq
, 
îr‹
) == -1)

649 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

654 
cb
 = 
ªq
->cb;

655 
cb_¨g
 = 
ªq
->cb_arg;

657 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

658 
	`evhâp_ªque°_‰ì
(
ªq
);

663 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

666 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
)

667 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

670 i‡(
cb
 !
NULL
)

671 (*
cb
)(
NULL
, 
cb_¨g
);

672 
	}
}

675 
	$evhâp_wrôe
(
fd
, 
wh©
, *
¨g
)

677 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

678 
n
;

680 i‡(
wh©
 =
EV_TIMEOUT
) {

681 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

685 
n
 = 
	`evbuf„r_wrôe
(
evc⁄
->
ouçut_buf„r
, 
fd
);

686 i‡(
n
 == -1) {

687 
	`evít_debug
(("%s:Évbuf„r_wrôe", 
__func__
));

688 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

692 i‡(
n
 == 0) {

693 
	`evít_debug
(("%s: wrôênŸhög", 
__func__
));

694 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

698 i‡(
	`EVBUFFER_LENGTH
(
evc⁄
->
ouçut_buf„r
) != 0) {

699 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

700 
evc⁄
->
timeout
, 
HTTP_WRITE_TIMEOUT
);

705 i‡(
evc⁄
->
cb
 !
NULL
)

706 (*
evc⁄
->
cb
)”vc⁄,Évc⁄->
cb_¨g
);

707 
	}
}

717 
	$evhâp_c⁄√˘i⁄_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

719 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

720 
c⁄_outgoög
 = 
evc⁄
->
Êags
 & 
EVHTTP_CON_OUTGOING
;

722 i‡(
c⁄_outgoög
) {

724 
√ed_˛o£
;

725 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

726 
ªq
->
evc⁄
 = 
NULL
;

728 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

730 
√ed_˛o£
 =

731 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
)||

732 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

735 i‡(
√ed_˛o£
)

736 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

738 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

743 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

744 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

746 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

747 } i‡(!
√ed_˛o£
) {

752 
	`evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evc⁄
);

759 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

763 (*
ªq
->
cb
)‘eq,Ñeq->
cb_¨g
);

766 i‡(
c⁄_outgoög
) {

767 
	`evhâp_ªque°_‰ì
(
ªq
);

769 
	}
}

783 
mesßge_ªad_°©us


784 
	$evhâp_h™dÀ_chunked_ªad
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf
)

786 
Àn
;

788 (
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
)) > 0) {

789 i‡(
ªq
->
¡‹ód
 < 0) {

791 
ev_öt64_t
 
¡‹ód
;

792 *
p
 = 
	`evbuf„r_ªadlöe
(
buf
);

793 *
ídp
;

794 
îr‹
;

795 i‡(
p
 =
NULL
)

798 i‡(
	`°æí
(
p
) == 0) {

799 
	`‰ì
(
p
);

802 
¡‹ód
 = 
	`evutû_°πﬁl
(
p
, &
ídp
, 16);

803 
îr‹
 = (*
p
 == '\0' ||

804 (*
ídp
 != '\0' && *endp != ' ') ||

805 
¡‹ód
 < 0);

806 
	`‰ì
(
p
);

807 i‡(
îr‹
) {

809  (
DATA_CORRUPTED
);

811 
ªq
->
¡‹ód
 =Çtoread;

812 i‡(
ªq
->
¡‹ód
 == 0) {

814  (
ALL_DATA_READ
);

820 i‡(
Àn
 < 
ªq
->
¡‹ód
)

821  (
MORE_DATA_EXPECTED
);

824 
	`evbuf„r_add
(
ªq
->
öput_buf„r
,

825 
	`EVBUFFER_DATA
(
buf
), (
size_t
)
ªq
->
¡‹ód
);

826 
	`evbuf„r_døö
(
buf
, (
size_t
)
ªq
->
¡‹ód
);

827 
ªq
->
¡‹ód
 = -1;

828 i‡(
ªq
->
chunk_cb
 !
NULL
) {

829 (*
ªq
->
chunk_cb
)‘eq,Ñeq->
cb_¨g
);

830 
	`evbuf„r_døö
(
ªq
->
öput_buf„r
,

831 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
));

835  (
MORE_DATA_EXPECTED
);

836 
	}
}

839 
	$evhâp_ªad_åaûî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

841 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

843 
	`evhâp_∑r£_hódîs
(
ªq
, 
buf
)) {

844 
DATA_CORRUPTED
:

845 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

847 
ALL_DATA_READ
:

848 
	`evít_dñ
(&
evc⁄
->
ev
);

849 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

851 
MORE_DATA_EXPECTED
:

853 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

854 
HTTP_READ_TIMEOUT
);

857 
	}
}

860 
	$evhâp_ªad_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

862 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

864 i‡(
ªq
->
chunked
) {

865 
	`evhâp_h™dÀ_chunked_ªad
(
ªq
, 
buf
)) {

866 
ALL_DATA_READ
:

868 
evc⁄
->
°©e
 = 
EVCON_READING_TRAILER
;

869 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

871 
DATA_CORRUPTED
:

873 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

874 
EVCON_HTTP_INVALID_HEADER
);

876 
REQUEST_CANCELED
:

878 
	`evhâp_ªque°_‰ì
(
ªq
);

880 
MORE_DATA_EXPECTED
:

884 } i‡(
ªq
->
¡‹ód
 < 0) {

886 
	`evbuf„r_add_buf„r
(
ªq
->
öput_buf„r
, 
buf
);

887 } i‡(
	`EVBUFFER_LENGTH
(
buf
Ë>
ªq
->
¡‹ód
) {

889 
	`evbuf„r_add
(
ªq
->
öput_buf„r
, 
	`EVBUFFER_DATA
(
buf
),

890 (
size_t
)
ªq
->
¡‹ód
);

891 
	`evbuf„r_døö
(
buf
, (
size_t
)
ªq
->
¡‹ód
);

892 
ªq
->
¡‹ód
 = 0;

893 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

897 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

898 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

899 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

900 
	}
}

910 
	$evhâp_ªad
(
fd
, 
wh©
, *
¨g
)

912 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

913 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

914 
evbuf„r
 *
buf
 = 
evc⁄
->
öput_buf„r
;

915 
n
, 
Àn
;

917 i‡(
wh©
 =
EV_TIMEOUT
) {

918 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_TIMEOUT
);

921 
n
 = 
	`evbuf„r_ªad
(
buf
, 
fd
, -1);

922 
Àn
 = 
	`EVBUFFER_LENGTH
(
buf
);

923 
	`evít_debug
(("%s: gŸ %d o¿%d\n", 
__func__
, 
n
, 
fd
));

925 i‡(
n
 == -1) {

926 i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
) {

927 
	`evít_debug
(("%s:Évbuf„r_ªad", 
__func__
));

928 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_EOF
);

930 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
,

931 
HTTP_READ_TIMEOUT
);

934 } i‡(
n
 == 0) {

936 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

940 
evc⁄
->
°©e
) {

941 
EVCON_READING_FIRSTLINE
:

942 
	`evhâp_ªad_fú°löe
(
evc⁄
, 
ªq
);

944 
EVCON_READING_HEADERS
:

945 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

947 
EVCON_READING_BODY
:

948 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

950 
EVCON_READING_TRAILER
:

951 
	`evhâp_ªad_åaûî
(
evc⁄
, 
ªq
);

953 
EVCON_DISCONNECTED
:

954 
EVCON_CONNECTING
:

955 
EVCON_IDLE
:

956 
EVCON_WRITING
:

958 
	`evít_îrx
(1, "%s: illegal connection state %d",

959 
__func__
, 
evc⁄
->
°©e
);

961 
	}
}

964 
	$evhâp_wrôe_c⁄√˘i⁄cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

967 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

968 
	`as£π
(
ªq
 !
NULL
);

970 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_WRITING
);

973 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

975 
	`evhâp_°¨t_ªad
(
evc⁄
);

976 
	}
}

983 
	$evhâp_c⁄√˘i⁄_‰ì
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

985 
evhâp_ªque°
 *
ªq
;

988 i‡(
evc⁄
->
fd
 != -1) {

989 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

990 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

994 (
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
)Ë!
NULL
) {

995 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

996 
	`evhâp_ªque°_‰ì
(
ªq
);

999 i‡(
evc⁄
->
hâp_£rvî
 !
NULL
) {

1000 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

1001 
	`TAILQ_REMOVE
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

1004 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1005 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1007 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1008 
	`evít_dñ
(&
evc⁄
->
ev
);

1010 i‡(
evc⁄
->
fd
 != -1)

1011 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1013 i‡(
evc⁄
->
böd_addªss
 !
NULL
)

1014 
	`‰ì
(
evc⁄
->
böd_addªss
);

1016 i‡(
evc⁄
->
addªss
 !
NULL
)

1017 
	`‰ì
(
evc⁄
->
addªss
);

1019 i‡(
evc⁄
->
öput_buf„r
 !
NULL
)

1020 
	`evbuf„r_‰ì
(
evc⁄
->
öput_buf„r
);

1022 i‡(
evc⁄
->
ouçut_buf„r
 !
NULL
)

1023 
	`evbuf„r_‰ì
(
evc⁄
->
ouçut_buf„r
);

1025 
	`‰ì
(
evc⁄
);

1026 
	}
}

1029 
	$evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1030 c⁄° *
addªss
)

1032 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1033 i‡(
evc⁄
->
böd_addªss
)

1034 
	`‰ì
(
evc⁄
->
böd_addªss
);

1035 i‡((
evc⁄
->
böd_addªss
 = 
	`°rdup
(
addªss
)Ë=
NULL
)

1036 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1037 
	}
}

1040 
	$evhâp_c⁄√˘i⁄_£t_loˇl_p‹t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1041 
p‹t
)

1043 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1044 
evc⁄
->
böd_p‹t
 = 
p‹t
;

1045 
	}
}

1048 
	$evhâp_ªque°_di•©ch
(
evhâp_c⁄√˘i⁄
* 
evc⁄
)

1050 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1053 i‡(
ªq
 =
NULL
)

1057 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1060 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_IDLE
);

1062 
evc⁄
->
°©e
 = 
EVCON_WRITING
;

1065 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1067 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_wrôe_c⁄√˘i⁄cb
, 
NULL
);

1068 
	}
}

1072 
	$evhâp_c⁄√˘i⁄_ª£t
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1074 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1075 
	`evít_dñ
(&
evc⁄
->
ev
);

1077 i‡(
evc⁄
->
fd
 != -1) {

1079 i‡(
	`evhâp_c⁄√˘ed
(
evc⁄
Ë&&Évc⁄->
˛o£cb
 !
NULL
)

1080 (*
evc⁄
->
˛o£cb
)”vc⁄,Évc⁄->
˛o£cb_¨g
);

1082 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);

1083 
evc⁄
->
fd
 = -1;

1085 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1087 
	`evbuf„r_døö
(
evc⁄
->
öput_buf„r
,

1088 
	`EVBUFFER_LENGTH
(
evc⁄
->
öput_buf„r
));

1089 
	`evbuf„r_døö
(
evc⁄
->
ouçut_buf„r
,

1090 
	`EVBUFFER_LENGTH
(
evc⁄
->
ouçut_buf„r
));

1091 
	}
}

1094 
	$evhâp_dëe˘_˛o£_cb
(
fd
, 
wh©
, *
¨g
)

1096 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1097 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1098 
	}
}

1101 
	$evhâp_c⁄√˘i⁄_°¨t_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1103 
evc⁄
->
Êags
 |
EVHTTP_CON_CLOSEDETECT
;

1105 i‡(
	`evít_öôülized
(&
evc⁄
->
˛o£_ev
))

1106 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1107 
	`evít_£t
(&
evc⁄
->
˛o£_ev
,Évc⁄->
fd
, 
EV_READ
,

1108 
evhâp_dëe˘_˛o£_cb
, 
evc⁄
);

1109 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
˛o£_ev
);

1110 
	`evít_add
(&
evc⁄
->
˛o£_ev
, 
NULL
);

1111 
	}
}

1114 
	$evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1116 
evc⁄
->
Êags
 &~
EVHTTP_CON_CLOSEDETECT
;

1117 
	`evít_dñ
(&
evc⁄
->
˛o£_ev
);

1118 
	}
}

1121 
	$evhâp_c⁄√˘i⁄_ªåy
(
fd
, 
wh©
, *
¨g
)

1123 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1125 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1126 
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
);

1127 
	}
}

1134 
	$evhâp_c⁄√˘i⁄cb
(
fd
, 
wh©
, *
¨g
)

1136 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

1137 
îr‹
;

1138 
sockÀn_t
 
îrsz
 = (
îr‹
);

1140 i‡(
wh©
 =
EV_TIMEOUT
) {

1141 
	`evít_debug
(("%s: connectionÅimeout for \"%s:%d\" on %d",

1142 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1143 
˛ónup
;

1147 i‡(
	`gësock›t
(
evc⁄
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*)&
îr‹
,

1148 &
îrsz
) == -1) {

1149 
	`evít_debug
(("%s: getsockopt for \"%s:%d\" on %d",

1150 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1151 
˛ónup
;

1154 i‡(
îr‹
) {

1155 
	`evít_debug
(("%s: connect failed for \"%s:%d\" on %d: %s",

1156 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
,

1157 
	`°ªº‹
(
îr‹
)));

1158 
˛ónup
;

1162 
	`evít_debug
(("%s: connectedÅo \"%s:%d\" on %d\n",

1163 
__func__
, 
evc⁄
->
addªss
,Évc⁄->
p‹t
,Évc⁄->
fd
));

1166 
evc⁄
->
ªåy_˙t
 = 0;

1167 
evc⁄
->
°©e
 = 
EVCON_IDLE
;

1170 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1173 
˛ónup
:

1174 i‡(
evc⁄
->
ªåy_max
 < 0 ||Évc⁄->
ªåy_˙t
 <Évcon->retry_max) {

1175 
	`evtimî_£t
(&
evc⁄
->
ev
, 
evhâp_c⁄√˘i⁄_ªåy
,Évcon);

1176 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1177 
	`evhâp_add_evít
(&
evc⁄
->
ev
, 
	`MIN
(3600, 2 <<Évc⁄->
ªåy_˙t
),

1178 
HTTP_CONNECT_TIMEOUT
);

1179 
evc⁄
->
ªåy_˙t
++;

1182 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1185 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë!
NULL
) {

1186 
evhâp_ªque°
 *
ªque°
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1187 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªque°
, 
√xt
);

1188 
ªque°
->
evc⁄
 = 
NULL
;

1191 
ªque°
->
	`cb
‘eque°,Ñeque°->
cb_¨g
);

1192 
	`evhâp_ªque°_‰ì
(
ªque°
);

1194 
	}
}

1201 
	$evhâp_vÆid_ª•⁄£_code
(
code
)

1203 i‡(
code
 == 0)

1207 
	}
}

1212 
	$evhâp_∑r£_ª•⁄£_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1214 *
¥Ÿocﬁ
;

1215 *
numbî
;

1216 *
ªadabÀ
;

1218 
¥Ÿocﬁ
 = 
	`°r£p
(&
löe
, " ");

1219 i‡(
löe
 =
NULL
)

1221 
numbî
 = 
	`°r£p
(&
löe
, " ");

1222 i‡(
löe
 =
NULL
)

1224 
ªadabÀ
 = 
löe
;

1226 i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.0") == 0) {

1227 
ªq
->
maj‹
 = 1;

1228 
ªq
->
mö‹
 = 0;

1229 } i‡(
	`°rcmp
(
¥Ÿocﬁ
, "HTTP/1.1") == 0) {

1230 
ªq
->
maj‹
 = 1;

1231 
ªq
->
mö‹
 = 1;

1233 
	`evít_debug
(("%s: badÖrotocol \"%s\"",

1234 
__func__
, 
¥Ÿocﬁ
));

1238 
ªq
->
ª•⁄£_code
 = 
	`©oi
(
numbî
);

1239 i‡(!
	`evhâp_vÆid_ª•⁄£_code
(
ªq
->
ª•⁄£_code
)) {

1240 
	`evít_debug
(("%s: badÑesponse code \"%s\"",

1241 
__func__
, 
numbî
));

1245 i‡((
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªadabÀ
)Ë=
NULL
)

1246 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1249 
	}
}

1254 
	$evhâp_∑r£_ªque°_löe
(
evhâp_ªque°
 *
ªq
, *
löe
)

1256 *
mëhod
;

1257 *
uri
;

1258 *
vîsi⁄
;

1261 
mëhod
 = 
	`°r£p
(&
löe
, " ");

1262 i‡(
löe
 =
NULL
)

1264 
uri
 = 
	`°r£p
(&
löe
, " ");

1265 i‡(
löe
 =
NULL
)

1267 
vîsi⁄
 = 
	`°r£p
(&
löe
, " ");

1268 i‡(
löe
 !
NULL
)

1272 i‡(
	`°rcmp
(
mëhod
, "GET") == 0) {

1273 
ªq
->
ty≥
 = 
EVHTTP_REQ_GET
;

1274 } i‡(
	`°rcmp
(
mëhod
, "POST") == 0) {

1275 
ªq
->
ty≥
 = 
EVHTTP_REQ_POST
;

1276 } i‡(
	`°rcmp
(
mëhod
, "HEAD") == 0) {

1277 
ªq
->
ty≥
 = 
EVHTTP_REQ_HEAD
;

1279 
	`evít_debug
(("%s: bad method %s onÑequest %p from %s",

1280 
__func__
, 
mëhod
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1284 i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.0") == 0) {

1285 
ªq
->
maj‹
 = 1;

1286 
ªq
->
mö‹
 = 0;

1287 } i‡(
	`°rcmp
(
vîsi⁄
, "HTTP/1.1") == 0) {

1288 
ªq
->
maj‹
 = 1;

1289 
ªq
->
mö‹
 = 1;

1291 
	`evít_debug
(("%s: bad version %s onÑequest %p from %s",

1292 
__func__
, 
vîsi⁄
, 
ªq
,Ñeq->
ªmŸe_ho°
));

1296 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
) {

1297 
	`evít_debug
(("%s:Évhâp_decode_uri", 
__func__
));

1302 i‡(
	`°æí
(
ªq
->
uri
) > 0 &&Ñeq->uri[0] != '/')

1303 
ªq
->
Êags
 |
EVHTTP_PROXY_REQUEST
;

1306 
	}
}

1309 
	$evhâp_föd_hódî
(c⁄° 
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1311 
evkeyvÆ
 *
hódî
;

1313 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1314 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1315  (
hódî
->
vÆue
);

1318  (
NULL
);

1319 
	}
}

1322 
	$evhâp_˛ór_hódîs
(
evkeyvÆq
 *
hódîs
)

1324 
evkeyvÆ
 *
hódî
;

1326 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
);

1327 
hódî
 !
NULL
;

1328 
hódî
 = 
	`TAILQ_FIRST
(
hódîs
)) {

1329 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1330 
	`‰ì
(
hódî
->
key
);

1331 
	`‰ì
(
hódî
->
vÆue
);

1332 
	`‰ì
(
hódî
);

1334 
	}
}

1342 
	$evhâp_ªmove_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
key
)

1344 
evkeyvÆ
 *
hódî
;

1346 
	`TAILQ_FOREACH
(
hódî
, 
hódîs
, 
√xt
) {

1347 i‡(
	`°rˇ£cmp
(
hódî
->
key
, key) == 0)

1351 i‡(
hódî
 =
NULL
)

1355 
	`TAILQ_REMOVE
(
hódîs
, 
hódî
, 
√xt
);

1356 
	`‰ì
(
hódî
->
key
);

1357 
	`‰ì
(
hódî
->
vÆue
);

1358 
	`‰ì
(
hódî
);

1361 
	}
}

1364 
	$evhâp_hódî_is_vÆid_vÆue
(c⁄° *
vÆue
)

1366 c⁄° *
p
 = 
vÆue
;

1368 (
p
 = 
	`°Ωbrk
’, "\r\n")Ë!
NULL
) {

1370 
p
 +
	`°r•n
(p, "\r\n");

1372 i‡(*
p
 != ' ' && *p != '\t')

1376 
	}
}

1379 
	$evhâp_add_hódî
(
evkeyvÆq
 *
hódîs
,

1380 c⁄° *
key
, c⁄° *
vÆue
)

1382 
	`evít_debug
(("%s: key: %†vÆ: %s\n", 
__func__
, 
key
, 
vÆue
));

1384 i‡(
	`°rchr
(
key
, '\r'Ë!
NULL
 || strchr(key, '\n') != NULL) {

1386 
	`evít_debug
(("%s: dr›pög iŒegÆ hódî key\n", 
__func__
));

1390 i‡(!
	`evhâp_hódî_is_vÆid_vÆue
(
vÆue
)) {

1391 
	`evít_debug
(("%s: dr›pög iŒegÆ hódî vÆue\n", 
__func__
));

1395  (
	`evhâp_add_hódî_öã∫Æ
(
hódîs
, 
key
, 
vÆue
));

1396 
	}
}

1399 
	$evhâp_add_hódî_öã∫Æ
(
evkeyvÆq
 *
hódîs
,

1400 c⁄° *
key
, c⁄° *
vÆue
)

1402 
evkeyvÆ
 *
hódî
 = 
	`ˇŒoc
(1, (evkeyval));

1403 i‡(
hódî
 =
NULL
) {

1404 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

1407 i‡((
hódî
->
key
 = 
	`°rdup
(key)Ë=
NULL
) {

1408 
	`‰ì
(
hódî
);

1409 
	`evít_w¨n
("%s: sådup", 
__func__
);

1412 i‡((
hódî
->
vÆue
 = 
	`°rdup
(vÆue)Ë=
NULL
) {

1413 
	`‰ì
(
hódî
->
key
);

1414 
	`‰ì
(
hódî
);

1415 
	`evít_w¨n
("%s: sådup", 
__func__
);

1419 
	`TAILQ_INSERT_TAIL
(
hódîs
, 
hódî
, 
√xt
);

1422 
	}
}

1434 
mesßge_ªad_°©us


1435 
	$evhâp_∑r£_fú°löe
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
buf„r
)

1437 *
löe
;

1438 
mesßge_ªad_°©us
 
°©us
 = 
ALL_DATA_READ
;

1440 
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
);

1441 i‡(
löe
 =
NULL
)

1442  (
MORE_DATA_EXPECTED
);

1444 
ªq
->
köd
) {

1445 
EVHTTP_REQUEST
:

1446 i‡(
	`evhâp_∑r£_ªque°_löe
(
ªq
, 
löe
) == -1)

1447 
°©us
 = 
DATA_CORRUPTED
;

1449 
EVHTTP_RESPONSE
:

1450 i‡(
	`evhâp_∑r£_ª•⁄£_löe
(
ªq
, 
löe
) == -1)

1451 
°©us
 = 
DATA_CORRUPTED
;

1454 
°©us
 = 
DATA_CORRUPTED
;

1457 
	`‰ì
(
löe
);

1458  (
°©us
);

1459 
	}
}

1462 
	$evhâp_≠≥nd_to_œ°_hódî
(
evkeyvÆq
 *
hódîs
, c⁄° *
löe
)

1464 
evkeyvÆ
 *
hódî
 = 
	`TAILQ_LAST
(
hódîs
, 
evkeyvÆq
);

1465 *
√wvÆ
;

1466 
size_t
 
ﬁd_Àn
, 
löe_Àn
;

1468 i‡(
hódî
 =
NULL
)

1471 
ﬁd_Àn
 = 
	`°æí
(
hódî
->
vÆue
);

1472 
löe_Àn
 = 
	`°æí
(
löe
);

1474 
√wvÆ
 = 
	`ªÆloc
(
hódî
->
vÆue
, 
ﬁd_Àn
 + 
löe_Àn
 + 1);

1475 i‡(
√wvÆ
 =
NULL
)

1478 
	`mem˝y
(
√wvÆ
 + 
ﬁd_Àn
, 
löe
, 
löe_Àn
 + 1);

1479 
hódî
->
vÆue
 = 
√wvÆ
;

1482 
	}
}

1484 
mesßge_ªad_°©us


1485 
	$evhâp_∑r£_hódîs
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
* 
buf„r
)

1487 *
löe
;

1488 
mesßge_ªad_°©us
 
°©us
 = 
MORE_DATA_EXPECTED
;

1490 
evkeyvÆq
* 
hódîs
 = 
ªq
->
öput_hódîs
;

1491 (
löe
 = 
	`evbuf„r_ªadlöe
(
buf„r
))

1492 !
NULL
) {

1493 *
skey
, *
svÆue
;

1495 i‡(*
löe
 == '\0') {

1496 
°©us
 = 
ALL_DATA_READ
;

1497 
	`‰ì
(
löe
);

1502 i‡(*
löe
 == ' ' || *line == '\t') {

1503 i‡(
	`evhâp_≠≥nd_to_œ°_hódî
(
hódîs
, 
löe
) == -1)

1504 
îr‹
;

1505 
	`‰ì
(
löe
);

1510 
svÆue
 = 
löe
;

1511 
skey
 = 
	`°r£p
(&
svÆue
, ":");

1512 i‡(
svÆue
 =
NULL
)

1513 
îr‹
;

1515 
svÆue
 +
	`°r•n
(svalue, " ");

1517 i‡(
	`evhâp_add_hódî
(
hódîs
, 
skey
, 
svÆue
) == -1)

1518 
îr‹
;

1520 
	`‰ì
(
löe
);

1523  (
°©us
);

1525 
îr‹
:

1526 
	`‰ì
(
löe
);

1527  (
DATA_CORRUPTED
);

1528 
	}
}

1531 
	$evhâp_gë_body_Àngth
(
evhâp_ªque°
 *
ªq
)

1533 
evkeyvÆq
 *
hódîs
 = 
ªq
->
öput_hódîs
;

1534 c⁄° *
c⁄ã¡_Àngth
;

1535 c⁄° *
c⁄√˘i⁄
;

1537 
c⁄ã¡_Àngth
 = 
	`evhâp_föd_hódî
(
hódîs
, "Content-Length");

1538 
c⁄√˘i⁄
 = 
	`evhâp_föd_hódî
(
hódîs
, "Connection");

1540 i‡(
c⁄ã¡_Àngth
 =
NULL
 && 
c⁄√˘i⁄
 == NULL)

1541 
ªq
->
¡‹ód
 = -1;

1542 i‡(
c⁄ã¡_Àngth
 =
NULL
 &&

1543 
	`°rˇ£cmp
(
c⁄√˘i⁄
, "Close") != 0) {

1545 
	`evít_w¨nx
("%s: we gotÇo contentÜength, butÅhe "

1547 
__func__
, 
c⁄√˘i⁄
);

1549 } i‡(
c⁄ã¡_Àngth
 =
NULL
) {

1550 
ªq
->
¡‹ód
 = -1;

1552 *
ídp
;

1553 
ev_öt64_t
 
¡‹ód
 = 
	`evutû_°πﬁl
(
c⁄ã¡_Àngth
, &
ídp
, 10);

1554 i‡(*
c⁄ã¡_Àngth
 ='\0' || *
ídp
 !'\0' || 
¡‹ód
 < 0) {

1555 
	`evít_debug
(("%s: illegal contentÜength: %s",

1556 
__func__
, 
c⁄ã¡_Àngth
));

1559 
ªq
->
¡‹ód
 =Çtoread;

1562 
	`evít_debug
(("%s: bytesÅoÑead: %lld (in buffer %ld)\n",

1563 
__func__
, 
ªq
->
¡‹ód
,

1564 
	`EVBUFFER_LENGTH
(
ªq
->
evc⁄
->
öput_buf„r
)));

1567 
	}
}

1570 
	$evhâp_gë_body
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1572 c⁄° *
x„r_íc
;

1575 i‡(
ªq
->
köd
 =
EVHTTP_REQUEST
 &&Ñeq->
ty≥
 !
EVHTTP_REQ_POST
) {

1576 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1579 
evc⁄
->
°©e
 = 
EVCON_READING_BODY
;

1580 
x„r_íc
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1581 i‡(
x„r_íc
 !
NULL
 && 
	`°rˇ£cmp
(xfer_enc, "chunked") == 0) {

1582 
ªq
->
chunked
 = 1;

1583 
ªq
->
¡‹ód
 = -1;

1585 i‡(
	`evhâp_gë_body_Àngth
(
ªq
) == -1) {

1586 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
,

1587 
EVCON_HTTP_INVALID_HEADER
);

1591 
	`evhâp_ªad_body
(
evc⁄
, 
ªq
);

1592 
	}
}

1595 
	$evhâp_ªad_fú°löe
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1596 
evhâp_ªque°
 *
ªq
)

1598 
mesßge_ªad_°©us
 
ªs
;

1600 
ªs
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
evc⁄
->
öput_buf„r
);

1601 i‡(
ªs
 =
DATA_CORRUPTED
) {

1603 
	`evít_debug
(("%s: bad headerÜines on %d\n",

1604 
__func__
, 
evc⁄
->
fd
));

1605 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1607 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1609 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1610 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1614 
evc⁄
->
°©e
 = 
EVCON_READING_HEADERS
;

1615 
	`evhâp_ªad_hódî
(
evc⁄
, 
ªq
);

1616 
	}
}

1619 
	$evhâp_ªad_hódî
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, 
evhâp_ªque°
 *
ªq
)

1621 
mesßge_ªad_°©us
 
ªs
;

1622 
fd
 = 
evc⁄
->fd;

1624 
ªs
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
evc⁄
->
öput_buf„r
);

1625 i‡(
ªs
 =
DATA_CORRUPTED
) {

1627 
	`evít_debug
(("%s: bad hódîÜöe†⁄ %d\n", 
__func__
, 
fd
));

1628 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1630 } i‡(
ªs
 =
MORE_DATA_EXPECTED
) {

1632 
	`evhâp_add_evít
(&
evc⁄
->
ev
,

1633 
evc⁄
->
timeout
, 
HTTP_READ_TIMEOUT
);

1638 
ªq
->
köd
) {

1639 
EVHTTP_REQUEST
:

1640 
	`evít_debug
(("%s: checking forÖost data on %d\n",

1641 
__func__
, 
fd
));

1642 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1645 
EVHTTP_RESPONSE
:

1646 i‡(
ªq
->
ª•⁄£_code
 =
HTTP_NOCONTENT
 ||

1647 
ªq
->
ª•⁄£_code
 =
HTTP_NOTMODIFIED
 ||

1648 (
ªq
->
ª•⁄£_code
 >= 100 &&Ñeq->response_code < 200)) {

1649 
	`evít_debug
(("%s: skipping body for code %d\n",

1650 
__func__
, 
ªq
->
ª•⁄£_code
));

1651 
	`evhâp_c⁄√˘i⁄_d⁄e
(
evc⁄
);

1653 
	`evít_debug
(("%s: start ofÑead body for %s on %d\n",

1654 
__func__
, 
ªq
->
ªmŸe_ho°
, 
fd
));

1655 
	`evhâp_gë_body
(
evc⁄
, 
ªq
);

1660 
	`evít_w¨nx
("%s: bad hódî o¿%d", 
__func__
, 
fd
);

1661 
	`evhâp_c⁄√˘i⁄_Áû
(
evc⁄
, 
EVCON_HTTP_INVALID_HEADER
);

1664 
	}
}

1676 
evhâp_c⁄√˘i⁄
 *

1677 
	$evhâp_c⁄√˘i⁄_√w
(c⁄° *
addªss
, 
p‹t
)

1679 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1681 
	`evít_debug
(("Aâem±ög c⁄√˘i⁄Åÿ%s:%d\n", 
addªss
, 
p‹t
));

1683 i‡((
evc⁄
 = 
	`ˇŒoc
(1, (
evhâp_c⁄√˘i⁄
))Ë=
NULL
) {

1684 
	`evít_w¨n
("%s: cÆlo¯Áûed", 
__func__
);

1685 
îr‹
;

1688 
evc⁄
->
fd
 = -1;

1689 
evc⁄
->
p‹t
 =Öort;

1691 
evc⁄
->
timeout
 = -1;

1692 
evc⁄
->
ªåy_˙t
 =Évc⁄->
ªåy_max
 = 0;

1694 i‡((
evc⁄
->
addªss
 = 
	`°rdup
◊ddªss)Ë=
NULL
) {

1695 
	`evít_w¨n
("%s: sådu∞Áûed", 
__func__
);

1696 
îr‹
;

1699 i‡((
evc⁄
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1700 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1701 
îr‹
;

1704 i‡((
evc⁄
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

1705 
	`evít_w¨n
("%s:Évbuf„r_√w faûed", 
__func__
);

1706 
îr‹
;

1709 
evc⁄
->
°©e
 = 
EVCON_DISCONNECTED
;

1710 
	`TAILQ_INIT
(&
evc⁄
->
ªque°s
);

1712  (
evc⁄
);

1714 
îr‹
:

1715 i‡(
evc⁄
 !
NULL
)

1716 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1717  (
NULL
);

1718 
	}
}

1720 
	$evhâp_c⁄√˘i⁄_£t_ba£
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1721 
evít_ba£
 *
ba£
)

1723 
	`as£π
(
evc⁄
->
ba£
 =
NULL
);

1724 
	`as£π
(
evc⁄
->
°©e
 =
EVCON_DISCONNECTED
);

1725 
evc⁄
->
ba£
 = base;

1726 
	}
}

1729 
	$evhâp_c⁄√˘i⁄_£t_timeout
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1730 
timeout_ö_£cs
)

1732 
evc⁄
->
timeout
 = 
timeout_ö_£cs
;

1733 
	}
}

1736 
	$evhâp_c⁄√˘i⁄_£t_ªåõs
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1737 
ªåy_max
)

1739 
evc⁄
->
ªåy_max
 =Ñetry_max;

1740 
	}
}

1743 
evhâp_c⁄√˘i⁄_£t_˛o£cb
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1744 (*
cb
)(
evhâp_c⁄√˘i⁄
 *, *), *
cb¨g
)

1746 
evc⁄
->
˛o£cb
 = 
cb
;

1747 
evc⁄
->
˛o£cb_¨g
 = 
cb¨g
;

1748 
	}
}

1751 
	$evhâp_c⁄√˘i⁄_gë_≥î
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1752 **
addªss
, 
u_sh‹t
 *
p‹t
)

1754 *
addªss
 = 
evc⁄
->address;

1755 *
p‹t
 = 
evc⁄
->port;

1756 
	}
}

1759 
	$evhâp_c⁄√˘i⁄_c⁄√˘
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1761 i‡(
evc⁄
->
°©e
 =
EVCON_CONNECTING
)

1764 
	`evhâp_c⁄√˘i⁄_ª£t
(
evc⁄
);

1766 
	`as£π
(!(
evc⁄
->
Êags
 & 
EVHTTP_CON_INCOMING
));

1767 
evc⁄
->
Êags
 |
EVHTTP_CON_OUTGOING
;

1769 
evc⁄
->
fd
 = 
	`böd_sockë
(

1770 
evc⁄
->
böd_addªss
,Évc⁄->
böd_p‹t
, 0 );

1771 i‡(
evc⁄
->
fd
 == -1) {

1772 
	`evít_debug
(("%s: failedÅo bindÅo \"%s\"",

1773 
__func__
, 
evc⁄
->
böd_addªss
));

1777 i‡(
	`sockë_c⁄√˘
(
evc⁄
->
fd
,Évc⁄->
addªss
,Évc⁄->
p‹t
) == -1) {

1778 
	`EVUTIL_CLOSESOCKET
(
evc⁄
->
fd
);Évcon->fd = -1;

1783 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_WRITE
, 
evhâp_c⁄√˘i⁄cb
,Évcon);

1784 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1785 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_CONNECT_TIMEOUT
);

1787 
evc⁄
->
°©e
 = 
EVCON_CONNECTING
;

1790 
	}
}

1799 
	$evhâp_make_ªque°
(
evhâp_c⁄√˘i⁄
 *
evc⁄
,

1800 
evhâp_ªque°
 *
ªq
,

1801 
evhâp_cmd_ty≥
 
ty≥
, c⁄° *
uri
)

1804 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

1805 
ªq
->
ty≥
 =Åype;

1806 i‡(
ªq
->
uri
 !
NULL
)

1807 
	`‰ì
(
ªq
->
uri
);

1808 i‡((
ªq
->
uri
 = 
	`°rdup
(uri)Ë=
NULL
)

1809 
	`evít_îr
(1, "%s: sådup", 
__func__
);

1812 i‡(!
ªq
->
maj‹
 && !ªq->
mö‹
) {

1813 
ªq
->
maj‹
 = 1;

1814 
ªq
->
mö‹
 = 1;

1817 
	`as£π
(
ªq
->
evc⁄
 =
NULL
);

1818 
ªq
->
evc⁄
 =Évcon;

1819 
	`as£π
(!(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
));

1821 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1824 i‡(!
	`evhâp_c⁄√˘ed
(
evc⁄
))

1825  (
	`evhâp_c⁄√˘i⁄_c⁄√˘
(
evc⁄
));

1832 i‡(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
)

1833 
	`evhâp_ªque°_di•©ch
(
evc⁄
);

1836 
	}
}

1844 
	$evhâp_°¨t_ªad
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

1847 i‡(
	`evít_öôülized
(&
evc⁄
->
ev
))

1848 
	`evít_dñ
(&
evc⁄
->
ev
);

1849 
	`evít_£t
(&
evc⁄
->
ev
,Évc⁄->
fd
, 
EV_READ
, 
evhâp_ªad
,Évcon);

1850 
	`EVHTTP_BASE_SET
(
evc⁄
, &evc⁄->
ev
);

1852 
	`evhâp_add_evít
(&
evc⁄
->
ev
,Évc⁄->
timeout
, 
HTTP_READ_TIMEOUT
);

1853 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

1854 
	}
}

1857 
	$evhâp_£nd_d⁄e
(
evhâp_c⁄√˘i⁄
 *
evc⁄
, *
¨g
)

1859 
√ed_˛o£
;

1860 
evhâp_ªque°
 *
ªq
 = 
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
);

1861 
	`TAILQ_REMOVE
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

1864 
	`evhâp_c⁄√˘i⁄_°›_dëe˘˛o£
(
evc⁄
);

1866 
√ed_˛o£
 =

1867 (
ªq
->
mö‹
 == 0 &&

1868 !
	`evhâp_is_c⁄√˘i⁄_kì∑live
(
ªq
->
öput_hódîs
))||

1869 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
öput_hódîs
) ||

1870 
	`evhâp_is_c⁄√˘i⁄_˛o£
(
ªq
->
Êags
,Ñeq->
ouçut_hódîs
);

1872 
	`as£π
(
ªq
->
Êags
 & 
EVHTTP_REQ_OWN_CONNECTION
);

1873 
	`evhâp_ªque°_‰ì
(
ªq
);

1875 i‡(
√ed_˛o£
) {

1876 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1881 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

1882 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1883 
	}
}

1890 
	$evhâp_£nd_îr‹
(
evhâp_ªque°
 *
ªq
, 
îr‹
, c⁄° *
ªas⁄
)

1892 
	#ERR_FORMAT
 "<HTML><HEAD>\n" \

1897 "</BODY></HTML>\n"

	)

1899 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

1902 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

1904 
	`evhâp_ª•⁄£_code
(
ªq
, 
îr‹
, 
ªas⁄
);

1906 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
îr‹
, 
ªas⁄
);

1908 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

1910 
	`evbuf„r_‰ì
(
buf
);

1911 #unde‡
ERR_FORMAT


1912 
	}
}

1916 
ölöe
 

1917 
	$evhâp_£nd
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1919 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1921 
	`as£π
(
	`TAILQ_FIRST
(&
evc⁄
->
ªque°s
Ë=
ªq
);

1924 i‡(
d©abuf
 !
NULL
)

1925 
	`evbuf„r_add_buf„r
(
ªq
->
ouçut_buf„r
, 
d©abuf
);

1928 
	`evhâp_make_hódî
(
evc⁄
, 
ªq
);

1930 
	`evhâp_wrôe_buf„r
(
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1931 
	}
}

1934 
	$evhâp_£nd_ª∂y
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
,

1935 
evbuf„r
 *
d©abuf
)

1937 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1939 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

1940 
	}
}

1943 
	$evhâp_£nd_ª∂y_°¨t
(
evhâp_ªque°
 *
ªq
, 
code
,

1944 c⁄° *
ªas⁄
)

1946 
	`evhâp_ª•⁄£_code
(
ªq
, 
code
, 
ªas⁄
);

1947 i‡(
ªq
->
maj‹
 =1 &&Ñeq->
mö‹
 == 1) {

1949 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Transfer-Encoding",

1951 
ªq
->
chunked
 = 1;

1953 
	`evhâp_make_hódî
(
ªq
->
evc⁄
,Ñeq);

1954 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1955 
	}
}

1958 
	$evhâp_£nd_ª∂y_chunk
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

1960 i‡(
ªq
->
chunked
) {

1961 
	`evbuf„r_add_¥ötf
(
ªq
->
evc⁄
->
ouçut_buf„r
, "%x\r\n",

1962 ()
	`EVBUFFER_LENGTH
(
d©abuf
));

1964 
	`evbuf„r_add_buf„r
(
ªq
->
evc⁄
->
ouçut_buf„r
, 
d©abuf
);

1965 i‡(
ªq
->
chunked
) {

1966 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "\r\n", 2);

1968 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
NULL
, NULL);

1969 
	}
}

1972 
	$evhâp_£nd_ª∂y_íd
(
evhâp_ªque°
 *
ªq
)

1974 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
ªq
->evcon;

1976 i‡(
ªq
->
chunked
) {

1977 
	`evbuf„r_add
(
ªq
->
evc⁄
->
ouçut_buf„r
, "0\r\n\r\n", 5);

1978 
	`evhâp_wrôe_buf„r
(
ªq
->
evc⁄
, 
evhâp_£nd_d⁄e
, 
NULL
);

1979 
ªq
->
chunked
 = 0;

1980 } i‡(!
	`evít_≥ndög
(&
evc⁄
->
ev
, 
EV_WRITE
|
EV_TIMEOUT
, 
NULL
)) {

1982 
	`evhâp_£nd_d⁄e
(
evc⁄
, 
NULL
);

1985 
evc⁄
->
cb
 = 
evhâp_£nd_d⁄e
;

1986 
evc⁄
->
cb_¨g
 = 
NULL
;

1988 
	}
}

1991 
	$evhâp_ª•⁄£_code
(
evhâp_ªque°
 *
ªq
, 
code
, c⁄° *
ªas⁄
)

1993 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1994 
ªq
->
ª•⁄£_code
 = 
code
;

1995 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

1996 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

1997 
ªq
->
ª•⁄£_code_löe
 = 
	`°rdup
(
ªas⁄
);

1998 
	}
}

2001 
	$evhâp_£nd_∑ge
(
evhâp_ªque°
 *
ªq
, 
evbuf„r
 *
d©abuf
)

2003 i‡(!
ªq
->
maj‹
 || !ªq->
mö‹
) {

2004 
ªq
->
maj‹
 = 1;

2005 
ªq
->
mö‹
 = 1;

2008 i‡(
ªq
->
köd
 !
EVHTTP_RESPONSE
)

2009 
	`evhâp_ª•⁄£_code
(
ªq
, 200, "OK");

2011 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

2012 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Content-Type", "text/html");

2013 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

2015 
	`evhâp_£nd
(
ªq
, 
d©abuf
);

2016 
	}
}

2018 c⁄° 
	guri_ch¨s
[256] = {

2045 
	$evhâp_ícode_uri
(c⁄° *
uri
)

2047 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2048 *
p
;

2050 
p
 = (*)
uri
; *p != '\0';Ö++) {

2051 i‡(
uri_ch¨s
[(
u_ch¨
)(*
p
)]) {

2052 
	`evbuf„r_add
(
buf
, 
p
, 1);

2054 
	`evbuf„r_add_¥ötf
(
buf
, "%%%02X", (
u_ch¨
)(*
p
));

2057 
	`evbuf„r_add
(
buf
, "", 1);

2058 
p
 = 
	`°rdup
((*)
	`EVBUFFER_DATA
(
buf
));

2059 
	`evbuf„r_‰ì
(
buf
);

2061  (
p
);

2062 
	}
}

2069 
	$evhâp_decode_uri_öã∫Æ
(

2070 c⁄° *
uri
, 
size_t
 
Àngth
, *
ªt
, 
Æways_decode_∂us
)

2072 
c
;

2073 
i
, 
j
, 
ö_quîy
 = 
Æways_decode_∂us
;

2075 
i
 = 
j
 = 0; 
uri
[i] != '\0'; i++) {

2076 
c
 = 
uri
[
i
];

2077 i‡(
c
 == '?') {

2078 
ö_quîy
 = 1;

2079 } i‡(
c
 ='+' && 
ö_quîy
) {

2080 
c
 = ' ';

2081 } i‡(
c
 ='%' && 
	`isxdigô
(()
uri
[
i
+1]) &&

2082 
	`isxdigô
(()
uri
[
i
+2])) {

2083 
tmp
[] = { 
uri
[
i
+1], uri[i+2], '\0' };

2084 
c
 = ()
	`°πﬁ
(
tmp
, 
NULL
, 16);

2085 
i
 += 2;

2087 
ªt
[
j
++] = 
c
;

2089 
ªt
[
j
] = '\0';

2091  (
j
);

2092 
	}
}

2095 
	$evhâp_decode_uri
(c⁄° *
uri
)

2097 *
ªt
;

2099 i‡((
ªt
 = 
	`mÆloc
(
	`°æí
(
uri
Ë+ 1)Ë=
NULL
)

2100 
	`evít_îr
(1, "%s: mÆloc(%lu)", 
__func__
,

2101 ()(
	`°æí
(
uri
) + 1));

2103 
	`evhâp_decode_uri_öã∫Æ
(
uri
, 
	`°æí
(uri),

2104 
ªt
, 0 );

2106  (
ªt
);

2107 
	}
}

2115 
	$evhâp_∑r£_quîy
(c⁄° *
uri
, 
evkeyvÆq
 *
hódîs
)

2117 *
löe
;

2118 *
¨gumít
;

2119 *
p
;

2121 
	`TAILQ_INIT
(
hódîs
);

2124 i‡(
	`°rchr
(
uri
, '?'Ë=
NULL
)

2127 i‡((
löe
 = 
	`°rdup
(
uri
)Ë=
NULL
)

2128 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2131 
¨gumít
 = 
löe
;

2134 
	`°r£p
(&
¨gumít
, "?");

2136 
p
 = 
¨gumít
;

2137 
p
 !
NULL
 && *p != '\0') {

2138 *
key
, *
vÆue
, *
decoded_vÆue
;

2139 
¨gumít
 = 
	`°r£p
(&
p
, "&");

2141 
vÆue
 = 
¨gumít
;

2142 
key
 = 
	`°r£p
(&
vÆue
, "=");

2143 i‡(
vÆue
 =
NULL
)

2144 
îr‹
;

2146 i‡((
decoded_vÆue
 = 
	`mÆloc
(
	`°æí
(
vÆue
Ë+ 1)Ë=
NULL
)

2147 
	`evít_îr
(1, "%s: mÆloc", 
__func__
);

2149 
	`evhâp_decode_uri_öã∫Æ
(
vÆue
, 
	`°æí
(value),

2150 
decoded_vÆue
, 1 );

2151 
	`evít_debug
(("Quîy P¨am: %†-> %s\n", 
key
, 
decoded_vÆue
));

2152 
	`evhâp_add_hódî_öã∫Æ
(
hódîs
, 
key
, 
decoded_vÆue
);

2153 
	`‰ì
(
decoded_vÆue
);

2156 
îr‹
:

2157 
	`‰ì
(
löe
);

2158 
	}
}

2160 
evhâp_cb
 *

2161 
	$evhâp_di•©ch_ˇŒback
(
hâpcbq
 *
ˇŒbacks
, 
evhâp_ªque°
 *
ªq
)

2163 
evhâp_cb
 *
cb
;

2164 
size_t
 
off£t
 = 0;

2167 *
p
 = 
	`°rchr
(
ªq
->
uri
, '?');

2168 i‡(
p
 !
NULL
)

2169 
off£t
 = (
size_t
)(
p
 - 
ªq
->
uri
);

2171 
	`TAILQ_FOREACH
(
cb
, 
ˇŒbacks
, 
√xt
) {

2172 
ªs
 = 0;

2173 i‡(
p
 =
NULL
) {

2174 
ªs
 = 
	`°rcmp
(
cb
->
wh©
, 
ªq
->
uri
) == 0;

2176 
ªs
 = ((
	`°∫cmp
(
cb
->
wh©
, 
ªq
->
uri
, 
off£t
) == 0) &&

2177 (
cb
->
wh©
[
off£t
] == '\0'));

2180 i‡(
ªs
)

2181  (
cb
);

2184  (
NULL
);

2185 
	}
}

2188 
	$evhâp_h™dÀ_ªque°
(
evhâp_ªque°
 *
ªq
, *
¨g
)

2190 
evhâp
 *
hâp
 = 
¨g
;

2191 
evhâp_cb
 *
cb
 = 
NULL
;

2193 i‡(
ªq
->
uri
 =
NULL
) {

2194 
	`evhâp_£nd_îr‹
(
ªq
, 
HTTP_BADREQUEST
, "Bad Request");

2198 i‡((
cb
 = 
	`evhâp_di•©ch_ˇŒback
(&
hâp
->
ˇŒbacks
, 
ªq
)Ë!
NULL
) {

2199 (*
cb
->cb)(
ªq
, cb->
cb¨g
);

2204 i‡(
hâp
->
gícb
) {

2205 (*
hâp
->
gícb
)(
ªq
, hâp->
gícb¨g
);

2209 
	#ERR_FORMAT
 "<html><head>" \

2214 "</body></html>\n"

	)

2216 *
esˇ≥d_html
 = 
	`evhâp_htmÀsˇ≥
(
ªq
->
uri
);

2217 
evbuf„r
 *
buf
 = 
	`evbuf„r_√w
();

2219 
	`evhâp_ª•⁄£_code
(
ªq
, 
HTTP_NOTFOUND
, "Not Found");

2221 
	`evbuf„r_add_¥ötf
(
buf
, 
ERR_FORMAT
, 
esˇ≥d_html
);

2223 
	`‰ì
(
esˇ≥d_html
);

2225 
	`evhâp_£nd_∑ge
(
ªq
, 
buf
);

2227 
	`evbuf„r_‰ì
(
buf
);

2228 #unde‡
ERR_FORMAT


2230 
	}
}

2233 
	$ac˚±_sockë
(
fd
, 
wh©
, *
¨g
)

2235 
evhâp
 *
hâp
 = 
¨g
;

2236 
sockaddr_°‹age
 
ss
;

2237 
sockÀn_t
 
addæí
 = (
ss
);

2238 
nfd
;

2240 i‡((
nfd
 = 
	`ac˚±
(
fd
, (
sockaddr
 *)&
ss
, &
addæí
)) == -1) {

2241 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EINTR
)

2242 
	`evít_w¨n
("%s: badác˚±", 
__func__
);

2245 i‡(
	`evutû_make_sockë_n⁄blockög
(
nfd
) < 0)

2248 
	`evhâp_gë_ªque°
(
hâp
, 
nfd
, (
sockaddr
 *)&
ss
, 
addæí
);

2249 
	}
}

2252 
	$evhâp_böd_sockë
(
evhâp
 *
hâp
, c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2254 
fd
;

2255 
ªs
;

2257 i‡((
fd
 = 
	`böd_sockë
(
addªss
, 
p‹t
, 1 )) == -1)

2260 i‡(
	`li°í
(
fd
, 128) == -1) {

2261 
	`evít_w¨n
("%s:Üi°í", 
__func__
);

2262 
	`EVUTIL_CLOSESOCKET
(
fd
);

2266 
ªs
 = 
	`evhâp_ac˚±_sockë
(
hâp
, 
fd
);

2268 i‡(
ªs
 != -1)

2269 
	`evít_debug
(("BoundÅoÖort %d - Awaiting connections ... ",

2270 
p‹t
));

2272  (
ªs
);

2273 
	}
}

2276 
	$evhâp_ac˚±_sockë
(
evhâp
 *
hâp
, 
fd
)

2278 
evhâp_bound_sockë
 *
bound
;

2279 
evít
 *
ev
;

2280 
ªs
;

2282 
bound
 = 
	`mÆloc
((
evhâp_bound_sockë
));

2283 i‡(
bound
 =
NULL
)

2286 
ev
 = &
bound
->
böd_ev
;

2289 
	`evít_£t
(
ev
, 
fd
, 
EV_READ
 | 
EV_PERSIST
, 
ac˚±_sockë
, 
hâp
);

2290 
	`EVHTTP_BASE_SET
(
hâp
, 
ev
);

2292 
ªs
 = 
	`evít_add
(
ev
, 
NULL
);

2294 i‡(
ªs
 == -1) {

2295 
	`‰ì
(
bound
);

2299 
	`TAILQ_INSERT_TAIL
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2302 
	}
}

2304 
evhâp
*

2305 
	$evhâp_√w_obje˘
()

2307 
evhâp
 *
hâp
 = 
NULL
;

2309 i‡((
hâp
 = 
	`ˇŒoc
(1, (
evhâp
))Ë=
NULL
) {

2310 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2311  (
NULL
);

2314 
hâp
->
timeout
 = -1;

2316 
	`TAILQ_INIT
(&
hâp
->
sockës
);

2317 
	`TAILQ_INIT
(&
hâp
->
ˇŒbacks
);

2318 
	`TAILQ_INIT
(&
hâp
->
c⁄√˘i⁄s
);

2320  (
hâp
);

2321 
	}
}

2323 
evhâp
 *

2324 
	$evhâp_√w
(
evít_ba£
 *
ba£
)

2326 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2328 
hâp
->
ba£
 = base;

2330  (
hâp
);

2331 
	}
}

2337 
evhâp
 *

2338 
	$evhâp_°¨t
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2340 
evhâp
 *
hâp
 = 
	`evhâp_√w_obje˘
();

2342 i‡(
	`evhâp_böd_sockë
(
hâp
, 
addªss
, 
p‹t
) == -1) {

2343 
	`‰ì
(
hâp
);

2344  (
NULL
);

2347  (
hâp
);

2348 
	}
}

2351 
	$evhâp_‰ì
(
evhâp
* 
hâp
)

2353 
evhâp_cb
 *
hâp_cb
;

2354 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2355 
evhâp_bound_sockë
 *
bound
;

2356 
fd
;

2359 (
bound
 = 
	`TAILQ_FIRST
(&
hâp
->
sockës
)Ë!
NULL
) {

2360 
	`TAILQ_REMOVE
(&
hâp
->
sockës
, 
bound
, 
√xt
);

2362 
fd
 = 
bound
->
böd_ev
.
ev_fd
;

2363 
	`evít_dñ
(&
bound
->
böd_ev
);

2364 
	`EVUTIL_CLOSESOCKET
(
fd
);

2366 
	`‰ì
(
bound
);

2369 (
evc⁄
 = 
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
)Ë!
NULL
) {

2371 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2374 (
hâp_cb
 = 
	`TAILQ_FIRST
(&
hâp
->
ˇŒbacks
)Ë!
NULL
) {

2375 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2376 
	`‰ì
(
hâp_cb
->
wh©
);

2377 
	`‰ì
(
hâp_cb
);

2380 
	`‰ì
(
hâp
);

2381 
	}
}

2384 
	$evhâp_£t_timeout
(
evhâp
* 
hâp
, 
timeout_ö_£cs
)

2386 
hâp
->
timeout
 = 
timeout_ö_£cs
;

2387 
	}
}

2390 
evhâp_£t_cb
(
evhâp
 *
hâp
, c⁄° *
uri
,

2391 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2393 
evhâp_cb
 *
hâp_cb
;

2395 i‡((
hâp_cb
 = 
	`ˇŒoc
(1, (
evhâp_cb
))Ë=
NULL
)

2396 
	`evít_îr
(1, "%s: cÆloc", 
__func__
);

2398 
hâp_cb
->
wh©
 = 
	`°rdup
(
uri
);

2399 
hâp_cb
->
cb
 = cb;

2400 
hâp_cb
->
cb¨g
 = cbarg;

2402 
	`TAILQ_INSERT_TAIL
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2403 
	}
}

2406 
	$evhâp_dñ_cb
(
evhâp
 *
hâp
, c⁄° *
uri
)

2408 
evhâp_cb
 *
hâp_cb
;

2410 
	`TAILQ_FOREACH
(
hâp_cb
, &
hâp
->
ˇŒbacks
, 
√xt
) {

2411 i‡(
	`°rcmp
(
hâp_cb
->
wh©
, 
uri
) == 0)

2414 i‡(
hâp_cb
 =
NULL
)

2417 
	`TAILQ_REMOVE
(&
hâp
->
ˇŒbacks
, 
hâp_cb
, 
√xt
);

2418 
	`‰ì
(
hâp_cb
->
wh©
);

2419 
	`‰ì
(
hâp_cb
);

2422 
	}
}

2425 
evhâp_£t_gícb
(
evhâp
 *
hâp
,

2426 (*
cb
)(
evhâp_ªque°
 *, *), *
cb¨g
)

2428 
hâp
->
gícb
 = 
cb
;

2429 
hâp
->
gícb¨g
 = 
cb¨g
;

2430 
	}
}

2436 
evhâp_ªque°
 *

2437 
evhâp_ªque°_√w
((*
cb
)(
evhâp_ªque°
 *, *), *
¨g
)

2439 
evhâp_ªque°
 *
ªq
 = 
NULL
;

2442 i‡((
ªq
 = 
	`ˇŒoc
(1, (
evhâp_ªque°
))Ë=
NULL
) {

2443 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2444 
îr‹
;

2447 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

2448 
ªq
->
öput_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2449 i‡(
ªq
->
öput_hódîs
 =
NULL
) {

2450 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2451 
îr‹
;

2453 
	`TAILQ_INIT
(
ªq
->
öput_hódîs
);

2455 
ªq
->
ouçut_hódîs
 = 
	`ˇŒoc
(1, (
evkeyvÆq
));

2456 i‡(
ªq
->
ouçut_hódîs
 =
NULL
) {

2457 
	`evít_w¨n
("%s: cÆloc", 
__func__
);

2458 
îr‹
;

2460 
	`TAILQ_INIT
(
ªq
->
ouçut_hódîs
);

2462 i‡((
ªq
->
öput_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2463 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2464 
îr‹
;

2467 i‡((
ªq
->
ouçut_buf„r
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

2468 
	`evít_w¨n
("%s:Évbuf„r_√w", 
__func__
);

2469 
îr‹
;

2472 
ªq
->
cb
 = cb;

2473 
ªq
->
cb_¨g
 = 
¨g
;

2475  (
ªq
);

2477 
îr‹
:

2478 i‡(
ªq
 !
NULL
)

2479 
	`evhâp_ªque°_‰ì
(
ªq
);

2480  (
NULL
);

2481 
	}
}

2484 
	$evhâp_ªque°_‰ì
(
evhâp_ªque°
 *
ªq
)

2486 i‡(
ªq
->
ªmŸe_ho°
 !
NULL
)

2487 
	`‰ì
(
ªq
->
ªmŸe_ho°
);

2488 i‡(
ªq
->
uri
 !
NULL
)

2489 
	`‰ì
(
ªq
->
uri
);

2490 i‡(
ªq
->
ª•⁄£_code_löe
 !
NULL
)

2491 
	`‰ì
(
ªq
->
ª•⁄£_code_löe
);

2493 
	`evhâp_˛ór_hódîs
(
ªq
->
öput_hódîs
);

2494 
	`‰ì
(
ªq
->
öput_hódîs
);

2496 
	`evhâp_˛ór_hódîs
(
ªq
->
ouçut_hódîs
);

2497 
	`‰ì
(
ªq
->
ouçut_hódîs
);

2499 i‡(
ªq
->
öput_buf„r
 !
NULL
)

2500 
	`evbuf„r_‰ì
(
ªq
->
öput_buf„r
);

2502 i‡(
ªq
->
ouçut_buf„r
 !
NULL
)

2503 
	`evbuf„r_‰ì
(
ªq
->
ouçut_buf„r
);

2505 
	`‰ì
(
ªq
);

2506 
	}
}

2509 
evhâp_ªque°_£t_chunked_cb
(
evhâp_ªque°
 *
ªq
,

2510 (*
cb
)(
evhâp_ªque°
 *, *))

2512 
ªq
->
chunk_cb
 = 
cb
;

2513 
	}
}

2520 
	$evhâp_ªque°_uri
(
evhâp_ªque°
 *
ªq
) {

2521 i‡(
ªq
->
uri
 =
NULL
)

2522 
	`evít_debug
(("%s:Ñeque° %∞ha†nÿuri\n", 
__func__
, 
ªq
));

2523  (
ªq
->
uri
);

2524 
	}
}

2531 
evhâp_c⁄√˘i⁄
*

2532 
	$evhâp_gë_ªque°_c⁄√˘i⁄
(

2533 
evhâp
* 
hâp
,

2534 
fd
, 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2536 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2537 *
ho°«me
 = 
NULL
, *
p‹äame
 = NULL;

2539 
	`«me_‰om_addr
(
ß
, 
ßÀn
, &
ho°«me
, &
p‹äame
);

2540 i‡(
ho°«me
 =
NULL
 || 
p‹äame
 == NULL) {

2541 i‡(
ho°«me
Ë
	`‰ì
(hostname);

2542 i‡(
p‹äame
Ë
	`‰ì
(portname);

2543  (
NULL
);

2546 
	`evít_debug
(("%s:ÇewÑequest from %s:%s on %d\n",

2547 
__func__
, 
ho°«me
, 
p‹äame
, 
fd
));

2550 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
(
ho°«me
, 
	`©oi
(
p‹äame
));

2551 
	`‰ì
(
ho°«me
);

2552 
	`‰ì
(
p‹äame
);

2553 i‡(
evc⁄
 =
NULL
)

2554  (
NULL
);

2557 
	`evhâp_c⁄√˘i⁄_£t_ba£
(
evc⁄
, 
hâp
->
ba£
);

2559 
evc⁄
->
Êags
 |
EVHTTP_CON_INCOMING
;

2560 
evc⁄
->
°©e
 = 
EVCON_READING_FIRSTLINE
;

2562 
evc⁄
->
fd
 = fd;

2564  (
evc⁄
);

2565 
	}
}

2568 
	$evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evhâp_c⁄√˘i⁄
 *
evc⁄
)

2570 
evhâp
 *
hâp
 = 
evc⁄
->
hâp_£rvî
;

2571 
evhâp_ªque°
 *
ªq
;

2572 i‡((
ªq
 = 
	`evhâp_ªque°_√w
(
evhâp_h™dÀ_ªque°
, 
hâp
)Ë=
NULL
)

2575 
ªq
->
evc⁄
 =Évcon;

2576 
ªq
->
Êags
 |
EVHTTP_REQ_OWN_CONNECTION
;

2578 
	`TAILQ_INSERT_TAIL
(&
evc⁄
->
ªque°s
, 
ªq
, 
√xt
);

2580 
ªq
->
köd
 = 
EVHTTP_REQUEST
;

2582 i‡((
ªq
->
ªmŸe_ho°
 = 
	`°rdup
(
evc⁄
->
addªss
)Ë=
NULL
)

2583 
	`evít_îr
(1, "%s: sådup", 
__func__
);

2584 
ªq
->
ªmŸe_p‹t
 = 
evc⁄
->
p‹t
;

2586 
	`evhâp_°¨t_ªad
(
evc⁄
);

2589 
	}
}

2592 
	$evhâp_gë_ªque°
(
evhâp
 *
hâp
, 
fd
,

2593 
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
)

2595 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

2597 
evc⁄
 = 
	`evhâp_gë_ªque°_c⁄√˘i⁄
(
hâp
, 
fd
, 
ß
, 
ßÀn
);

2598 i‡(
evc⁄
 =
NULL
)

2602 i‡(
hâp
->
timeout
 != -1)

2603 
	`evhâp_c⁄√˘i⁄_£t_timeout
(
evc⁄
, 
hâp
->
timeout
);

2609 
evc⁄
->
hâp_£rvî
 = 
hâp
;

2610 
	`TAILQ_INSERT_TAIL
(&
hâp
->
c⁄√˘i⁄s
, 
evc⁄
, 
√xt
);

2612 i‡(
	`evhâp_assocüã_√w_ªque°_wôh_c⁄√˘i⁄
(
evc⁄
) == -1)

2613 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

2614 
	}
}

2622 
addröfo
 *

2623 
	$addr_‰om_«me
(*
addªss
)

2625 #ifde‡
HAVE_GETADDRINFO


2626 
addröfo
 
ai
, *
aô›
;

2627 
ai_ªsu…
;

2629 
	`mem£t
(&
ai
, 0, (ai));

2630 
ai
.
ai_Ámûy
 = 
AF_INET
;

2631 
ai
.
ai_sockty≥
 = 
SOCK_RAW
;

2632 
ai
.
ai_Êags
 = 0;

2633 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
NULL
, &
ai
, &
aô›
)) != 0) {

2634 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2635 
	`evít_w¨n
("getaddrinfo");

2637 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2640  (
aô›
);

2642 
	`as£π
(0);

2643  
NULL
;

2645 
	}
}

2649 
	$«me_‰om_addr
(
sockaddr
 *
ß
, 
sockÀn_t
 
ßÀn
,

2650 **
pho°
, **
µ‹t
)

2652 
¡›
[
NI_MAXHOST
];

2653 
°Ω‹t
[
NI_MAXSERV
];

2654 
ni_ªsu…
;

2656 #ifde‡
HAVE_GETNAMEINFO


2657 
ni_ªsu…
 = 
	`gë«meöfo
(
ß
, 
ßÀn
,

2658 
¡›
, “t›), 
°Ω‹t
, (strport),

2659 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2661 i‡(
ni_ªsu…
 != 0) {

2662 i‡(
ni_ªsu…
 =
EAI_SYSTEM
)

2663 
	`evít_îr
(1, "getnameinfo failed");

2665 
	`evít_îrx
(1, "gë«meöfÿÁûed: %s", 
	`gai_°ªº‹
(
ni_ªsu…
));

2669 
ni_ªsu…
 = 
	`Áke_gë«meöfo
(
ß
, 
ßÀn
,

2670 
¡›
, “t›), 
°Ω‹t
, (strport),

2671 
NI_NUMERICHOST
|
NI_NUMERICSERV
);

2672 i‡(
ni_ªsu…
 != 0)

2675 *
pho°
 = 
	`°rdup
(
¡›
);

2676 *
µ‹t
 = 
	`°rdup
(
°Ω‹t
);

2677 
	}
}

2682 
	$böd_sockë_ai
(
addröfo
 *
ai
, 
ªu£
)

2684 
fd
, 
⁄
 = 1, 
r
;

2685 
£ºno
;

2688 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

2689 i‡(
fd
 == -1) {

2690 
	`evít_w¨n
("socket");

2694 i‡(
	`evutû_make_sockë_n⁄blockög
(
fd
) < 0)

2695 
out
;

2697 #i‚de‡
WIN32


2698 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 1) == -1) {

2699 
	`evít_w¨n
("fcntl(F_SETFD)");

2700 
out
;

2704 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*)&
⁄
, (on));

2705 i‡(
ªu£
) {

2706 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

2707 (*)&
⁄
, (on));

2710 i‡(
ai
 !
NULL
) {

2711 
r
 = 
	`böd
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
);

2712 i‡(
r
 == -1)

2713 
out
;

2716  (
fd
);

2718 
out
:

2719 
£ºno
 = 
	`EVUTIL_SOCKET_ERROR
();

2720 
	`EVUTIL_CLOSESOCKET
(
fd
);

2721 
	`EVUTIL_SET_SOCKET_ERROR
(
£ºno
);

2723 
	}
}

2725 
addröfo
 *

2726 
	$make_addröfo
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

2728 
addröfo
 *
aô›
 = 
NULL
;

2730 #ifde‡
HAVE_GETADDRINFO


2731 
addröfo
 
ai
;

2732 
°Ω‹t
[
NI_MAXSERV
];

2733 
ai_ªsu…
;

2735 
	`mem£t
(&
ai
, 0, (ai));

2736 
ai
.
ai_Ámûy
 = 
AF_INET
;

2737 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

2738 
ai
.
ai_Êags
 = 
AI_PASSIVE
;

2739 
	`evutû_¢¥ötf
(
°Ω‹t
, (°Ω‹t), "%d", 
p‹t
);

2740 i‡((
ai_ªsu…
 = 
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
)) != 0) {

2741 i‡–
ai_ªsu…
 =
EAI_SYSTEM
 )

2742 
	`evít_w¨n
("getaddrinfo");

2744 
	`evít_w¨nx
("gëaddröfo: %s", 
	`gai_°ªº‹
(
ai_ªsu…
));

2745  (
NULL
);

2748 
cur
;

2749 
addröfo
 
ai
[2];

2750 i‡(++
cur
 == 2) cur = 0;

2752 i‡(
	`Áke_gëaddröfo
(
addªss
, &
ai
[
cur
]) < 0) {

2753 
	`evít_w¨n
("fake_getaddrinfo");

2754  (
NULL
);

2756 
aô›
 = &
ai
[
cur
];

2757 ((
sockaddr_ö
 *Ë
aô›
->
ai_addr
)->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

2760  (
aô›
);

2761 
	}
}

2764 
	$böd_sockë
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
, 
ªu£
)

2766 
fd
;

2767 
addröfo
 *
aô›
 = 
NULL
;

2770 i‡(
addªss
 =
NULL
 && 
p‹t
 == 0)

2771  
	`böd_sockë_ai
(
NULL
, 0);

2773 
aô›
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2775 i‡(
aô›
 =
NULL
)

2778 
fd
 = 
	`böd_sockë_ai
(
aô›
, 
ªu£
);

2780 #ifde‡
HAVE_GETADDRINFO


2781 
	`‰ìaddröfo
(
aô›
);

2783 
	`Áke_‰ìaddröfo
(
aô›
);

2786  (
fd
);

2787 
	}
}

2790 
	$sockë_c⁄√˘
(
fd
, c⁄° *
addªss
, 
p‹t
)

2792 
addröfo
 *
ai
 = 
	`make_addröfo
(
addªss
, 
p‹t
);

2793 
ªs
 = -1;

2795 i‡(
ai
 =
NULL
) {

2796 
	`evít_debug
(("%s: make_addrinfo: \"%s:%d\"",

2797 
__func__
, 
addªss
, 
p‹t
));

2801 i‡(
	`c⁄√˘
(
fd
, 
ai
->
ai_addr
,ái->
ai_addæí
) == -1) {

2802 #ifde‡
WIN32


2803 
tmp_îr‹
 = 
	`WSAGëLa°Eº‹
();

2804 i‡(
tmp_îr‹
 !
WSAEWOULDBLOCK
 &&Åmp_îr‹ !
WSAEINVAL
 &&

2805 
tmp_îr‹
 !
WSAEINPROGRESS
) {

2806 
out
;

2809 i‡(
î∫o
 !
EINPROGRESS
) {

2810 
out
;

2816 
ªs
 = 0;

2818 
out
:

2819 #ifde‡
HAVE_GETADDRINFO


2820 
	`‰ìaddröfo
(
ai
);

2822 
	`Áke_‰ìaddröfo
(
ai
);

2825  (
ªs
);

2826 
	}
}

	@kqueue.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	#_GNU_SOURCE
 1

	)

35 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_SYS_TIME_H


37 
	~<sys/time.h
>

39 
	~<sys/_libevít_time.h
>

41 
	~<sys/queue.h
>

42 
	~<sys/evít.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 
	~<as£π.h
>

50 #ifde‡
HAVE_INTTYPES_H


51 
	~<öây≥s.h
>

57 #i‡
deföed
(
HAVE_INTTYPES_H
Ë&& !deföed(
__O≥nBSD__
Ë&& !deföed(
__FªeBSD__
Ë&& !deföed(
__d¨wö__
Ë&& !deföed(
__APPLE__
)

58 
	#PTR_TO_UDATA
(
x
Ë((
öçå_t
)(x))

	)

60 
	#PTR_TO_UDATA
(
x
Ë(x)

	)

63 
	~"evít.h
"

64 
	~"evít-öã∫Æ.h
"

65 
	~"log.h
"

67 
	#EVLIST_X_KQINKERNEL
 0x1000

	)

69 
	#NEVENT
 64

	)

71 
	skq›
 {

72 
kevít
 *
	mch™ges
;

73 
	mnch™ges
;

74 
kevít
 *
	mevíts
;

75 
evít_li°
 
	mevsigevíts
[
NSIG
];

76 
	m√víts
;

77 
	mkq
;

78 
pid_t
 
	mpid
;

81 *
kq_öô
 (
evít_ba£
 *);

82 
kq_add
 (*, 
evít
 *);

83 
kq_dñ
 (*, 
evít
 *);

84 
kq_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

85 
kq_ö£π
 (
kq›
 *, 
kevít
 *);

86 
kq_dóŒoc
 (
evít_ba£
 *, *);

88 c⁄° 
evít›
 
	gkq›s
 = {

90 
kq_öô
,

91 
kq_add
,

92 
kq_dñ
,

93 
kq_di•©ch
,

94 
kq_dóŒoc
,

99 
	$kq_öô
(
evít_ba£
 *
ba£
)

101 
i
, 
kq
;

102 
kq›
 *
kqueue›
;

105 i‡(
	`evutû_gëív
("EVENT_NOKQUEUE"))

106  (
NULL
);

108 i‡(!(
kqueue›
 = 
	`ˇŒoc
(1, (
kq›
))))

109  (
NULL
);

113 i‡((
kq
 = 
	`kqueue
()) == -1) {

114 
	`evít_w¨n
("kqueue");

115 
	`‰ì
 (
kqueue›
);

116  (
NULL
);

119 
kqueue›
->
kq
 = kq;

121 
kqueue›
->
pid
 = 
	`gëpid
();

124 
kqueue›
->
ch™ges
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

125 i‡(
kqueue›
->
ch™ges
 =
NULL
) {

126 
	`‰ì
 (
kqueue›
);

127  (
NULL
);

129 
kqueue›
->
evíts
 = 
	`mÆloc
(
NEVENT
 * (
kevít
));

130 i‡(
kqueue›
->
evíts
 =
NULL
) {

131 
	`‰ì
 (
kqueue›
->
ch™ges
);

132 
	`‰ì
 (
kqueue›
);

133  (
NULL
);

135 
kqueue›
->
√víts
 = 
NEVENT
;

138 
i
 = 0; i < 
NSIG
; ++i) {

139 
	`TAILQ_INIT
(&
kqueue›
->
evsigevíts
[
i
]);

143 
kqueue›
->
ch™ges
[0].
idít
 = -1;

144 
kqueue›
->
ch™ges
[0].
fûãr
 = 
EVFILT_READ
;

145 
kqueue›
->
ch™ges
[0].
Êags
 = 
EV_ADD
;

151 i‡(
	`kevít
(
kq
,

152 
kqueue›
->
ch™ges
, 1, kqueue›->
evíts
, 
NEVENT
, 
NULL
) != 1 ||

153 
kqueue›
->
evíts
[0].
idít
 != -1 ||

154 
kqueue›
->
evíts
[0].
Êags
 !
EV_ERROR
) {

155 
	`evít_w¨n
("%s: dëe˘ed brokí kqueue;ÇŸ usög.", 
__func__
);

156 
	`‰ì
(
kqueue›
->
ch™ges
);

157 
	`‰ì
(
kqueue›
->
evíts
);

158 
	`‰ì
(
kqueue›
);

159 
	`˛o£
(
kq
);

160  (
NULL
);

163  (
kqueue›
);

164 
	}
}

167 
	$kq_ö£π
(
kq›
 *kq›, 
kevít
 *
kev
)

169 
√víts
 = 
kq›
->nevents;

171 i‡(
kq›
->
nch™ges
 =
√víts
) {

172 
kevít
 *
√wch™ge
;

173 
kevít
 *
√wªsu…
;

175 
√víts
 *= 2;

177 
√wch™ge
 = 
	`ªÆloc
(
kq›
->
ch™ges
,

178 
√víts
 * (
kevít
));

179 i‡(
√wch™ge
 =
NULL
) {

180 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

183 
kq›
->
ch™ges
 = 
√wch™ge
;

185 
√wªsu…
 = 
	`ªÆloc
(
kq›
->
evíts
,

186 
√víts
 * (
kevít
));

192 i‡(
√wªsu…
 =
NULL
) {

193 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

196 
kq›
->
evíts
 = 
√wªsu…
;

198 
kq›
->
√víts
 =Çevents;

201 
	`mem˝y
(&
kq›
->
ch™ges
[kq›->
nch™ges
++], 
kev
, (
kevít
));

203 
	`evít_debug
(("%s: fd %d %s%s",

204 
__func__
, ()
kev
->
idít
,

205 
kev
->
fûãr
 =
EVFILT_READ
 ? "EVFILT_READ" : "EVFILT_WRITE",

206 
kev
->
Êags
 =
EV_DELETE
 ? " (del)" : ""));

209 
	}
}

212 
	$kq_sigh™dÀr
(
sig
)

215 
	}
}

218 
	$kq_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

220 
kq›
 *kq› = 
¨g
;

221 
kevít
 *
ch™ges
 = 
kq›
->changes;

222 
kevít
 *
evíts
 = 
kq›
->events;

223 
evít
 *
ev
;

224 
time•ec
 
ts
, *
ts_p
 = 
NULL
;

225 
i
, 
ªs
;

227 i‡(
tv
 !
NULL
) {

228 
	`TIMEVAL_TO_TIMESPEC
(
tv
, &
ts
);

229 
ts_p
 = &
ts
;

232 
ªs
 = 
	`kevít
(
kq›
->
kq
, 
ch™ges
, kq›->
nch™ges
,

233 
evíts
, 
kq›
->
√víts
, 
ts_p
);

234 
kq›
->
nch™ges
 = 0;

235 i‡(
ªs
 == -1) {

236 i‡(
î∫o
 !
EINTR
) {

237 
	`evít_w¨n
("kevent");

244 
	`evít_debug
(("%s: kevíàªp‹t†%d", 
__func__
, 
ªs
));

246 
i
 = 0; i < 
ªs
; i++) {

247 
which
 = 0;

249 i‡(
evíts
[
i
].
Êags
 & 
EV_ERROR
) {

262 i‡(
evíts
[
i
].
d©a
 =
EBADF
 ||

263 
evíts
[
i
].
d©a
 =
EINVAL
 ||

264 
evíts
[
i
].
d©a
 =
ENOENT
)

266 
î∫o
 = 
evíts
[
i
].
d©a
;

270 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_READ
) {

271 
which
 |
EV_READ
;

272 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_WRITE
) {

273 
which
 |
EV_WRITE
;

274 } i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

275 
which
 |
EV_SIGNAL
;

278 i‡(!
which
)

281 i‡(
evíts
[
i
].
fûãr
 =
EVFILT_SIGNAL
) {

282 
evít_li°
 *
hód
 =

283 (
evít_li°
 *)
evíts
[
i
].
ud©a
;

284 
	`TAILQ_FOREACH
(
ev
, 
hód
, 
ev_sig«l_√xt
) {

285 
	`evít_a˘ive
(
ev
, 
which
, 
evíts
[
i
].
d©a
);

288 
ev
 = (
evít
 *)
evíts
[
i
].
ud©a
;

290 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

291 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

293 
	`evít_a˘ive
(
ev
, 
which
, 1);

298 
	}
}

302 
	$kq_add
(*
¨g
, 
evít
 *
ev
)

304 
kq›
 *kq› = 
¨g
;

305 
kevít
 
kev
;

307 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

308 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

310 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

311 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

312 
time•ec
 
timeout
 = { 0, 0 };

314 
	`mem£t
(&
kev
, 0, (kev));

315 
kev
.
idít
 = 
nsig«l
;

316 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

317 
kev
.
Êags
 = 
EV_ADD
;

318 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(&
kq›
->
evsigevíts
[
nsig«l
]);

323 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

326 i‡(
	`_evsig«l_£t_h™dÀr
(
ev
->
ev_ba£
, 
nsig«l
,

327 
kq_sigh™dÀr
) == -1)

331 
	`TAILQ_INSERT_TAIL
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
,

332 
ev_sig«l_√xt
);

333 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

337 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

338 
	`mem£t
(&
kev
, 0, (kev));

339 
kev
.
idít
 = 
ev
->
ev_fd
;

340 
kev
.
fûãr
 = 
EVFILT_READ
;

341 #ifde‡
NOTE_EOF


343 
kev
.
fÊags
 = 
NOTE_EOF
;

345 
kev
.
Êags
 = 
EV_ADD
;

346 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

347 
kev
.
Êags
 |
EV_ONESHOT
;

348 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

350 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

353 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

356 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

357 
	`mem£t
(&
kev
, 0, (kev));

358 
kev
.
idít
 = 
ev
->
ev_fd
;

359 
kev
.
fûãr
 = 
EVFILT_WRITE
;

360 
kev
.
Êags
 = 
EV_ADD
;

361 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

362 
kev
.
Êags
 |
EV_ONESHOT
;

363 
kev
.
ud©a
 = 
	`PTR_TO_UDATA
(
ev
);

365 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

368 
ev
->
ev_Êags
 |
EVLIST_X_KQINKERNEL
;

372 
	}
}

375 
	$kq_dñ
(*
¨g
, 
evít
 *
ev
)

377 
kq›
 *kq› = 
¨g
;

378 
kevít
 
kev
;

380 i‡(!(
ev
->
ev_Êags
 & 
EVLIST_X_KQINKERNEL
))

383 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
) {

384 
nsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

385 
time•ec
 
timeout
 = { 0, 0 };

387 
	`as£π
(
nsig«l
 >0 &&Çsig«»< 
NSIG
);

388 
	`TAILQ_REMOVE
(&
kq›
->
evsigevíts
[
nsig«l
], 
ev
, 
ev_sig«l_√xt
);

389 i‡(
	`TAILQ_EMPTY
(&
kq›
->
evsigevíts
[
nsig«l
])) {

390 
	`mem£t
(&
kev
, 0, (kev));

391 
kev
.
idít
 = 
nsig«l
;

392 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

393 
kev
.
Êags
 = 
EV_DELETE
;

398 i‡(
	`kevít
(
kq›
->
kq
, &
kev
, 1, 
NULL
, 0, &
timeout
) == -1)

401 i‡(
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
,

402 
nsig«l
) == -1)

406 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

410 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

411 
	`mem£t
(&
kev
, 0, (kev));

412 
kev
.
idít
 = 
ev
->
ev_fd
;

413 
kev
.
fûãr
 = 
EVFILT_READ
;

414 
kev
.
Êags
 = 
EV_DELETE
;

416 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

419 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

422 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

423 
	`mem£t
(&
kev
, 0, (kev));

424 
kev
.
idít
 = 
ev
->
ev_fd
;

425 
kev
.
fûãr
 = 
EVFILT_WRITE
;

426 
kev
.
Êags
 = 
EV_DELETE
;

428 i‡(
	`kq_ö£π
(
kq›
, &
kev
) == -1)

431 
ev
->
ev_Êags
 &~
EVLIST_X_KQINKERNEL
;

435 
	}
}

438 
	$kq_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

440 
kq›
 *kq› = 
¨g
;

442 i‡(
kq›
->
ch™ges
)

443 
	`‰ì
(
kq›
->
ch™ges
);

444 i‡(
kq›
->
evíts
)

445 
	`‰ì
(
kq›
->
evíts
);

446 i‡(
kq›
->
kq
 >0 && kq›->
pid
 =
	`gëpid
())

447 
	`˛o£
(
kq›
->
kq
);

448 
	`mem£t
(
kq›
, 0, (kqop));

449 
	`‰ì
(
kq›
);

450 
	}
}

	@log.c

40 #ifde‡
HAVE_CONFIG_H


41 
	~"c⁄fig.h
"

44 #ifde‡
WIN32


45 
	#WIN32_LEAN_AND_MEAN


	)

46 
	~<wödows.h
>

47 #unde‡
WIN32_LEAN_AND_MEAN


49 
	~<sys/ty≥s.h
>

50 #ifde‡
HAVE_SYS_TIME_H


51 
	~<sys/time.h
>

53 
	~<sys/_libevít_time.h
>

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°d¨g.h
>

58 
	~<°rög.h
>

59 
	~<î∫o.h
>

60 
	~"evít.h
"

62 
	~"log.h
"

63 
	~"evutû.h
"

65 
_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
,

66 
va_li°
 
≠
);

67 
evít_log
(
£vîôy
, c⁄° *
msg
);

70 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...)

72 
va_li°
 
≠
;

74 
	`va_°¨t
(
≠
, 
fmt
);

75 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, 
î∫o
, 
fmt
, 
≠
);

76 
	`va_íd
(
≠
);

77 
	`exô
(
evÆ
);

78 
	}
}

81 
	$evít_w¨n
(c⁄° *
fmt
, ...)

83 
va_li°
 
≠
;

85 
	`va_°¨t
(
≠
, 
fmt
);

86 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, 
î∫o
, 
fmt
, 
≠
);

87 
	`va_íd
(
≠
);

88 
	}
}

91 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...)

93 
va_li°
 
≠
;

95 
	`va_°¨t
(
≠
, 
fmt
);

96 
	`_w¨n_hñ≥r
(
_EVENT_LOG_ERR
, -1, 
fmt
, 
≠
);

97 
	`va_íd
(
≠
);

98 
	`exô
(
evÆ
);

99 
	}
}

102 
	$evít_w¨nx
(c⁄° *
fmt
, ...)

104 
va_li°
 
≠
;

106 
	`va_°¨t
(
≠
, 
fmt
);

107 
	`_w¨n_hñ≥r
(
_EVENT_LOG_WARN
, -1, 
fmt
, 
≠
);

108 
	`va_íd
(
≠
);

109 
	}
}

112 
	$evít_msgx
(c⁄° *
fmt
, ...)

114 
va_li°
 
≠
;

116 
	`va_°¨t
(
≠
, 
fmt
);

117 
	`_w¨n_hñ≥r
(
_EVENT_LOG_MSG
, -1, 
fmt
, 
≠
);

118 
	`va_íd
(
≠
);

119 
	}
}

122 
	$_evít_debugx
(c⁄° *
fmt
, ...)

124 
va_li°
 
≠
;

126 
	`va_°¨t
(
≠
, 
fmt
);

127 
	`_w¨n_hñ≥r
(
_EVENT_LOG_DEBUG
, -1, 
fmt
, 
≠
);

128 
	`va_íd
(
≠
);

129 
	}
}

132 
	$_w¨n_hñ≥r
(
£vîôy
, 
log_î∫o
, c⁄° *
fmt
, 
va_li°
 
≠
)

134 
buf
[1024];

135 
size_t
 
Àn
;

137 i‡(
fmt
 !
NULL
)

138 
	`evutû_v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

140 
buf
[0] = '\0';

142 i‡(
log_î∫o
 >= 0) {

143 
Àn
 = 
	`°æí
(
buf
);

144 i‡(
Àn
 < (
buf
) - 3) {

145 
	`evutû_¢¥ötf
(
buf
 + 
Àn
, (buf) -Üen, ": %s",

146 
	`°ªº‹
(
log_î∫o
));

150 
	`evít_log
(
£vîôy
, 
buf
);

151 
	}
}

153 
evít_log_cb
 
	glog_‚
 = 
NULL
;

156 
	$evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
)

158 
log_‚
 = 
cb
;

159 
	}
}

162 
	$evít_log
(
£vîôy
, c⁄° *
msg
)

164 i‡(
log_‚
)

165 
	`log_‚
(
£vîôy
, 
msg
);

167 c⁄° *
£vîôy_°r
;

168 
£vîôy
) {

169 
_EVENT_LOG_DEBUG
:

170 
£vîôy_°r
 = "debug";

172 
_EVENT_LOG_MSG
:

173 
£vîôy_°r
 = "msg";

175 
_EVENT_LOG_WARN
:

176 
£vîôy_°r
 = "warn";

178 
_EVENT_LOG_ERR
:

179 
£vîôy_°r
 = "err";

182 
£vîôy_°r
 = "???";

185 ()
	`Ârötf
(
°dîr
, "[%s] %s\n", 
£vîôy_°r
, 
msg
);

187 
	}
}

	@log.h

27 #i‚de‡
_LOG_H_


28 
	#_LOG_H_


	)

30 #ifde‡
__GNUC__


31 
	#EV_CHECK_FMT
(
a
,
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

33 
	#EV_CHECK_FMT
(
a
,
b
)

	)

36 
	$evít_îr
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

37 
	$evít_w¨n
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

38 
	$evít_îrx
(
evÆ
, c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(2,3);

39 
	$evít_w¨nx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

40 
	$evít_msgx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

41 
	$_evít_debugx
(c⁄° *
fmt
, ...Ë
	`EV_CHECK_FMT
(1,2);

43 #ifde‡
USE_DEBUG


44 
	#evít_debug
(
x
Ë
_evít_debugx
 
	)
x

46 
	#evít_debug
(
x
Ëdÿ{;
	}
} 0)

	)

49 #unde‡
EV_CHECK_FMT


	@min_heap.h

27 #i‚de‡
_MIN_HEAP_H_


28 
	#_MIN_HEAP_H_


	)

30 
	~"evít.h
"

31 
	~"evutû.h
"

33 
	smö_hóp


35 
evít
** 
	mp
;

36 
	mn
, 
	ma
;

37 } 
	tmö_hóp_t
;

39 
ölöe
 
mö_hóp_˘‹
(
mö_hóp_t
* 
s
);

40 
ölöe
 
mö_hóp_dt‹
(
mö_hóp_t
* 
s
);

41 
ölöe
 
mö_hóp_ñem_öô
(
evít
* 
e
);

42 
ölöe
 
mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
);

43 
ölöe
 
mö_hóp_em±y
(
mö_hóp_t
* 
s
);

44 
ölöe
 
mö_hóp_size
(
mö_hóp_t
* 
s
);

45 
ölöe
 
evít
* 
mö_hóp_t›
(
mö_hóp_t
* 
s
);

46 
ölöe
 
mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
);

47 
ölöe
 
mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

48 
ölöe
 
evít
* 
mö_hóp_p›
(
mö_hóp_t
* 
s
);

49 
ölöe
 
mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
);

50 
ölöe
 
mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

51 
ölöe
 
mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
);

53 
	$mö_hóp_ñem_gª©î
(
evít
 *
a
, evíà*
b
)

55  
	`evutû_timîcmp
(&
a
->
ev_timeout
, &
b
->ev_timeout, >);

56 
	}
}

58 
	$mö_hóp_˘‹
(
mö_hóp_t
* 
s
Ë{ s->
p
 = 0; s->
n
 = 0; s->
a
 = 0; 
	}
}

59 
	$mö_hóp_dt‹
(
mö_hóp_t
* 
s
Ë{ 
	`‰ì
(s->
p
); 
	}
}

60 
	$mö_hóp_ñem_öô
(
evít
* 
e
Ë{É->
mö_hóp_idx
 = -1; 
	}
}

61 
	$mö_hóp_em±y
(
mö_hóp_t
* 
s
Ë{  0u =s->
n
; 
	}
}

62 
	$mö_hóp_size
(
mö_hóp_t
* 
s
Ë{  s->
n
; 
	}
}

63 
evít
* 
	$mö_hóp_t›
(
mö_hóp_t
* 
s
Ë{  s->
n
 ? *s->
p
 : 0; 
	}
}

65 
	$mö_hóp_push
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

67 if(
	`mö_hóp_ª£rve
(
s
, s->
n
 + 1))

69 
	`mö_hóp_shi·_up_
(
s
, s->
n
++, 
e
);

71 
	}
}

73 
evít
* 
	$mö_hóp_p›
(
mö_hóp_t
* 
s
)

75 if(
s
->
n
)

77 
evít
* 
e
 = *
s
->
p
;

78 
	`mö_hóp_shi·_down_
(
s
, 0u, s->
p
[--s->
n
]);

79 
e
->
mö_hóp_idx
 = -1;

80  
e
;

83 
	}
}

85 
	$mö_hóp_îa£
(
mö_hóp_t
* 
s
, 
evít
* 
e
)

87 if((()-1Ë!
e
->
mö_hóp_idx
)

89 
evít
 *
œ°
 = 
s
->
p
[--s->
n
];

90 
∑ª¡
 = (
e
->
mö_hóp_idx
 - 1) / 2;

96 i‡(
e
->
mö_hóp_idx
 > 0 && 
	`mö_hóp_ñem_gª©î
(
s
->
p
[
∑ª¡
], 
œ°
))

97 
	`mö_hóp_shi·_up_
(
s
, 
e
->
mö_hóp_idx
, 
œ°
);

99 
	`mö_hóp_shi·_down_
(
s
, 
e
->
mö_hóp_idx
, 
œ°
);

100 
e
->
mö_hóp_idx
 = -1;

104 
	}
}

106 
	$mö_hóp_ª£rve
(
mö_hóp_t
* 
s
, 
n
)

108 if(
s
->
a
 < 
n
)

110 
evít
** 
p
;

111 
a
 = 
s
->a ? s->a * 2 : 8;

112 if(
a
 < 
n
)

113 
a
 = 
n
;

114 if(!(
p
 = (
evít
**)
	`ªÆloc
(
s
->p, 
a
 *  *p)))

116 
s
->
p
 =Ö;

117 
s
->
a
 =á;

120 
	}
}

122 
	$mö_hóp_shi·_up_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

124 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

125 
hﬁe_ödex
 && 
	`mö_hóp_ñem_gª©î
(
s
->
p
[
∑ª¡
], 
e
))

127 (
s
->
p
[
hﬁe_ödex
] = s->p[
∑ª¡
])->
mö_hóp_idx
 = hole_index;

128 
hﬁe_ödex
 = 
∑ª¡
;

129 
∑ª¡
 = (
hﬁe_ödex
 - 1) / 2;

131 (
s
->
p
[
hﬁe_ödex
] = 
e
)->
mö_hóp_idx
 = hole_index;

132 
	}
}

134 
	$mö_hóp_shi·_down_
(
mö_hóp_t
* 
s
, 
hﬁe_ödex
, 
evít
* 
e
)

136 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

137 
mö_chûd
 <
s
->
n
)

139 
mö_chûd
 -mö_chûd =
s
->
n
 || 
	`mö_hóp_ñem_gª©î
(s->
p
[min_child], s->p[min_child - 1]);

140 if(!(
	`mö_hóp_ñem_gª©î
(
e
, 
s
->
p
[
mö_chûd
])))

142 (
s
->
p
[
hﬁe_ödex
] = s->p[
mö_chûd
])->
mö_hóp_idx
 = hole_index;

143 
hﬁe_ödex
 = 
mö_chûd
;

144 
mö_chûd
 = 2 * (
hﬁe_ödex
 + 1);

146 
	`mö_hóp_shi·_up_
(
s
, 
hﬁe_ödex
, 
e
);

147 
	}
}

	@poll.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 
	~<sys/queue.h
>

40 
	~<pﬁl.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<uni°d.h
>

46 
	~<î∫o.h
>

47 #ifde‡
CHECK_INVARIANTS


48 
	~<as£π.h
>

51 
	~"evít.h
"

52 
	~"evít-öã∫Æ.h
"

53 
	~"evsig«l.h
"

54 
	~"log.h
"

56 
	spﬁl›
 {

57 
	mevít_cou¡
;

58 
	mnfds
;

59 
	mfd_cou¡
;

60 
pﬁlfd
 *
	mevít_£t
;

61 
evít
 **
	mevít_r_back
;

62 
evít
 **
	mevít_w_back
;

63 *
	midx∂us1_by_fd
;

68 *
pﬁl_öô
 (
evít_ba£
 *);

69 
pﬁl_add
 (*, 
evít
 *);

70 
pﬁl_dñ
 (*, 
evít
 *);

71 
pﬁl_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

72 
pﬁl_dóŒoc
 (
evít_ba£
 *, *);

74 c⁄° 
evít›
 
	gpﬁl›s
 = {

76 
pﬁl_öô
,

77 
pﬁl_add
,

78 
pﬁl_dñ
,

79 
pﬁl_di•©ch
,

80 
pﬁl_dóŒoc
,

85 
	$pﬁl_öô
(
evít_ba£
 *
ba£
)

87 
pﬁl›
 *pollop;

90 i‡(
	`evutû_gëív
("EVENT_NOPOLL"))

91  (
NULL
);

93 i‡(!(
pﬁl›
 = 
	`ˇŒoc
(1, (pollop))))

94  (
NULL
);

96 
	`evsig«l_öô
(
ba£
);

98  (
pﬁl›
);

99 
	}
}

101 #ifde‡
CHECK_INVARIANTS


103 
	$pﬁl_check_ok
(
pﬁl›
 *
p›
)

105 
i
, 
idx
;

106 
evít
 *
ev
;

108 
i
 = 0; i < 
p›
->
fd_cou¡
; ++i) {

109 
idx
 = 
p›
->
idx∂us1_by_fd
[
i
]-1;

110 i‡(
idx
 < 0)

112 
	`as£π
(
p›
->
evít_£t
[
idx
].
fd
 =
i
);

113 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLIN
) {

114 
ev
 = 
p›
->
evít_r_back
[
idx
];

115 
	`as£π
(
ev
);

116 
	`as£π
(
ev
->
ev_evíts
 & 
EV_READ
);

117 
	`as£π
(
ev
->
ev_fd
 =
i
);

119 i‡(
p›
->
evít_£t
[
idx
].
evíts
 & 
POLLOUT
) {

120 
ev
 = 
p›
->
evít_w_back
[
idx
];

121 
	`as£π
(
ev
);

122 
	`as£π
(
ev
->
ev_evíts
 & 
EV_WRITE
);

123 
	`as£π
(
ev
->
ev_fd
 =
i
);

126 
i
 = 0; i < 
p›
->
nfds
; ++i) {

127 
pﬁlfd
 *
pfd
 = &
p›
->
evít_£t
[
i
];

128 
	`as£π
(
p›
->
idx∂us1_by_fd
[
pfd
->
fd
] =
i
+1);

130 
	}
}

132 
	#pﬁl_check_ok
(
p›
)

	)

136 
	$pﬁl_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

138 
ªs
, 
i
, 
j
, 
m£c
 = -1, 
nfds
;

139 
pﬁl›
 *
p›
 = 
¨g
;

141 
	`pﬁl_check_ok
(
p›
);

143 i‡(
tv
 !
NULL
)

144 
m£c
 = 
tv
->
tv_£c
 * 1000 + (tv->
tv_u£c
 + 999) / 1000;

146 
nfds
 = 
p›
->nfds;

147 
ªs
 = 
	`pﬁl
(
p›
->
evít_£t
, 
nfds
, 
m£c
);

149 i‡(
ªs
 == -1) {

150 i‡(
î∫o
 !
EINTR
) {

151 
	`evít_w¨n
("poll");

155 
	`evsig«l_¥o˚ss
(
ba£
);

157 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

158 
	`evsig«l_¥o˚ss
(
ba£
);

161 
	`evít_debug
(("%s:Öﬁ»ªp‹t†%d", 
__func__
, 
ªs
));

163 i‡(
ªs
 =0 || 
nfds
 == 0)

166 
i
 = 
	`øndom
(Ë% 
nfds
;

167 
j
 = 0; j < 
nfds
; j++) {

168 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

169 
wh©
;

170 i‡(++
i
 =
nfds
)

171 
i
 = 0;

172 
wh©
 = 
p›
->
evít_£t
[
i
].
ªvíts
;

174 i‡(!
wh©
)

177 
ªs
 = 0;

180 i‡(
wh©
 & (
POLLHUP
|
POLLERR
))

181 
wh©
 |
POLLIN
|
POLLOUT
;

182 i‡(
wh©
 & 
POLLIN
) {

183 
ªs
 |
EV_READ
;

184 
r_ev
 = 
p›
->
evít_r_back
[
i
];

186 i‡(
wh©
 & 
POLLOUT
) {

187 
ªs
 |
EV_WRITE
;

188 
w_ev
 = 
p›
->
evít_w_back
[
i
];

190 i‡(
ªs
 == 0)

193 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

194 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

196 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

197 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

202 
	}
}

205 
	$pﬁl_add
(*
¨g
, 
evít
 *
ev
)

207 
pﬁl›
 *
p›
 = 
¨g
;

208 
pﬁlfd
 *
pfd
 = 
NULL
;

209 
i
;

211 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

212  (
	`evsig«l_add
(
ev
));

213 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

216 
	`pﬁl_check_ok
(
p›
);

217 i‡(
p›
->
nfds
 + 1 >p›->
evít_cou¡
) {

218 
pﬁlfd
 *
tmp_evít_£t
;

219 
evít
 **
tmp_evít_r_back
;

220 
evít
 **
tmp_evít_w_back
;

221 
tmp_evít_cou¡
;

223 i‡(
p›
->
evít_cou¡
 < 32)

224 
tmp_evít_cou¡
 = 32;

226 
tmp_evít_cou¡
 = 
p›
->
evít_cou¡
 * 2;

229 
tmp_evít_£t
 = 
	`ªÆloc
(
p›
->
evít_£t
,

230 
tmp_evít_cou¡
 * (
pﬁlfd
));

231 i‡(
tmp_evít_£t
 =
NULL
) {

232 
	`evít_w¨n
("realloc");

235 
p›
->
evít_£t
 = 
tmp_evít_£t
;

237 
tmp_evít_r_back
 = 
	`ªÆloc
(
p›
->
evít_r_back
,

238 
tmp_evít_cou¡
 * (
evít
 *));

239 i‡(
tmp_evít_r_back
 =
NULL
) {

241 
	`evít_w¨n
("realloc");

244 
p›
->
evít_r_back
 = 
tmp_evít_r_back
;

246 
tmp_evít_w_back
 = 
	`ªÆloc
(
p›
->
evít_w_back
,

247 
tmp_evít_cou¡
 * (
evít
 *));

248 i‡(
tmp_evít_w_back
 =
NULL
) {

251 
	`evít_w¨n
("realloc");

254 
p›
->
evít_w_back
 = 
tmp_evít_w_back
;

256 
p›
->
evít_cou¡
 = 
tmp_evít_cou¡
;

258 i‡(
ev
->
ev_fd
 >
p›
->
fd_cou¡
) {

259 *
tmp_idx∂us1_by_fd
;

260 
√w_cou¡
;

261 i‡(
p›
->
fd_cou¡
 < 32)

262 
√w_cou¡
 = 32;

264 
√w_cou¡
 = 
p›
->
fd_cou¡
 * 2;

265 
√w_cou¡
 <
ev
->
ev_fd
)

266 
√w_cou¡
 *= 2;

267 
tmp_idx∂us1_by_fd
 =

268 
	`ªÆloc
(
p›
->
idx∂us1_by_fd
, 
√w_cou¡
 * ());

269 i‡(
tmp_idx∂us1_by_fd
 =
NULL
) {

270 
	`evít_w¨n
("realloc");

273 
p›
->
idx∂us1_by_fd
 = 
tmp_idx∂us1_by_fd
;

274 
	`mem£t
(
p›
->
idx∂us1_by_fd
 +Ö›->
fd_cou¡
,

275 0, ()*(
√w_cou¡
 - 
p›
->
fd_cou¡
));

276 
p›
->
fd_cou¡
 = 
√w_cou¡
;

279 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

280 i‡(
i
 >= 0) {

281 
pfd
 = &
p›
->
evít_£t
[
i
];

283 
i
 = 
p›
->
nfds
++;

284 
pfd
 = &
p›
->
evít_£t
[
i
];

285 
pfd
->
evíts
 = 0;

286 
pfd
->
fd
 = 
ev
->
ev_fd
;

287 
p›
->
evít_w_back
[
i
] =Ö›->
evít_r_back
[i] = 
NULL
;

288 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 
i
 + 1;

291 
pfd
->
ªvíts
 = 0;

292 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

293 
pfd
->
evíts
 |
POLLOUT
;

294 
p›
->
evít_w_back
[
i
] = 
ev
;

296 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

297 
pfd
->
evíts
 |
POLLIN
;

298 
p›
->
evít_r_back
[
i
] = 
ev
;

300 
	`pﬁl_check_ok
(
p›
);

303 
	}
}

310 
	$pﬁl_dñ
(*
¨g
, 
evít
 *
ev
)

312 
pﬁl›
 *
p›
 = 
¨g
;

313 
pﬁlfd
 *
pfd
 = 
NULL
;

314 
i
;

316 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

317  (
	`evsig«l_dñ
(
ev
));

319 i‡(!(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
)))

322 
	`pﬁl_check_ok
(
p›
);

323 
i
 = 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] - 1;

324 i‡(
i
 < 0)

328 
pfd
 = &
p›
->
evít_£t
[
i
];

329 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

330 
pfd
->
evíts
 &~
POLLIN
;

331 
p›
->
evít_r_back
[
i
] = 
NULL
;

333 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

334 
pfd
->
evíts
 &~
POLLOUT
;

335 
p›
->
evít_w_back
[
i
] = 
NULL
;

337 
	`pﬁl_check_ok
(
p›
);

338 i‡(
pfd
->
evíts
)

343 
p›
->
idx∂us1_by_fd
[
ev
->
ev_fd
] = 0;

345 --
p›
->
nfds
;

346 i‡(
i
 !
p›
->
nfds
) {

351 
	`mem˝y
(&
p›
->
evít_£t
[
i
], &p›->evít_£t[p›->
nfds
],

352 (
pﬁlfd
));

353 
p›
->
evít_r_back
[
i
] =Ö›->evít_r_back[p›->
nfds
];

354 
p›
->
evít_w_back
[
i
] =Ö›->evít_w_back[p›->
nfds
];

355 
p›
->
idx∂us1_by_fd
[p›->
evít_£t
[
i
].
fd
] = i + 1;

358 
	`pﬁl_check_ok
(
p›
);

360 
	}
}

363 
	$pﬁl_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

365 
pﬁl›
 *
p›
 = 
¨g
;

367 
	`evsig«l_dóŒoc
(
ba£
);

368 i‡(
p›
->
evít_£t
)

369 
	`‰ì
(
p›
->
evít_£t
);

370 i‡(
p›
->
evít_r_back
)

371 
	`‰ì
(
p›
->
evít_r_back
);

372 i‡(
p›
->
evít_w_back
)

373 
	`‰ì
(
p›
->
evít_w_back
);

374 i‡(
p›
->
idx∂us1_by_fd
)

375 
	`‰ì
(
p›
->
idx∂us1_by_fd
);

377 
	`mem£t
(
p›
, 0, (
pﬁl›
));

378 
	`‰ì
(
p›
);

379 
	}
}

	@sample/event-test.c

6 #ifde‡
HAVE_CONFIG_H


7 
	~"c⁄fig.h
"

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 #i‚de‡
WIN32


13 
	~<sys/queue.h
>

14 
	~<uni°d.h
>

15 
	~<sys/time.h
>

17 
	~<wödows.h
>

19 
	~<f˙é.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

25 
	~<evít.h
>

28 
	$fifo_ªad
(
fd
, 
evít
, *
¨g
)

30 
buf
[255];

31 
Àn
;

32 
evít
 *
ev
 = 
¨g
;

33 #ifde‡
WIN32


34 
DWORD
 
dwByãsRód
;

38 
	`evít_add
(
ev
, 
NULL
);

40 
	`Ârötf
(
°dîr
, "fifo_read called with fd: %d,Évent: %d,árg: %p\n",

41 
fd
, 
evít
, 
¨g
);

42 #ifde‡
WIN32


43 
Àn
 = 
	`RódFûe
((
HANDLE
)
fd
, 
buf
, (bufË- 1, &
dwByãsRód
, 
NULL
);

46 if(
Àn
 && 
dwByãsRód
 == 0) {

47 
	`Ârötf
(
°dîr
, "End Of File");

48 
	`evít_dñ
(
ev
);

52 
buf
[
dwByãsRód
] = '\0';

54 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

56 i‡(
Àn
 == -1) {

57 
	`≥º‹
("read");

59 } i‡(
Àn
 == 0) {

60 
	`Ârötf
(
°dîr
, "Connection closed\n");

64 
buf
[
Àn
] = '\0';

66 
	`Ârötf
(
°dout
, "Ród: %s\n", 
buf
);

67 
	}
}

70 
	$maö
 (
¨gc
, **
¨gv
)

72 
evít
 
evfifo
;

73 #ifde‡
WIN32


74 
HANDLE
 
sockë
;

76 
sockë
 = 
	`Cª©eFûe
("test.txt",

77 
GENERIC_READ
,

79 
NULL
,

80 
OPEN_EXISTING
,

81 
FILE_ATTRIBUTE_NORMAL
,

82 
NULL
);

84 if(
sockë
 =
INVALID_HANDLE_VALUE
)

88 
°©
 
°
;

89 c⁄° *
fifo
 = "event.fifo";

90 
sockë
;

92 i‡(
	`l°©
 (
fifo
, &
°
) == 0) {

93 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

94 
î∫o
 = 
EEXIST
;

95 
	`≥º‹
("lstat");

96 
	`exô
 (1);

100 
	`u∆ök
 (
fifo
);

101 i‡(
	`mkfifo
 (
fifo
, 0600) == -1) {

102 
	`≥º‹
("mkfifo");

103 
	`exô
 (1);

107 #ifde‡
__löux


108 
sockë
 = 
	`›í
 (
fifo
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

110 
sockë
 = 
	`›í
 (
fifo
, 
O_RDONLY
 | 
O_NONBLOCK
, 0);

113 i‡(
sockë
 == -1) {

114 
	`≥º‹
("open");

115 
	`exô
 (1);

118 
	`Ârötf
(
°dîr
, "Wrôêd©®tÿ%s\n", 
fifo
);

121 
	`evít_öô
();

124 #ifde‡
WIN32


125 
	`evít_£t
(&
evfifo
, ()
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

127 
	`evít_£t
(&
evfifo
, 
sockë
, 
EV_READ
, 
fifo_ªad
, &evfifo);

131 
	`evít_add
(&
evfifo
, 
NULL
);

133 
	`evít_di•©ch
();

134 #ifde‡
WIN32


135 
	`Clo£H™dÀ
(
sockë
);

138 
	}
}

	@sample/signal-test.c

7 
	~<sys/ty≥s.h
>

9 #ifde‡
HAVE_CONFIG_H


10 
	~"c⁄fig.h
"

13 
	~<sys/°©.h
>

14 #i‚de‡
WIN32


15 
	~<sys/queue.h
>

16 
	~<uni°d.h
>

17 
	~<sys/time.h
>

19 
	~<wödows.h
>

21 
	~<sig«l.h
>

22 
	~<f˙é.h
>

23 
	~<°dlib.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 
	~<evít.h
>

30 
	gˇŒed
 = 0;

33 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

35 
evít
 *
sig«l
 = 
¨g
;

37 
	`¥ötf
("%s: gŸ sig«»%d\n", 
__func__
, 
	`EVENT_SIGNAL
(
sig«l
));

39 i‡(
ˇŒed
 >= 2)

40 
	`evít_dñ
(
sig«l
);

42 
ˇŒed
++;

43 
	}
}

46 
	$maö
 (
¨gc
, **
¨gv
)

48 
evít
 
sig«l_öt
;

51 
	`evít_öô
();

54 
	`evít_£t
(&
sig«l_öt
, 
SIGINT
, 
EV_SIGNAL
|
EV_PERSIST
, 
sig«l_cb
,

55 &
sig«l_öt
);

57 
	`evít_add
(&
sig«l_öt
, 
NULL
);

59 
	`evít_di•©ch
();

62 
	}
}

	@sample/time-test.c

6 
	~<sys/ty≥s.h
>

8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 
	~<sys/°©.h
>

13 #i‚de‡
WIN32


14 
	~<sys/queue.h
>

15 
	~<uni°d.h
>

17 
	~<time.h
>

18 #ifde‡
HAVE_SYS_TIME_H


19 
	~<sys/time.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

28 
	~<evutû.h
>

30 
	gœ°time
;

33 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

35 
timevÆ
 
tv
;

36 
evít
 *
timeout
 = 
¨g
;

37 
√wtime
 = 
	`time
(
NULL
);

39 
	`¥ötf
("%s: cÆÀdáà%d: %d\n", 
__func__
, 
√wtime
,

40 
√wtime
 - 
œ°time
);

41 
œ°time
 = 
√wtime
;

43 
	`evutû_timî˛ór
(&
tv
);

44 
tv
.
tv_£c
 = 2;

45 
	`evít_add
(
timeout
, &
tv
);

46 
	}
}

49 
	$maö
 (
¨gc
, **
¨gv
)

51 
evít
 
timeout
;

52 
timevÆ
 
tv
;

55 
	`evít_öô
();

58 
	`evtimî_£t
(&
timeout
, 
timeout_cb
, &timeout);

60 
	`evutû_timî˛ór
(&
tv
);

61 
tv
.
tv_£c
 = 2;

62 
	`evít_add
(&
timeout
, &
tv
);

64 
œ°time
 = 
	`time
(
NULL
);

66 
	`evít_di•©ch
();

69 
	}
}

	@select.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 
	~<sys/ty≥s.h
>

34 #ifde‡
HAVE_SYS_TIME_H


35 
	~<sys/time.h
>

37 
	~<sys/_libevít_time.h
>

39 #ifde‡
HAVE_SYS_SELECT_H


40 
	~<sys/£À˘.h
>

42 
	~<sys/queue.h
>

43 
	~<sig«l.h
>

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

47 
	~<uni°d.h
>

48 
	~<î∫o.h
>

49 #ifde‡
CHECK_INVARIANTS


50 
	~<as£π.h
>

53 
	~"evít.h
"

54 
	~"evutû.h
"

55 
	~"evít-öã∫Æ.h
"

56 
	~"evsig«l.h
"

57 
	~"log.h
"

59 #i‚de‡
howm™y


60 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

63 #i‚de‡
_EVENT_HAVE_FD_MASK


65 #unde‡
NFDBITS


66 
	#NFDBITS
 (()*8)

	)

67 
	tfd_mask
;

70 
	s£À˘›
 {

71 
	mevít_fds
;

72 
	mevít_fdsz
;

73 
fd_£t
 *
	mevít_ªad£t_ö
;

74 
fd_£t
 *
	mevít_wrôe£t_ö
;

75 
fd_£t
 *
	mevít_ªad£t_out
;

76 
fd_£t
 *
	mevít_wrôe£t_out
;

77 
evít
 **
	mevít_r_by_fd
;

78 
evít
 **
	mevít_w_by_fd
;

81 *
£À˘_öô
 (
evít_ba£
 *);

82 
£À˘_add
 (*, 
evít
 *);

83 
£À˘_dñ
 (*, 
evít
 *);

84 
£À˘_di•©ch
 (
evít_ba£
 *, *, 
timevÆ
 *);

85 
£À˘_dóŒoc
 (
evít_ba£
 *, *);

87 c⁄° 
evít›
 
	g£À˘›s
 = {

89 
£À˘_öô
,

90 
£À˘_add
,

91 
£À˘_dñ
,

92 
£À˘_di•©ch
,

93 
£À˘_dóŒoc
,

97 
£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
);

100 
	$£À˘_öô
(
evít_ba£
 *
ba£
)

102 
£À˘›
 *
s›
;

105 i‡(
	`evutû_gëív
("EVENT_NOSELECT"))

106  (
NULL
);

108 i‡(!(
s›
 = 
	`ˇŒoc
(1, (
£À˘›
))))

109  (
NULL
);

111 
	`£À˘_ªsize
(
s›
, 
	`howm™y
(32 + 1, 
NFDBITS
)*(
fd_mask
));

113 
	`evsig«l_öô
(
ba£
);

115  (
s›
);

116 
	}
}

118 #ifde‡
CHECK_INVARIANTS


120 
	$check_£À˘›
(
£À˘›
 *
s›
)

122 
i
;

123 
i
 = 0; i <
s›
->
evít_fds
; ++i) {

124 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_ö
)) {

125 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]);

126 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_evíts
 & 
EV_READ
);

127 
	`as£π
(
s›
->
evít_r_by_fd
[
i
]->
ev_fd
 == i);

129 
	`as£π
(! 
s›
->
evít_r_by_fd
[
i
]);

131 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_ö
)) {

132 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]);

133 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_evíts
 & 
EV_WRITE
);

134 
	`as£π
(
s›
->
evít_w_by_fd
[
i
]->
ev_fd
 == i);

136 
	`as£π
(! 
s›
->
evít_w_by_fd
[
i
]);

140 
	}
}

142 
	#check_£À˘›
(
s›
Ëdÿ{ (Ës›; } 0)

	)

146 
	$£À˘_di•©ch
(
evít_ba£
 *
ba£
, *
¨g
, 
timevÆ
 *
tv
)

148 
ªs
, 
i
, 
j
;

149 
£À˘›
 *
s›
 = 
¨g
;

151 
	`check_£À˘›
(
s›
);

153 
	`mem˝y
(
s›
->
evít_ªad£t_out
, s›->
evít_ªad£t_ö
,

154 
s›
->
evít_fdsz
);

155 
	`mem˝y
(
s›
->
evít_wrôe£t_out
, s›->
evít_wrôe£t_ö
,

156 
s›
->
evít_fdsz
);

158 
ªs
 = 
	`£À˘
(
s›
->
evít_fds
 + 1, s›->
evít_ªad£t_out
,

159 
s›
->
evít_wrôe£t_out
, 
NULL
, 
tv
);

161 
	`check_£À˘›
(
s›
);

163 i‡(
ªs
 == -1) {

164 i‡(
î∫o
 !
EINTR
) {

165 
	`evít_w¨n
("select");

169 
	`evsig«l_¥o˚ss
(
ba£
);

171 } i‡(
ba£
->
sig
.
evsig«l_ˇught
) {

172 
	`evsig«l_¥o˚ss
(
ba£
);

175 
	`evít_debug
(("%s: sñe˘Ñï‹t†%d", 
__func__
, 
ªs
));

177 
	`check_£À˘›
(
s›
);

178 
i
 = 
	`øndom
(Ë% (
s›
->
evít_fds
+1);

179 
j
 = 0; j <
s›
->
evít_fds
; ++j) {

180 
evít
 *
r_ev
 = 
NULL
, *
w_ev
 = NULL;

181 i‡(++
i
 >
s›
->
evít_fds
+1)

182 
i
 = 0;

184 
ªs
 = 0;

185 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_ªad£t_out
)) {

186 
r_ev
 = 
s›
->
evít_r_by_fd
[
i
];

187 
ªs
 |
EV_READ
;

189 i‡(
	`FD_ISSET
(
i
, 
s›
->
evít_wrôe£t_out
)) {

190 
w_ev
 = 
s›
->
evít_w_by_fd
[
i
];

191 
ªs
 |
EV_WRITE
;

193 i‡(
r_ev
 && (
ªs
 &Ñ_ev->
ev_evíts
)) {

194 
	`evít_a˘ive
(
r_ev
, 
ªs
 &Ñ_ev->
ev_evíts
, 1);

196 i‡(
w_ev
 && w_ev !
r_ev
 && (
ªs
 & w_ev->
ev_evíts
)) {

197 
	`evít_a˘ive
(
w_ev
, 
ªs
 & w_ev->
ev_evíts
, 1);

200 
	`check_£À˘›
(
s›
);

203 
	}
}

207 
	$£À˘_ªsize
(
£À˘›
 *
s›
, 
fdsz
)

209 
n_evíts
, 
n_evíts_ﬁd
;

211 
fd_£t
 *
ªad£t_ö
 = 
NULL
;

212 
fd_£t
 *
wrôe£t_ö
 = 
NULL
;

213 
fd_£t
 *
ªad£t_out
 = 
NULL
;

214 
fd_£t
 *
wrôe£t_out
 = 
NULL
;

215 
evít
 **
r_by_fd
 = 
NULL
;

216 
evít
 **
w_by_fd
 = 
NULL
;

218 
n_evíts
 = (
fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

219 
n_evíts_ﬁd
 = (
s›
->
evít_fdsz
/(
fd_mask
)Ë* 
NFDBITS
;

221 i‡(
s›
->
evít_ªad£t_ö
)

222 
	`check_£À˘›
(
s›
);

224 i‡((
ªad£t_ö
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_ö
, 
fdsz
)Ë=
NULL
)

225 
îr‹
;

226 
s›
->
evít_ªad£t_ö
 = 
ªad£t_ö
;

227 i‡((
ªad£t_out
 = 
	`ªÆloc
(
s›
->
evít_ªad£t_out
, 
fdsz
)Ë=
NULL
)

228 
îr‹
;

229 
s›
->
evít_ªad£t_out
 = 
ªad£t_out
;

230 i‡((
wrôe£t_ö
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_ö
, 
fdsz
)Ë=
NULL
)

231 
îr‹
;

232 
s›
->
evít_wrôe£t_ö
 = 
wrôe£t_ö
;

233 i‡((
wrôe£t_out
 = 
	`ªÆloc
(
s›
->
evít_wrôe£t_out
, 
fdsz
)Ë=
NULL
)

234 
îr‹
;

235 
s›
->
evít_wrôe£t_out
 = 
wrôe£t_out
;

236 i‡((
r_by_fd
 = 
	`ªÆloc
(
s›
->
evít_r_by_fd
,

237 
n_evíts
*(
evít
*))Ë=
NULL
)

238 
îr‹
;

239 
s›
->
evít_r_by_fd
 = 
r_by_fd
;

240 i‡((
w_by_fd
 = 
	`ªÆloc
(
s›
->
evít_w_by_fd
,

241 
n_evíts
 * (
evít
*))Ë=
NULL
)

242 
îr‹
;

243 
s›
->
evít_w_by_fd
 = 
w_by_fd
;

245 
	`mem£t
((*)
s›
->
evít_ªad£t_ö
 + s›->
evít_fdsz
, 0,

246 
fdsz
 - 
s›
->
evít_fdsz
);

247 
	`mem£t
((*)
s›
->
evít_wrôe£t_ö
 + s›->
evít_fdsz
, 0,

248 
fdsz
 - 
s›
->
evít_fdsz
);

249 
	`mem£t
(
s›
->
evít_r_by_fd
 + 
n_evíts_ﬁd
, 0,

250 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

251 
	`mem£t
(
s›
->
evít_w_by_fd
 + 
n_evíts_ﬁd
, 0,

252 (
n_evíts
-
n_evíts_ﬁd
Ë* (
evít
*));

254 
s›
->
evít_fdsz
 = 
fdsz
;

255 
	`check_£À˘›
(
s›
);

259 
îr‹
:

260 
	`evít_w¨n
("malloc");

262 
	}
}

266 
	$£À˘_add
(*
¨g
, 
evít
 *
ev
)

268 
£À˘›
 *
s›
 = 
¨g
;

270 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

271  (
	`evsig«l_add
(
ev
));

273 
	`check_£À˘›
(
s›
);

278 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

279 
fdsz
 = 
s›
->
evít_fdsz
;

281 i‡(
fdsz
 < (
fd_mask
))

282 
fdsz
 = (
fd_mask
);

284 
fdsz
 <

285 (
	`howm™y
(
ev
->
ev_fd
 + 1, 
NFDBITS
Ë* (
fd_mask
)))

286 
fdsz
 *= 2;

288 i‡(
fdsz
 !
s›
->
evít_fdsz
) {

289 i‡(
	`£À˘_ªsize
(
s›
, 
fdsz
)) {

290 
	`check_£À˘›
(
s›
);

295 
s›
->
evít_fds
 = 
ev
->
ev_fd
;

298 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

299 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

300 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] =Év;

302 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

303 
	`FD_SET
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

304 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] =Év;

306 
	`check_£À˘›
(
s›
);

309 
	}
}

316 
	$£À˘_dñ
(*
¨g
, 
evít
 *
ev
)

318 
£À˘›
 *
s›
 = 
¨g
;

320 
	`check_£À˘›
(
s›
);

321 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

322  (
	`evsig«l_dñ
(
ev
));

324 i‡(
s›
->
evít_fds
 < 
ev
->
ev_fd
) {

325 
	`check_£À˘›
(
s›
);

329 i‡(
ev
->
ev_evíts
 & 
EV_READ
) {

330 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_ªad£t_ö
);

331 
s›
->
evít_r_by_fd
[
ev
->
ev_fd
] = 
NULL
;

334 i‡(
ev
->
ev_evíts
 & 
EV_WRITE
) {

335 
	`FD_CLR
(
ev
->
ev_fd
, 
s›
->
evít_wrôe£t_ö
);

336 
s›
->
evít_w_by_fd
[
ev
->
ev_fd
] = 
NULL
;

339 
	`check_£À˘›
(
s›
);

341 
	}
}

344 
	$£À˘_dóŒoc
(
evít_ba£
 *
ba£
, *
¨g
)

346 
£À˘›
 *
s›
 = 
¨g
;

348 
	`evsig«l_dóŒoc
(
ba£
);

349 i‡(
s›
->
evít_ªad£t_ö
)

350 
	`‰ì
(
s›
->
evít_ªad£t_ö
);

351 i‡(
s›
->
evít_wrôe£t_ö
)

352 
	`‰ì
(
s›
->
evít_wrôe£t_ö
);

353 i‡(
s›
->
evít_ªad£t_out
)

354 
	`‰ì
(
s›
->
evít_ªad£t_out
);

355 i‡(
s›
->
evít_wrôe£t_out
)

356 
	`‰ì
(
s›
->
evít_wrôe£t_out
);

357 i‡(
s›
->
evít_r_by_fd
)

358 
	`‰ì
(
s›
->
evít_r_by_fd
);

359 i‡(
s›
->
evít_w_by_fd
)

360 
	`‰ì
(
s›
->
evít_w_by_fd
);

362 
	`mem£t
(
s›
, 0, (
£À˘›
));

363 
	`‰ì
(
s›
);

364 
	}
}

	@signal.c

29 #ifde‡
HAVE_CONFIG_H


30 
	~"c⁄fig.h
"

33 #ifde‡
WIN32


34 
	#WIN32_LEAN_AND_MEAN


	)

35 
	~<wösock2.h
>

36 
	~<wödows.h
>

37 #unde‡
WIN32_LEAN_AND_MEAN


39 
	~<sys/ty≥s.h
>

40 #ifde‡
HAVE_SYS_TIME_H


41 
	~<sys/time.h
>

43 
	~<sys/queue.h
>

44 #ifde‡
HAVE_SYS_SOCKET_H


45 
	~<sys/sockë.h
>

47 
	~<sig«l.h
>

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 #ifde‡
HAVE_UNISTD_H


52 
	~<uni°d.h
>

54 
	~<î∫o.h
>

55 #ifde‡
HAVE_FCNTL_H


56 
	~<f˙é.h
>

58 
	~<as£π.h
>

60 
	~"evít.h
"

61 
	~"evít-öã∫Æ.h
"

62 
	~"evsig«l.h
"

63 
	~"evutû.h
"

64 
	~"log.h
"

66 
evít_ba£
 *
	gevsig«l_ba£
 = 
NULL
;

68 
evsig«l_h™dÀr
(
sig
);

72 
	$evsig«l_cb
(
fd
, 
wh©
, *
¨g
)

74 
sig«ls
[1];

75 #ifde‡
WIN32


76 
SSIZE_T
 
n
;

78 
ssize_t
 
n
;

81 
n
 = 
	`ªcv
(
fd
, 
sig«ls
, (signals), 0);

82 i‡(
n
 == -1)

83 
	`evít_îr
(1, "%s:Ñód", 
__func__
);

84 
	}
}

86 #ifde‡
HAVE_SETFD


87 
	#FD_CLOSEONEXEC
(
x
) do { \

88 i‡(
	`f˙é
(
x
, 
F_SETFD
, 1) == -1) \

89 
	`evít_w¨n
("f˙é(%d, F_SETFD)", 
x
); \

90 } 0)

	)

92 
	#FD_CLOSEONEXEC
(
x
)

	)

96 
	$evsig«l_öô
(
evít_ba£
 *
ba£
)

98 
i
;

105 i‡(
	`evutû_sockë∑ú
(

106 
AF_UNIX
, 
SOCK_STREAM
, 0, 
ba£
->
sig
.
ev_sig«l_∑ú
) == -1) {

107 #ifde‡
WIN32


110 
	`evít_w¨n
("%s: sockë∑ú", 
__func__
);

112 
	`evít_îr
(1, "%s: sockë∑ú", 
__func__
);

117 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

118 
	`FD_CLOSEONEXEC
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

119 
ba£
->
sig
.
sh_ﬁd
 = 
NULL
;

120 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

121 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

122 
	`mem£t
(&
ba£
->
sig
.
evsigˇught
, 0, (
sig_©omic_t
)*
NSIG
);

124 
i
 = 0; i < 
NSIG
; ++i)

125 
	`TAILQ_INIT
(&
ba£
->
sig
.
evsigevíts
[
i
]);

127 
	`evutû_make_sockë_n⁄blockög
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

129 
	`evít_£t
(&
ba£
->
sig
.
ev_sig«l
, ba£->sig.
ev_sig«l_∑ú
[1],

130 
EV_READ
 | 
EV_PERSIST
, 
evsig«l_cb
, &
ba£
->
sig
.
ev_sig«l
);

131 
ba£
->
sig
.
ev_sig«l
.
ev_ba£
 = base;

132 
ba£
->
sig
.
ev_sig«l
.
ev_Êags
 |
EVLIST_INTERNAL
;

135 
	}
}

140 
_evsig«l_£t_h™dÀr
(
evít_ba£
 *
ba£
,

141 
evsig«l
, (*
h™dÀr
)())

143 #ifde‡
HAVE_SIGACTION


144 
siga˘i⁄
 
ß
;

146 
ev_sigh™dÀr_t
 
sh
;

148 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

149 *
p
;

155 i‡(
evsig«l
 >
sig
->
sh_ﬁd_max
) {

156 
√w_max
 = 
evsig«l
 + 1;

157 
	`evít_debug
(("%s:Évsignal (%d) >= sh_old_max (%d),Ñesizing",

158 
__func__
, 
evsig«l
, 
sig
->
sh_ﬁd_max
));

159 
p
 = 
	`ªÆloc
(
sig
->
sh_ﬁd
, 
√w_max
 * (*sig->sh_old));

160 i‡(
p
 =
NULL
) {

161 
	`evít_w¨n
("realloc");

165 
	`mem£t
((*)
p
 + 
sig
->
sh_ﬁd_max
 * (*sig->
sh_ﬁd
),

166 0, (
√w_max
 - 
sig
->
sh_ﬁd_max
Ë* (*sig->
sh_ﬁd
));

168 
sig
->
sh_ﬁd_max
 = 
√w_max
;

169 
sig
->
sh_ﬁd
 = 
p
;

173 
sig
->
sh_ﬁd
[
evsig«l
] = 
	`mÆloc
( *sig->sh_old[evsignal]);

174 i‡(
sig
->
sh_ﬁd
[
evsig«l
] =
NULL
) {

175 
	`evít_w¨n
("malloc");

180 #ifde‡
HAVE_SIGACTION


181 
	`mem£t
(&
ß
, 0, (sa));

182 
ß
.
ß_h™dÀr
 = 
h™dÀr
;

183 
ß
.
ß_Êags
 |
SA_RESTART
;

184 
	`sigfûl£t
(&
ß
.
ß_mask
);

186 i‡(
	`siga˘i⁄
(
evsig«l
, &
ß
, 
sig
->
sh_ﬁd
[evsignal]) == -1) {

187 
	`evít_w¨n
("sigaction");

188 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

192 i‡((
sh
 = 
	`sig«l
(
evsig«l
, 
h™dÀr
)Ë=
SIG_ERR
) {

193 
	`evít_w¨n
("signal");

194 
	`‰ì
(
sig
->
sh_ﬁd
[
evsig«l
]);

197 *
sig
->
sh_ﬁd
[
evsig«l
] = 
sh
;

201 
	}
}

204 
	$evsig«l_add
(
evít
 *
ev
)

206 
evsig«l
;

207 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

208 
evsig«l_öfo
 *
sig
 = &
ev
->
ev_ba£
->sig;

210 i‡(
ev
->
ev_evíts
 & (
EV_READ
|
EV_WRITE
))

211 
	`evít_îrx
(1, "%s: EV_SIGNAL incom∑tibÀ u£", 
__func__
);

212 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

213 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

214 i‡(
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
])) {

215 
	`evít_debug
(("%s: %p: ch™gög sig«»h™dÀr", 
__func__
, 
ev
));

216 i‡(
	`_evsig«l_£t_h™dÀr
(

217 
ba£
, 
evsig«l
, 
evsig«l_h™dÀr
) == -1)

221 
evsig«l_ba£
 = 
ba£
;

223 i‡(!
sig
->
ev_sig«l_added
) {

224 i‡(
	`evít_add
(&
sig
->
ev_sig«l
, 
NULL
))

226 
sig
->
ev_sig«l_added
 = 1;

231 
	`TAILQ_INSERT_TAIL
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

234 
	}
}

237 
	$_evsig«l_ª°‹e_h™dÀr
(
evít_ba£
 *
ba£
, 
evsig«l
)

239 
ªt
 = 0;

240 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

241 #ifde‡
HAVE_SIGACTION


242 
siga˘i⁄
 *
sh
;

244 
ev_sigh™dÀr_t
 *
sh
;

248 
sh
 = 
sig
->
sh_ﬁd
[
evsig«l
];

249 
sig
->
sh_ﬁd
[
evsig«l
] = 
NULL
;

250 #ifde‡
HAVE_SIGACTION


251 i‡(
	`siga˘i⁄
(
evsig«l
, 
sh
, 
NULL
) == -1) {

252 
	`evít_w¨n
("sigaction");

253 
ªt
 = -1;

256 i‡(
	`sig«l
(
evsig«l
, *
sh
Ë=
SIG_ERR
) {

257 
	`evít_w¨n
("signal");

258 
ªt
 = -1;

261 
	`‰ì
(
sh
);

263  
ªt
;

264 
	}
}

267 
	$evsig«l_dñ
(
evít
 *
ev
)

269 
evít_ba£
 *
ba£
 = 
ev
->
ev_ba£
;

270 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

271 
evsig«l
 = 
	`EVENT_SIGNAL
(
ev
);

273 
	`as£π
(
evsig«l
 >0 &&Évsig«»< 
NSIG
);

276 
	`TAILQ_REMOVE
(&
sig
->
evsigevíts
[
evsig«l
], 
ev
, 
ev_sig«l_√xt
);

278 i‡(!
	`TAILQ_EMPTY
(&
sig
->
evsigevíts
[
evsig«l
]))

281 
	`evít_debug
(("%s: %p:Ñe°‹ög sig«»h™dÀr", 
__func__
, 
ev
));

283  (
	`_evsig«l_ª°‹e_h™dÀr
(
ev
->
ev_ba£
, 
	`EVENT_SIGNAL
(ev)));

284 
	}
}

287 
	$evsig«l_h™dÀr
(
sig
)

289 
ßve_î∫o
 = 
î∫o
;

291 i‡(
evsig«l_ba£
 =
NULL
) {

292 
	`evít_w¨n
(

294 
__func__
, 
sig
);

298 
evsig«l_ba£
->
sig
.
evsigˇught
[sig]++;

299 
evsig«l_ba£
->
sig
.
evsig«l_ˇught
 = 1;

301 #i‚de‡
HAVE_SIGACTION


302 
	`sig«l
(
sig
, 
evsig«l_h™dÀr
);

306 
	`£nd
(
evsig«l_ba£
->
sig
.
ev_sig«l_∑ú
[0], "a", 1, 0);

307 
î∫o
 = 
ßve_î∫o
;

308 
	}
}

311 
	$evsig«l_¥o˚ss
(
evít_ba£
 *
ba£
)

313 
evsig«l_öfo
 *
sig
 = &
ba£
->sig;

314 
evít
 *
ev
, *
√xt_ev
;

315 
sig_©omic_t
 
nˇŒs
;

316 
i
;

318 
ba£
->
sig
.
evsig«l_ˇught
 = 0;

319 
i
 = 1; i < 
NSIG
; ++i) {

320 
nˇŒs
 = 
sig
->
evsigˇught
[
i
];

321 i‡(
nˇŒs
 == 0)

323 
sig
->
evsigˇught
[
i
] -
nˇŒs
;

325 
ev
 = 
	`TAILQ_FIRST
(&
sig
->
evsigevíts
[
i
]);

326 
ev
 !
NULL
;Év = 
√xt_ev
) {

327 
√xt_ev
 = 
	`TAILQ_NEXT
(
ev
, 
ev_sig«l_√xt
);

328 i‡(!(
ev
->
ev_evíts
 & 
EV_PERSIST
))

329 
	`evít_dñ
(
ev
);

330 
	`evít_a˘ive
(
ev
, 
EV_SIGNAL
, 
nˇŒs
);

334 
	}
}

337 
	$evsig«l_dóŒoc
(
evít_ba£
 *
ba£
)

339 
i
 = 0;

340 i‡(
ba£
->
sig
.
ev_sig«l_added
) {

341 
	`evít_dñ
(&
ba£
->
sig
.
ev_sig«l
);

342 
ba£
->
sig
.
ev_sig«l_added
 = 0;

344 
i
 = 0; i < 
NSIG
; ++i) {

345 i‡(
i
 < 
ba£
->
sig
.
sh_ﬁd_max
 && ba£->sig.
sh_ﬁd
[i] !
NULL
)

346 
	`_evsig«l_ª°‹e_h™dÀr
(
ba£
, 
i
);

349 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[0]);

350 
ba£
->
sig
.
ev_sig«l_∑ú
[0] = -1;

351 
	`EVUTIL_CLOSESOCKET
(
ba£
->
sig
.
ev_sig«l_∑ú
[1]);

352 
ba£
->
sig
.
ev_sig«l_∑ú
[1] = -1;

353 
ba£
->
sig
.
sh_ﬁd_max
 = 0;

356 
	`‰ì
(
ba£
->
sig
.
sh_ﬁd
);

357 
	}
}

	@strlcpy-internal.h

1 #i‚de‡
_STRLCPY_INTERNAL_H_


2 
	#_STRLCPY_INTERNAL_H_


	)

4 #ifde‡
__˝lu•lus


8 #ifde‡
HAVE_CONFIG_H


9 
	~"c⁄fig.h
"

12 #i‚de‡
HAVE_STRLCPY


13 
	~<°rög.h
>

14 
size_t
 
_evít_°æ˝y
(*
d°
, c⁄° *
§c
, size_à
siz
);

15 
	#°æ˝y
 
_evít_°æ˝y


	)

18 #ifde‡
__˝lu•lus


	@strlcpy.c

30 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

31 *
	grcsid
 = "$OpenBSD: strlcpy.c,v 1.5 2001/05/13 15:40:16 deraadt Exp $";

34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 #i‚de‡
HAVE_STRLCPY


41 
	~"°æ˝y-öã∫Æ.h
"

48 
size_t


49 
	$_evít_°æ˝y
(
d°
, 
§c
, 
siz
)

50 *
d°
;

51 c⁄° *
§c
;

52 
size_t
 
siz
;

54 *
d
 = 
d°
;

55 c⁄° *
s
 = 
§c
;

56 
size_t
 
n
 = 
siz
;

59 i‡(
n
 != 0 && --n != 0) {

61 i‡((*
d
++ = *
s
++) == 0)

63 } --
n
 != 0);

67 i‡(
n
 == 0) {

68 i‡(
siz
 != 0)

69 *
d
 = '\0';

70 *
s
++)

74 (
s
 - 
§c
 - 1);

75 
	}
}

	@test/bench.c

36 #ifde‡
HAVE_CONFIG_H


37 
	~"c⁄fig.h
"

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 
	~<sys/time.h
>

43 #ifde‡
WIN32


44 
	~<wödows.h
>

46 
	~<sys/sockë.h
>

47 
	~<sig«l.h
>

48 
	~<sys/ªsour˚.h
>

50 
	~<f˙é.h
>

51 
	~<°dlib.h
>

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<uni°d.h
>

55 
	~<î∫o.h
>

57 
	~<evít.h
>

58 
	~<evutû.h
>

61 
	gcou¡
, 
	gwrôes
, 
	gfúed
;

62 *
	gpùes
;

63 
	gnum_pùes
, 
	gnum_a˘ive
, 
	gnum_wrôes
;

64 
evít
 *
	gevíts
;

67 
	$ªad_cb
(
fd
, 
which
, *
¨g
)

69 
idx
 = (Ë
¨g
, 
widx
 = idx + 1;

70 
u_ch¨
 
ch
;

72 
cou¡
 +
	`ªad
(
fd
, &
ch
, (ch));

73 i‡(
wrôes
) {

74 i‡(
widx
 >
num_pùes
)

75 
widx
 -
num_pùes
;

76 
	`wrôe
(
pùes
[2 * 
widx
 + 1], "e", 1);

77 
wrôes
--;

78 
fúed
++;

80 
	}
}

82 
timevÆ
 *

83 
	$run_⁄˚
()

85 *
˝
, 
•a˚
;

86 
i
;

87 
timevÆ
 
ts
, 
ã
;

89 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

90 
	`evít_dñ
(&
evíts
[
i
]);

91 
	`evít_£t
(&
evíts
[
i
], 
˝
[0], 
EV_READ
 | 
EV_PERSIST
, 
ªad_cb
, (*) i);

92 
	`evít_add
(&
evíts
[
i
], 
NULL
);

95 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

97 
fúed
 = 0;

98 
•a˚
 = 
num_pùes
 / 
num_a˘ive
;

99 
•a˚
 = space * 2;

100 
i
 = 0; i < 
num_a˘ive
; i++, 
fúed
++)

101 
	`wrôe
(
pùes
[
i
 * 
•a˚
 + 1], "e", 1);

103 
cou¡
 = 0;

104 
wrôes
 = 
num_wrôes
;

105 { 
xcou¡
 = 0;

106 
	`gëtimeofday
(&
ts
, 
NULL
);

108 
	`evít_lo›
(
EVLOOP_ONCE
 | 
EVLOOP_NONBLOCK
);

109 
xcou¡
++;

110 } 
cou¡
 !
fúed
);

111 
	`gëtimeofday
(&
ã
, 
NULL
);

113 i‡(
xcou¡
 !
cou¡
Ë
	`Ârötf
(
°dîr
, "Xcount: %d, Rcount: %d\n", xcount, count);

116 
	`evutû_timîsub
(&
ã
, &
ts
, &te);

118  (&
ã
);

119 
	}
}

122 
	$maö
 (
¨gc
, **
¨gv
)

124 #i‚de‡
WIN32


125 
æimô
 
æ
;

127 
i
, 
c
;

128 
timevÆ
 *
tv
;

129 *
˝
;

131 
num_pùes
 = 100;

132 
num_a˘ive
 = 1;

133 
num_wrôes
 = 
num_pùes
;

134 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "n:a:w:")) != -1) {

135 
c
) {

137 
num_pùes
 = 
	`©oi
(
›èrg
);

140 
num_a˘ive
 = 
	`©oi
(
›èrg
);

143 
num_wrôes
 = 
	`©oi
(
›èrg
);

146 
	`Ârötf
(
°dîr
, "IŒegÆárgumíà\"%c\"\n", 
c
);

147 
	`exô
(1);

151 #i‚de‡
WIN32


152 
æ
.
æim_cur
 =Ñl.
æim_max
 = 
num_pùes
 * 2 + 50;

153 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æ
) == -1) {

154 
	`≥º‹
("setrlimit");

155 
	`exô
(1);

159 
evíts
 = 
	`ˇŒoc
(
num_pùes
, (
evít
));

160 
pùes
 = 
	`ˇŒoc
(
num_pùes
 * 2, ());

161 i‡(
evíts
 =
NULL
 || 
pùes
 == NULL) {

162 
	`≥º‹
("malloc");

163 
	`exô
(1);

166 
	`evít_öô
();

168 
˝
 = 
pùes
, 
i
 = 0; i < 
num_pùes
; i++, cp += 2) {

169 #ifde‡
USE_PIPES


170 i‡(
	`pùe
(
˝
) == -1) {

172 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
˝
) == -1) {

174 
	`≥º‹
("pipe");

175 
	`exô
(1);

179 
i
 = 0; i < 25; i++) {

180 
tv
 = 
	`run_⁄˚
();

181 i‡(
tv
 =
NULL
)

182 
	`exô
(1);

183 
	`Ârötf
(
°dout
, "%ld\n",

184 
tv
->
tv_£c
 * 1000000L +Åv->
tv_u£c
);

187 
	`exô
(0);

188 
	}
}

	@test/regress.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sys/waô.h
>

46 
	~<sig«l.h
>

47 
	~<uni°d.h
>

48 
	~<√tdb.h
>

50 
	~<as£π.h
>

51 
	~<f˙é.h
>

52 
	~<sig«l.h
>

53 
	~<°dlib.h
>

54 
	~<°dio.h
>

55 
	~<°rög.h
>

56 
	~<î∫o.h
>

58 
	~"evít.h
"

59 
	~"evutû.h
"

60 
	~"evít-öã∫Æ.h
"

61 
	~"log.h
"

63 
	~"ªgªss.h
"

64 #i‚de‡
WIN32


65 
	~"ªgªss.gí.h
"

68 
	g∑ú
[2];

69 
	gã°_ok
;

70 
	gˇŒed
;

71 
	gwbuf
[4096];

72 
	grbuf
[4096];

73 
	gwoff
;

74 
	groff
;

75 
	gu£≥rsi°
;

76 
timevÆ
 
	gt£t
;

77 
timevÆ
 
	gtˇŒed
;

78 
evít_ba£
 *
	gglobÆ_ba£
;

80 
	#TEST1
 "thi†i†®ã°"

	)

81 
	#SECONDS
 1

	)

83 #i‚de‡
SHUT_WR


84 
	#SHUT_WR
 1

	)

87 #ifde‡
WIN32


88 
	#wrôe
(
fd
,
buf
,
Àn
Ë
	`£nd
((fd),(buf),÷í),0)

	)

89 
	#ªad
(
fd
,
buf
,
Àn
Ë
	`ªcv
((fd),(buf),÷í),0)

	)

93 
	$sim∂e_ªad_cb
(
fd
, 
evít
, *
¨g
)

95 
buf
[256];

96 
Àn
;

98 i‡(
¨g
 =
NULL
)

101 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

103 i‡(
Àn
) {

104 i‡(!
ˇŒed
) {

105 i‡(
	`evít_add
(
¨g
, 
NULL
) == -1)

106 
	`exô
(1);

108 } i‡(
ˇŒed
 == 1)

109 
ã°_ok
 = 1;

111 
ˇŒed
++;

112 
	}
}

115 
	$sim∂e_wrôe_cb
(
fd
, 
evít
, *
¨g
)

117 
Àn
;

119 i‡(
¨g
 =
NULL
)

122 
Àn
 = 
	`wrôe
(
fd
, 
TEST1
, 
	`°æí
(TEST1) + 1);

123 i‡(
Àn
 == -1)

124 
ã°_ok
 = 0;

126 
ã°_ok
 = 1;

127 
	}
}

130 
	$mu…ùÀ_wrôe_cb
(
fd
, 
evít
, *
¨g
)

132 
evít
 *
ev
 = 
¨g
;

133 
Àn
;

135 
Àn
 = 128;

136 i‡(
woff
 + 
Àn
 >(
wbuf
))

137 
Àn
 = (
wbuf
Ë- 
woff
;

139 
Àn
 = 
	`wrôe
(
fd
, 
wbuf
 + 
woff
,Üen);

140 i‡(
Àn
 == -1) {

141 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

142 i‡(
u£≥rsi°
)

143 
	`evít_dñ
(
ev
);

147 
woff
 +
Àn
;

149 i‡(
woff
 >(
wbuf
)) {

150 
	`shutdown
(
fd
, 
SHUT_WR
);

151 i‡(
u£≥rsi°
)

152 
	`evít_dñ
(
ev
);

156 i‡(!
u£≥rsi°
) {

157 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

158 
	`exô
(1);

160 
	}
}

163 
	$mu…ùÀ_ªad_cb
(
fd
, 
evít
, *
¨g
)

165 
evít
 *
ev
 = 
¨g
;

166 
Àn
;

168 
Àn
 = 
	`ªad
(
fd
, 
rbuf
 + 
roff
, (rbuf) -Ñoff);

169 i‡(
Àn
 == -1)

170 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

171 i‡(
Àn
 <= 0) {

172 i‡(
u£≥rsi°
)

173 
	`evít_dñ
(
ev
);

177 
roff
 +
Àn
;

178 i‡(!
u£≥rsi°
) {

179 i‡(
	`evít_add
(
ev
, 
NULL
) == -1)

180 
	`exô
(1);

182 
	}
}

185 
	$timeout_cb
(
fd
, 
evít
, *
¨g
)

187 
timevÆ
 
tv
;

188 
diff
;

190 
	`evutû_gëtimeofday
(&
tˇŒed
, 
NULL
);

191 i‡(
	`evutû_timîcmp
(&
tˇŒed
, &
t£t
, >))

192 
	`evutû_timîsub
(&
tˇŒed
, &
t£t
, &
tv
);

194 
	`evutû_timîsub
(&
t£t
, &
tˇŒed
, &
tv
);

196 
diff
 = 
tv
.
tv_£c
*1000 +Åv.
tv_u£c
/1000 - 
SECONDS
 * 1000;

197 i‡(
diff
 < 0)

198 
diff
 = -diff;

200 i‡(
diff
 < 100)

201 
ã°_ok
 = 1;

202 
	}
}

204 #i‚de‡
WIN32


206 
	$sig«l_cb_ß
(
sig
)

208 
ã°_ok
 = 2;

209 
	}
}

212 
	$sig«l_cb
(
fd
, 
evít
, *
¨g
)

214 
evít
 *
ev
 = 
¨g
;

216 
	`sig«l_dñ
(
ev
);

217 
ã°_ok
 = 1;

218 
	}
}

221 
	sbŸh
 {

222 
evít
 
	mev
;

223 
	mƒód
;

227 
	$comböed_ªad_cb
(
fd
, 
evít
, *
¨g
)

229 
bŸh
 *bŸh = 
¨g
;

230 
buf
[128];

231 
Àn
;

233 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

234 i‡(
Àn
 == -1)

235 
	`Ârötf
(
°dîr
, "%s:Ñód\n", 
__func__
);

236 i‡(
Àn
 <= 0)

239 
bŸh
->
ƒód
 +
Àn
;

240 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

241 
	`exô
(1);

242 
	}
}

245 
	$comböed_wrôe_cb
(
fd
, 
evít
, *
¨g
)

247 
bŸh
 *bŸh = 
¨g
;

248 
buf
[128];

249 
Àn
;

251 
Àn
 = (
buf
);

252 i‡(
Àn
 > 
bŸh
->
ƒód
)

253 
Àn
 = 
bŸh
->
ƒód
;

255 
Àn
 = 
	`wrôe
(
fd
, 
buf
,Üen);

256 i‡(
Àn
 == -1)

257 
	`Ârötf
(
°dîr
, "%s: wrôe\n", 
__func__
);

258 i‡(
Àn
 <= 0) {

259 
	`shutdown
(
fd
, 
SHUT_WR
);

263 
bŸh
->
ƒód
 -
Àn
;

264 i‡(
	`evít_add
(&
bŸh
->
ev
, 
NULL
) == -1)

265 
	`exô
(1);

266 
	}
}

271 
	$£tup_ã°
(c⁄° *
«me
)

274 
	`Ârötf
(
°dout
, "%s", 
«me
);

276 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1) {

277 
	`Ârötf
(
°dîr
, "%s: sockë∑ú\n", 
__func__
);

278 
	`exô
(1);

281 #ifde‡
HAVE_FCNTL


282 i‡(
	`f˙é
(
∑ú
[0], 
F_SETFL
, 
O_NONBLOCK
) == -1)

283 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

285 i‡(
	`f˙é
(
∑ú
[1], 
F_SETFL
, 
O_NONBLOCK
) == -1)

286 
	`Ârötf
(
°dîr
, "fcntl(O_NONBLOCK)");

289 
ã°_ok
 = 0;

290 
ˇŒed
 = 0;

292 
	}
}

295 
	$˛ónup_ã°
()

297 #i‚de‡
WIN32


298 
	`˛o£
(
∑ú
[0]);

299 
	`˛o£
(
∑ú
[1]);

301 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[0]);

302 
	`Clo£H™dÀ
((
HANDLE
)
∑ú
[1]);

304 i‡(
ã°_ok
)

305 
	`Ârötf
(
°dout
, "OK\n");

307 
	`Ârötf
(
°dout
, "FAILED\n");

308 
	`exô
(1);

310 
ã°_ok
 = 0;

312 
	}
}

315 
	$ã°_ªgi°îfds
()

317 
i
, 
j
;

318 
∑ú
[2];

319 
evít
 
ªad_evs
[512];

320 
evít
 
wrôe_evs
[512];

322 
evít_ba£
 *
ba£
 = 
	`evít_ba£_√w
();

324 
	`Ârötf
(
°dout
, "TestingÑegister fds: ");

326 
i
 = 0; i < 512; ++i) {

327 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1) {

331 
	`evít_£t
(&
ªad_evs
[
i
], 
∑ú
[0],

332 
EV_READ
|
EV_PERSIST
, 
sim∂e_ªad_cb
, 
NULL
);

333 
	`evít_ba£_£t
(
ba£
, &
ªad_evs
[
i
]);

334 
	`evít_add
(&
ªad_evs
[
i
], 
NULL
);

335 
	`evít_£t
(&
wrôe_evs
[
i
], 
∑ú
[1],

336 
EV_WRITE
|
EV_PERSIST
, 
sim∂e_wrôe_cb
, 
NULL
);

337 
	`evít_ba£_£t
(
ba£
, &
wrôe_evs
[
i
]);

338 
	`evít_add
(&
wrôe_evs
[
i
], 
NULL
);

341 
	`evít_ba£_lo›
(
ba£
, 
EVLOOP_ONCE
);

345 
j
 = 0; j < 
i
; ++j) {

346 
	`evít_dñ
(&
ªad_evs
[
j
]);

347 
	`evít_dñ
(&
wrôe_evs
[
j
]);

348 #i‚de‡
WIN32


349 
	`˛o£
(
ªad_evs
[
j
].
ev_fd
);

350 
	`˛o£
(
wrôe_evs
[
j
].
ev_fd
);

352 
	`Clo£H™dÀ
((
HANDLE
)
ªad_evs
[
j
].
ev_fd
);

353 
	`Clo£H™dÀ
((
HANDLE
)
wrôe_evs
[
j
].
ev_fd
);

357 
	`evít_ba£_lo›
(
ba£
, 
EVLOOP_ONCE
);

360 
	`evít_ba£_‰ì
(
ba£
);

362 
	`Ârötf
(
°dout
, "OK\n");

363 
	}
}

366 
	$ã°_sim∂îód
()

368 
evít
 
ev
;

371 
	`£tup_ã°
("SimpleÑead: ");

373 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

374 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

376 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

377 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

378 
	`exô
(1);

379 
	`evít_di•©ch
();

381 
	`˛ónup_ã°
();

382 
	}
}

385 
	$ã°_sim∂ewrôe
()

387 
evít
 
ev
;

390 
	`£tup_ã°
("Simple write: ");

392 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
sim∂e_wrôe_cb
, &ev);

393 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

394 
	`exô
(1);

395 
	`evít_di•©ch
();

397 
	`˛ónup_ã°
();

398 
	}
}

401 
	$ã°_mu…ùÀ
()

403 
evít
 
ev
, 
ev2
;

404 
i
;

407 
	`£tup_ã°
("MultipleÑead/write: ");

408 
	`mem£t
(
rbuf
, 0, (rbuf));

409 
i
 = 0; i < (
wbuf
); i++)

410 
wbuf
[
i
] = i;

412 
roff
 = 
woff
 = 0;

413 
u£≥rsi°
 = 0;

415 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
, 
mu…ùÀ_wrôe_cb
, &ev);

416 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

417 
	`exô
(1);

418 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
, 
mu…ùÀ_ªad_cb
, &ev2);

419 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

420 
	`exô
(1);

421 
	`evít_di•©ch
();

423 i‡(
roff
 =
woff
)

424 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

426 
	`˛ónup_ã°
();

427 
	}
}

430 
	$ã°_≥rsi°ít
()

432 
evít
 
ev
, 
ev2
;

433 
i
;

436 
	`£tup_ã°
("PersistÑead/write: ");

437 
	`mem£t
(
rbuf
, 0, (rbuf));

438 
i
 = 0; i < (
wbuf
); i++)

439 
wbuf
[
i
] = i;

441 
roff
 = 
woff
 = 0;

442 
u£≥rsi°
 = 1;

444 
	`evít_£t
(&
ev
, 
∑ú
[0], 
EV_WRITE
|
EV_PERSIST
, 
mu…ùÀ_wrôe_cb
, &ev);

445 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

446 
	`exô
(1);

447 
	`evít_£t
(&
ev2
, 
∑ú
[1], 
EV_READ
|
EV_PERSIST
, 
mu…ùÀ_ªad_cb
, &ev2);

448 i‡(
	`evít_add
(&
ev2
, 
NULL
) == -1)

449 
	`exô
(1);

450 
	`evít_di•©ch
();

452 i‡(
roff
 =
woff
)

453 
ã°_ok
 = 
	`memcmp
(
rbuf
, 
wbuf
, (wbuf)) == 0;

455 
	`˛ónup_ã°
();

456 
	}
}

459 
	$ã°_comböed
()

461 
bŸh
 
r1
, 
r2
, 
w1
, 
w2
;

463 
	`£tup_ã°
("CombinedÑead/write: ");

464 
	`mem£t
(&
r1
, 0, (r1));

465 
	`mem£t
(&
r2
, 0, (r2));

466 
	`mem£t
(&
w1
, 0, (w1));

467 
	`mem£t
(&
w2
, 0, (w2));

469 
w1
.
ƒód
 = 4096;

470 
w2
.
ƒód
 = 8192;

472 
	`evít_£t
(&
r1
.
ev
, 
∑ú
[0], 
EV_READ
, 
comböed_ªad_cb
, &r1);

473 
	`evít_£t
(&
w1
.
ev
, 
∑ú
[0], 
EV_WRITE
, 
comböed_wrôe_cb
, &w1);

474 
	`evít_£t
(&
r2
.
ev
, 
∑ú
[1], 
EV_READ
, 
comböed_ªad_cb
, &r2);

475 
	`evít_£t
(&
w2
.
ev
, 
∑ú
[1], 
EV_WRITE
, 
comböed_wrôe_cb
, &w2);

476 i‡(
	`evít_add
(&
r1
.
ev
, 
NULL
) == -1)

477 
	`exô
(1);

478 i‡(
	`evít_add
(&
w1
.
ev
, 
NULL
))

479 
	`exô
(1);

480 i‡(
	`evít_add
(&
r2
.
ev
, 
NULL
))

481 
	`exô
(1);

482 i‡(
	`evít_add
(&
w2
.
ev
, 
NULL
))

483 
	`exô
(1);

485 
	`evít_di•©ch
();

487 i‡(
r1
.
ƒód
 =8192 && 
r2
.nread == 4096)

488 
ã°_ok
 = 1;

490 
	`˛ónup_ã°
();

491 
	}
}

494 
	$ã°_sim∂ëimeout
()

496 
timevÆ
 
tv
;

497 
evít
 
ev
;

499 
	`£tup_ã°
("SimpleÅimeout: ");

501 
tv
.
tv_u£c
 = 0;

502 
tv
.
tv_£c
 = 
SECONDS
;

503 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

504 
	`evtimî_add
(&
ev
, &
tv
);

506 
	`evutû_gëtimeofday
(&
t£t
, 
NULL
);

507 
	`evít_di•©ch
();

509 
	`˛ónup_ã°
();

510 
	}
}

512 #i‚de‡
WIN32


513 
evít_ba£
 *
cuºít_ba£
;

516 
	$chûd_sig«l_cb
(
fd
, 
evít
, *
¨g
)

518 
timevÆ
 
tv
;

519 *
pöt
 = 
¨g
;

521 *
pöt
 = 1;

523 
tv
.
tv_u£c
 = 500000;

524 
tv
.
tv_£c
 = 0;

525 
	`evít_lo›exô
(&
tv
);

526 
	}
}

529 
	$ã°_f‹k
()

531 
°©us
, 
gŸ_sigchld
 = 0;

532 
evít
 
ev
, 
sig_ev
;

533 
pid_t
 
pid
;

535 
	`£tup_ã°
("After fork: ");

537 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

539 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev);

540 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

541 
	`exô
(1);

543 
	`sig«l_£t
(&
sig_ev
, 
SIGCHLD
, 
chûd_sig«l_cb
, &
gŸ_sigchld
);

544 
	`sig«l_add
(&
sig_ev
, 
NULL
);

546 i‡((
pid
 = 
	`f‹k
()) == 0) {

548 i‡(
	`evít_ªöô
(
cuºít_ba£
) == -1) {

549 
	`Ârötf
(
°dîr
, "FAILED (reinit)\n");

550 
	`exô
(1);

553 
	`sig«l_dñ
(&
sig_ev
);

555 
ˇŒed
 = 0;

557 
	`evít_di•©ch
();

562 
	`exô
(
ã°_ok
 !0 || 
ˇŒed
 != 2 ? -2 : 76);

566 
	`¶ìp
(1);

568 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

570 i‡(
	`waôpid
(
pid
, &
°©us
, 0) == -1) {

571 
	`Ârötf
(
°dîr
, "FAILED (fork)\n");

572 
	`exô
(1);

575 i‡(
	`WEXITSTATUS
(
°©us
) != 76) {

576 
	`Ârötf
(
°dîr
, "FAILED (exô): %d\n", 
	`WEXITSTATUS
(
°©us
));

577 
	`exô
(1);

581 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

582 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

584 
	`evít_di•©ch
();

586 i‡(!
gŸ_sigchld
) {

587 
	`Ârötf
(
°dout
, "FAILED (sigchld)\n");

588 
	`exô
(1);

591 
	`sig«l_dñ
(&
sig_ev
);

593 
	`˛ónup_ã°
();

594 
	}
}

597 
	$ã°_sim∂esig«l
()

599 
evít
 
ev
;

600 
ôimîvÆ
 
ôv
;

602 
	`£tup_ã°
("Simple signal: ");

603 
	`sig«l_£t
(&
ev
, 
SIGALRM
, 
sig«l_cb
, &ev);

604 
	`sig«l_add
(&
ev
, 
NULL
);

606 
	`sig«l_dñ
(&
ev
);

607 
	`sig«l_add
(&
ev
, 
NULL
);

609 
	`mem£t
(&
ôv
, 0, (itv));

610 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

611 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

612 
skù_sim∂esig«l
;

614 
	`evít_di•©ch
();

615 
skù_sim∂esig«l
:

616 i‡(
	`sig«l_dñ
(&
ev
) == -1)

617 
ã°_ok
 = 0;

619 
	`˛ónup_ã°
();

620 
	}
}

623 
	$ã°_mu…ùÀsig«l
()

625 
evít
 
ev_⁄e
, 
ev_two
;

626 
ôimîvÆ
 
ôv
;

628 
	`£tup_ã°
("Multiple signal: ");

630 
	`sig«l_£t
(&
ev_⁄e
, 
SIGALRM
, 
sig«l_cb
, &ev_one);

631 
	`sig«l_add
(&
ev_⁄e
, 
NULL
);

633 
	`sig«l_£t
(&
ev_two
, 
SIGALRM
, 
sig«l_cb
, &ev_two);

634 
	`sig«l_add
(&
ev_two
, 
NULL
);

636 
	`mem£t
(&
ôv
, 0, (itv));

637 
ôv
.
ô_vÆue
.
tv_£c
 = 1;

638 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1)

639 
skù_sim∂esig«l
;

641 
	`evít_di•©ch
();

643 
skù_sim∂esig«l
:

644 i‡(
	`sig«l_dñ
(&
ev_⁄e
) == -1)

645 
ã°_ok
 = 0;

646 i‡(
	`sig«l_dñ
(&
ev_two
) == -1)

647 
ã°_ok
 = 0;

649 
	`˛ónup_ã°
();

650 
	}
}

653 
	$ã°_immedüãsig«l
()

655 
evít
 
ev
;

657 
ã°_ok
 = 0;

658 
	`¥ötf
("Immediate signal: ");

659 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

660 
	`sig«l_add
(&
ev
, 
NULL
);

661 
	`øi£
(
SIGUSR1
);

662 
	`evít_lo›
(
EVLOOP_NONBLOCK
);

663 
	`sig«l_dñ
(&
ev
);

664 
	`˛ónup_ã°
();

665 
	}
}

668 
	$ã°_sig«l_dóŒoc
()

671 
evít
 
ev
;

672 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

673 
	`¥ötf
("Signal dealloc: ");

674 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

675 
	`sig«l_add
(&
ev
, 
NULL
);

676 
	`sig«l_dñ
(&
ev
);

677 
	`evít_ba£_‰ì
(
ba£
);

679 
ã°_ok
 = 1;

680 
	`˛ónup_ã°
();

681 
	}
}

684 
	$ã°_sig«l_pùñoss
()

687 
evít_ba£
 *
ba£1
, *
ba£2
;

688 
pùe1
;

689 
ã°_ok
 = 0;

690 
	`¥ötf
("SignalÖipeloss: ");

691 
ba£1
 = 
	`evít_öô
();

692 
pùe1
 = 
ba£1
->
sig
.
ev_sig«l_∑ú
[0];

693 
ba£2
 = 
	`evít_öô
();

694 
	`evít_ba£_‰ì
(
ba£2
);

695 
	`evít_ba£_‰ì
(
ba£1
);

696 i‡(
	`˛o£
(
pùe1
Ë!-1 || 
î∫o
!=
EBADF
) {

698 
	`¥ötf
("signalÖipeÇot closed. ");

699 
ã°_ok
 = 0;

701 
ã°_ok
 = 1;

703 
	`˛ónup_ã°
();

704 
	}
}

712 
	$ã°_sig«l_swôchba£
()

714 
evít
 
ev1
, 
ev2
;

715 
evít_ba£
 *
ba£1
, *
ba£2
;

716 
is_kqueue
;

717 
ã°_ok
 = 0;

718 
	`¥ötf
("Signal switchbase: ");

719 
ba£1
 = 
	`evít_öô
();

720 
ba£2
 = 
	`evít_öô
();

721 
is_kqueue
 = !
	`°rcmp
(
	`evít_gë_mëhod
(),"kqueue");

722 
	`sig«l_£t
(&
ev1
, 
SIGUSR1
, 
sig«l_cb
, &ev1);

723 
	`sig«l_£t
(&
ev2
, 
SIGUSR1
, 
sig«l_cb
, &ev2);

724 i‡(
	`evít_ba£_£t
(
ba£1
, &
ev1
) ||

725 
	`evít_ba£_£t
(
ba£2
, &
ev2
) ||

726 
	`evít_add
(&
ev1
, 
NULL
) ||

727 
	`evít_add
(&
ev2
, 
NULL
)) {

728 
	`Ârötf
(
°dîr
, "%s: c™nŸ së ba£,ádd\n", 
__func__
);

729 
	`exô
(1);

732 
ã°_ok
 = 0;

734 
	`øi£
(
SIGUSR1
);

735 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

736 i‡(
is_kqueue
) {

737 i‡(!
ã°_ok
)

738 
d⁄e
;

739 
ã°_ok
 = 0;

741 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

742 i‡(
ã°_ok
 && !
is_kqueue
) {

743 
ã°_ok
 = 0;

746 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

747 
	`øi£
(
SIGUSR1
);

748 
	`evít_ba£_lo›
(
ba£1
, 
EVLOOP_NONBLOCK
);

749 
	`evít_ba£_lo›
(
ba£2
, 
EVLOOP_NONBLOCK
);

751 
d⁄e
:

752 
	`evít_ba£_‰ì
(
ba£1
);

753 
	`evít_ba£_‰ì
(
ba£2
);

754 
	`˛ónup_ã°
();

755 
	}
}

762 
	$ã°_sig«l_as£π
()

764 
evít
 
ev
;

765 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

766 
ã°_ok
 = 0;

767 
	`¥ötf
("Signal handlerássert: ");

769 
	`sig«l_£t
(&
ev
, 
SIGCONT
, 
sig«l_cb
, &ev);

770 
	`sig«l_add
(&
ev
, 
NULL
);

775 
	`sig«l_dñ
(&
ev
);

777 
	`øi£
(
SIGCONT
);

779 i‡(
ba£
->
sig
.
evsig«l_ˇught
)

780 
ã°_ok
 = 0;

782 
ã°_ok
 = 1;

784 
	`evít_ba£_‰ì
(
ba£
);

785 
	`˛ónup_ã°
();

787 
	}
}

793 
	$ã°_sig«l_ª°‹e
()

795 
evít
 
ev
;

796 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

797 #ifde‡
HAVE_SIGACTION


798 
siga˘i⁄
 
ß
;

801 
ã°_ok
 = 0;

802 
	`¥ötf
("Signal handlerÑestore: ");

803 #ifde‡
HAVE_SIGACTION


804 
ß
.
ß_h™dÀr
 = 
sig«l_cb_ß
;

805 
ß
.
ß_Êags
 = 0x0;

806 
	`sigem±y£t
(&
ß
.
ß_mask
);

807 i‡(
	`siga˘i⁄
(
SIGUSR1
, &
ß
, 
NULL
) == -1)

808 
out
;

810 i‡(
	`sig«l
(
SIGUSR1
, 
sig«l_cb_ß
Ë=
SIG_ERR
)

811 
out
;

813 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb
, &ev);

814 
	`sig«l_add
(&
ev
, 
NULL
);

815 
	`sig«l_dñ
(&
ev
);

817 
	`øi£
(
SIGUSR1
);

819 i‡(
ã°_ok
 != 2)

820 
ã°_ok
 = 0;

821 
out
:

822 
	`evít_ba£_‰ì
(
ba£
);

823 
	`˛ónup_ã°
();

825 
	}
}

828 
	$sig«l_cb_swp
(
sig
, 
evít
, *
¨g
)

830 
ˇŒed
++;

831 i‡(
ˇŒed
 < 5)

832 
	`øi£
(
sig
);

834 
	`evít_lo›exô
(
NULL
);

835 
	}
}

837 
	$timeout_cb_swp
(
fd
, 
evít
, *
¨g
)

839 i‡(
ˇŒed
 == -1) {

840 
timevÆ
 
tv
 = {5, 0};

842 
ˇŒed
 = 0;

843 
	`evtimî_add
((
evít
 *)
¨g
, &
tv
);

844 
	`øi£
(
SIGUSR1
);

847 
ã°_ok
 = 0;

848 
	`evít_lo›exô
(
NULL
);

849 
	}
}

852 
	$ã°_sig«l_whûe_¥o˚ssög
()

854 
evít_ba£
 *
ba£
 = 
	`evít_öô
();

855 
evít
 
ev
, 
ev_timî
;

856 
timevÆ
 
tv
 = {0, 0};

858 
	`£tup_ã°
("Receivingá signal whileÖrocessing other signal: ");

860 
ˇŒed
 = -1;

861 
ã°_ok
 = 1;

862 
	`sig«l_£t
(&
ev
, 
SIGUSR1
, 
sig«l_cb_swp
, 
NULL
);

863 
	`sig«l_add
(&
ev
, 
NULL
);

864 
	`evtimî_£t
(&
ev_timî
, 
timeout_cb_swp
, &ev_timer);

865 
	`evtimî_add
(&
ev_timî
, &
tv
);

866 
	`evít_di•©ch
();

868 
	`evít_ba£_‰ì
(
ba£
);

869 
	`˛ónup_ã°
();

871 
	}
}

875 
	$ã°_‰ì_a˘ive_ba£
()

877 
evít_ba£
 *
ba£1
;

878 
evít
 
ev1
;

879 
	`£tup_ã°
("Freeáctive base: ");

880 
ba£1
 = 
	`evít_öô
();

881 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

882 
	`evít_ba£_£t
(
ba£1
, &
ev1
);

883 
	`evít_add
(&
ev1
, 
NULL
);

885 
	`evít_ba£_‰ì
(
ba£1
);

886 
ã°_ok
 = 1;

887 
	`˛ónup_ã°
();

888 
	}
}

891 
	$ã°_evít_ba£_√w
()

893 
evít_ba£
 *
ba£
;

894 
evít
 
ev1
;

895 
	`£tup_ã°
("Event baseÇew: ");

897 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

898 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

900 
ba£
 = 
	`evít_ba£_√w
();

901 
	`evít_£t
(&
ev1
, 
∑ú
[1], 
EV_READ
, 
sim∂e_ªad_cb
, &ev1);

902 
	`evít_ba£_£t
(
ba£
, &
ev1
);

903 
	`evít_add
(&
ev1
, 
NULL
);

905 
	`evít_ba£_di•©ch
(
ba£
);

907 
	`evít_ba£_‰ì
(
ba£
);

908 
ã°_ok
 = 1;

909 
	`˛ónup_ã°
();

910 
	}
}

913 
	$ã°_lo›exô
()

915 
timevÆ
 
tv
, 
tv_°¨t
, 
tv_íd
;

916 
evít
 
ev
;

918 
	`£tup_ã°
("LoopÉxit: ");

920 
tv
.
tv_u£c
 = 0;

921 
tv
.
tv_£c
 = 60*60*24;

922 
	`evtimî_£t
(&
ev
, 
timeout_cb
, 
NULL
);

923 
	`evtimî_add
(&
ev
, &
tv
);

925 
tv
.
tv_u£c
 = 0;

926 
tv
.
tv_£c
 = 1;

927 
	`evít_lo›exô
(&
tv
);

929 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

930 
	`evít_di•©ch
();

931 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

932 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

934 
	`evtimî_dñ
(&
ev
);

936 i‡(
tv
.
tv_£c
 < 2)

937 
ã°_ok
 = 1;

939 
	`˛ónup_ã°
();

940 
	}
}

943 
	$ã°_lo›exô_mu…ùÀ
()

945 
timevÆ
 
tv
;

946 
evít_ba£
 *
ba£
;

948 
	`£tup_ã°
("Loop MultipleÉxit: ");

950 
ba£
 = 
	`evít_ba£_√w
();

952 
tv
.
tv_u£c
 = 0;

953 
tv
.
tv_£c
 = 1;

954 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

956 
tv
.
tv_u£c
 = 0;

957 
tv
.
tv_£c
 = 2;

958 
	`evít_ba£_lo›exô
(
ba£
, &
tv
);

960 
	`evít_ba£_di•©ch
(
ba£
);

962 
	`evít_ba£_‰ì
(
ba£
);

964 
ã°_ok
 = 1;

966 
	`˛ónup_ã°
();

967 
	}
}

970 
	$bªak_cb
(
fd
, 
evíts
, *
¨g
)

972 
ã°_ok
 = 1;

973 
	`evít_lo›bªak
();

974 
	}
}

977 
	$Áû_cb
(
fd
, 
evíts
, *
¨g
)

979 
ã°_ok
 = 0;

980 
	}
}

983 
	$ã°_lo›bªak
()

985 
evít
 
ev1
, 
ev2
;

986 
timevÆ
 
tv
;

988 
	`£tup_ã°
("Loop break: ");

990 
tv
.
tv_£c
 = 0;

991 
tv
.
tv_u£c
 = 0;

992 
	`evtimî_£t
(&
ev1
, 
bªak_cb
, 
NULL
);

993 
	`evtimî_add
(&
ev1
, &
tv
);

994 
	`evtimî_£t
(&
ev2
, 
Áû_cb
, 
NULL
);

995 
	`evtimî_add
(&
ev2
, &
tv
);

997 
	`evít_di•©ch
();

999 
	`evtimî_dñ
(&
ev1
);

1000 
	`evtimî_dñ
(&
ev2
);

1002 
	`˛ónup_ã°
();

1003 
	}
}

1006 
	$ã°_evbuf„r
() {

1008 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

1009 
	`£tup_ã°
("Testing Evbuffer: ");

1011 
	`evbuf„r_add_¥ötf
(
evb
, "%s/%d", "hello", 1);

1013 i‡(
	`EVBUFFER_LENGTH
(
evb
) == 7 &&

1014 
	`°rcmp
((*)
	`EVBUFFER_DATA
(
evb
), "hello/1") == 0)

1015 
ã°_ok
 = 1;

1017 
	`evbuf„r_‰ì
(
evb
);

1019 
	`˛ónup_ã°
();

1020 
	}
}

1023 
	$ã°_evbuf„r_föd
()

1025 
u_ch¨
* 
p
;

1026 c⁄° * 
ã°1
 = "1234567890\r\n";

1027 c⁄° * 
ã°2
 = "1234567890\r";

1028 
	#EVBUFFER_INITIAL_LENGTH
 256

	)

1029 
ã°3
[
EVBUFFER_INITIAL_LENGTH
];

1030 
i
;

1031 
evbuf„r
 * 
buf
 = 
	`evbuf„r_√w
();

1034 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 1: ");

1035 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°1
, 
	`°æí
(test1));

1036 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°1
));

1037 
	`evbuf„r_add
(
buf
, (
u_ch¨
*)
ã°2
, 
	`°æí
(test2));

1038 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
*)"\r\n", 2);

1039 i‡(
p
 =
NULL
) {

1040 
	`Ârötf
(
°dout
, "OK\n");

1042 
	`Ârötf
(
°dout
, "FAILED\n");

1043 
	`exô
(1);

1050 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 2: ");

1051 
	`evbuf„r_døö
(
buf
, 
	`°æí
(
ã°2
));

1052 
i
 = 0; i < 
EVBUFFER_INITIAL_LENGTH
; ++i)

1053 
ã°3
[
i
] = 'a';

1054 
ã°3
[
EVBUFFER_INITIAL_LENGTH
 - 1] = 'x';

1055 
	`evbuf„r_add
(
buf
, (
u_ch¨
 *)
ã°3
, 
EVBUFFER_INITIAL_LENGTH
);

1056 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"xy", 2);

1057 i‡(
p
 =
NULL
) {

1058 
	`¥ötf
("OK\n");

1060 
	`Ârötf
(
°dout
, "FAILED\n");

1061 
	`exô
(1);

1065 
	`Ârötf
(
°dout
, "TestingÉvbuffer_find 3: ");

1066 
p
 = 
	`evbuf„r_föd
(
buf
, (
u_ch¨
 *)"ax", 2);

1067 i‡(
p
 !
NULL
 && 
	`°∫cmp
((*)p, "ax", 2) == 0) {

1068 
	`¥ötf
("OK\n");

1070 
	`Ârötf
(
°dout
, "FAILED\n");

1071 
	`exô
(1);

1074 
	`evbuf„r_‰ì
(
buf
);

1075 
	}
}

1082 
	$ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1084 i‡(
	`EVBUFFER_LENGTH
(
bev
->
öput
) == 8333) {

1085 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

1086 
ã°_ok
++;

1088 
	}
}

1091 
	$wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1093 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

1094 
ã°_ok
++;

1095 
	}
}

1098 
	$îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1100 
ã°_ok
 = -2;

1101 
	}
}

1104 
	$ã°_buf„ªvít
()

1106 
buf„ªvít
 *
bev1
, *
bev2
;

1107 
buf„r
[8333];

1108 
i
;

1110 
	`£tup_ã°
("Bufferevent: ");

1112 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1113 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
ªadcb
, 
wrôecb
, 
îr‹cb
, 
NULL
);

1115 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1116 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1118 
i
 = 0; i < (
buf„r
); i++)

1119 
buf„r
[
i
] = i;

1121 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1123 
	`evít_di•©ch
();

1125 
	`buf„ªvít_‰ì
(
bev1
);

1126 
	`buf„ªvít_‰ì
(
bev2
);

1128 i‡(
ã°_ok
 != 2)

1129 
ã°_ok
 = 0;

1131 
	`˛ónup_ã°
();

1132 
	}
}

1139 
	$wm_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1141 
Àn
 = 
	`EVBUFFER_LENGTH
(
bev
->
öput
);

1142 
ƒód
;

1144 
	`as£π
(
Àn
 >= 10 &&Üen <= 20);

1146 
	`evbuf„r_døö
(
bev
->
öput
, 
Àn
);

1148 
ƒód
 +
Àn
;

1149 i‡(
ƒód
 == 65000) {

1150 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

1151 
ã°_ok
++;

1153 
	}
}

1156 
	$wm_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1158 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0)

1159 
ã°_ok
++;

1160 
	}
}

1163 
	$wm_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1165 
ã°_ok
 = -2;

1166 
	}
}

1169 
	$ã°_buf„ªvít_w©îm¨ks
()

1171 
buf„ªvít
 *
bev1
, *
bev2
;

1172 
buf„r
[65000];

1173 
i
;

1175 
	`£tup_ã°
("Bufferevent Watermarks: ");

1177 
bev1
 = 
	`buf„ªvít_√w
(
∑ú
[0], 
NULL
, 
wm_wrôecb
, 
wm_îr‹cb
, NULL);

1178 
bev2
 = 
	`buf„ªvít_√w
(
∑ú
[1], 
wm_ªadcb
, 
NULL
, 
wm_îr‹cb
, NULL);

1180 
	`buf„ªvít_dißbÀ
(
bev1
, 
EV_READ
);

1181 
	`buf„ªvít_íabÀ
(
bev2
, 
EV_READ
);

1183 
i
 = 0; i < (
buf„r
); i++)

1184 
buf„r
[
i
] = i;

1186 
	`buf„ªvít_wrôe
(
bev1
, 
buf„r
, (buffer));

1189 
	`buf„ªvít_£tw©îm¨k
(
bev2
, 
EV_READ
, 10, 20);

1191 
	`evít_di•©ch
();

1193 
	`buf„ªvít_‰ì
(
bev1
);

1194 
	`buf„ªvít_‰ì
(
bev2
);

1196 i‡(
ã°_ok
 != 2)

1197 
ã°_ok
 = 0;

1199 
	`˛ónup_ã°
();

1200 
	}
}

1202 
	sã°_¥i_evít
 {

1203 
evít
 
	mev
;

1204 
	mcou¡
;

1208 
	$ã°_¥i‹ôõs_cb
(
fd
, 
wh©
, *
¨g
)

1210 
ã°_¥i_evít
 *
¥i
 = 
¨g
;

1211 
timevÆ
 
tv
;

1213 i‡(
¥i
->
cou¡
 == 3) {

1214 
	`evít_lo›exô
(
NULL
);

1218 
¥i
->
cou¡
++;

1220 
	`evutû_timî˛ór
(&
tv
);

1221 
	`evít_add
(&
¥i
->
ev
, &
tv
);

1222 
	}
}

1225 
	$ã°_¥i‹ôõs
(
≈ri‹ôõs
)

1227 
buf
[32];

1228 
ã°_¥i_evít
 
⁄e
, 
two
;

1229 
timevÆ
 
tv
;

1231 
	`evutû_¢¥ötf
(
buf
, (buf), "Te°ög Pri‹ôõ†%d: ", 
≈ri‹ôõs
);

1232 
	`£tup_ã°
(
buf
);

1234 
	`evít_ba£_¥i‹ôy_öô
(
globÆ_ba£
, 
≈ri‹ôõs
);

1236 
	`mem£t
(&
⁄e
, 0, (one));

1237 
	`mem£t
(&
two
, 0, (two));

1239 
	`timeout_£t
(&
⁄e
.
ev
, 
ã°_¥i‹ôõs_cb
, &one);

1240 i‡(
	`evít_¥i‹ôy_£t
(&
⁄e
.
ev
, 0) == -1) {

1241 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1242 
	`exô
(1);

1245 
	`timeout_£t
(&
two
.
ev
, 
ã°_¥i‹ôõs_cb
, &two);

1246 i‡(
	`evít_¥i‹ôy_£t
(&
two
.
ev
, 
≈ri‹ôõs
 - 1) == -1) {

1247 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ£à¥i‹ôy", 
__func__
);

1248 
	`exô
(1);

1251 
	`evutû_timî˛ór
(&
tv
);

1253 i‡(
	`evít_add
(&
⁄e
.
ev
, &
tv
) == -1)

1254 
	`exô
(1);

1255 i‡(
	`evít_add
(&
two
.
ev
, &
tv
) == -1)

1256 
	`exô
(1);

1258 
	`evít_di•©ch
();

1260 
	`evít_dñ
(&
⁄e
.
ev
);

1261 
	`evít_dñ
(&
two
.
ev
);

1263 i‡(
≈ri‹ôõs
 == 1) {

1264 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 3)

1265 
ã°_ok
 = 1;

1266 } i‡(
≈ri‹ôõs
 == 2) {

1268 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 1)

1269 
ã°_ok
 = 1;

1271 i‡(
⁄e
.
cou¡
 =3 && 
two
.count == 0)

1272 
ã°_ok
 = 1;

1275 
	`˛ónup_ã°
();

1276 
	}
}

1279 
	$ã°_mu…ùÀ_cb
(
fd
, 
evít
, *
¨g
)

1281 i‡(
evít
 & 
EV_READ
)

1282 
ã°_ok
 |= 1;

1283 i‡(
evít
 & 
EV_WRITE
)

1284 
ã°_ok
 |= 2;

1285 
	}
}

1288 
	$ã°_mu…ùÀ_evíts_f‹_ßme_fd
()

1290 
evít
 
e1
, 
e2
;

1292 
	`£tup_ã°
("MultipleÉvents for same fd: ");

1294 
	`evít_£t
(&
e1
, 
∑ú
[0], 
EV_READ
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1295 
	`evít_add
(&
e1
, 
NULL
);

1296 
	`evít_£t
(&
e2
, 
∑ú
[0], 
EV_WRITE
, 
ã°_mu…ùÀ_cb
, 
NULL
);

1297 
	`evít_add
(&
e2
, 
NULL
);

1298 
	`evít_lo›
(
EVLOOP_ONCE
);

1299 
	`evít_dñ
(&
e2
);

1300 
	`wrôe
(
∑ú
[1], 
TEST1
, 
	`°æí
(TEST1)+1);

1301 
	`evít_lo›
(
EVLOOP_ONCE
);

1302 
	`evít_dñ
(&
e1
);

1304 i‡(
ã°_ok
 != 3)

1305 
ã°_ok
 = 0;

1307 
	`˛ónup_ã°
();

1308 
	}
}

1310 
evèg_decode_öt
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1311 
evèg_ícode_èg
(
evbuf„r
 *
evbuf
, 
uöt32_t
 
numbî
);

1312 
evèg_decode_èg
(
uöt32_t
 *
≤umbî
, 
evbuf„r
 *
evbuf
);

1315 
	$ªad_⁄˚_cb
(
fd
, 
evít
, *
¨g
)

1317 
buf
[256];

1318 
Àn
;

1320 
Àn
 = 
	`ªad
(
fd
, 
buf
, (buf));

1322 i‡(
ˇŒed
) {

1323 
ã°_ok
 = 0;

1324 } i‡(
Àn
) {

1326 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1327 
ã°_ok
 = 1;

1330 
ˇŒed
++;

1331 
	}
}

1334 
	$ã°_w™t_⁄ly_⁄˚
()

1336 
evít
 
ev
;

1337 
timevÆ
 
tv
;

1340 
	`£tup_ã°
("WantÑead only once: ");

1342 
	`wrôe
(
∑ú
[0], 
TEST1
, 
	`°æí
(TEST1)+1);

1345 
	`evutû_timî˛ór
(&
tv
);

1346 
tv
.
tv_£c
 = 1;

1347 
	`evít_lo›exô
(&
tv
);

1349 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_⁄˚_cb
, &ev);

1350 i‡(
	`evít_add
(&
ev
, 
NULL
) == -1)

1351 
	`exô
(1);

1352 
	`evít_di•©ch
();

1354 
	`˛ónup_ã°
();

1355 
	}
}

1357 
	#TEST_MAX_INT
 6

	)

1360 
	$evèg_öt_ã°
()

1362 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1363 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1366 
uöt32_t
 
öãgî
;

1367 
i
;

1369 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1370 
ﬁdÀn
, 
√wÀn
;

1371 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1372 
	`ícode_öt
(
tmp
, 
öãgîs
[
i
]);

1373 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1374 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1375 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1378 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1379 i‡(
	`evèg_decode_öt
(&
öãgî
, 
tmp
) == -1) {

1380 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1381 
	`exô
(1);

1383 i‡(
öãgî
 !
öãgîs
[
i
]) {

1384 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1385 
öãgî
, 
öãgîs
[
i
]);

1386 
	`exô
(1);

1390 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1391 
	`Ârötf
(
°dîr
, "trailing data");

1392 
	`exô
(1);

1394 
	`evbuf„r_‰ì
(
tmp
);

1396 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1397 
	}
}

1400 
	$evèg_fuzz
()

1402 
u_ch¨
 
buf„r
[4096];

1403 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1404 
timevÆ
 
tv
;

1405 
i
, 
j
;

1407 
nŸ_Áûed
 = 0;

1408 
j
 = 0; j < 100; j++) {

1409 
i
 = 0; i < (
buf„r
); i++)

1410 
buf„r
[
i
] = 
	`ønd
();

1411 
	`evbuf„r_døö
(
tmp
, -1);

1412 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1414 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1)

1415 
nŸ_Áûed
++;

1419 i‡(
nŸ_Áûed
 >= 10) {

1420 
	`Ârötf
(
°dîr
, "evtag_unmarshal should have failed");

1421 
	`exô
(1);

1425 
	`evbuf„r_døö
(
tmp
, -1);

1426 
	`evutû_timî˛ór
(&
tv
);

1427 
tv
.
tv_£c
 = 1;

1428 
	`evèg_m¨shÆ_timevÆ
(
tmp
, 0, &
tv
);

1429 
	`evbuf„r_add
(
tmp
, 
buf„r
, (buffer));

1431 
	`EVBUFFER_DATA
(
tmp
)[1] = 0xff;

1432 i‡(
	`evèg_unm¨shÆ_timevÆ
(
tmp
, 0, &
tv
) != -1) {

1433 
	`Ârötf
(
°dîr
, "evtag_unmarshal_timeval should have failed");

1434 
	`exô
(1);

1437 
	`evbuf„r_‰ì
(
tmp
);

1439 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1440 
	}
}

1443 
	$evèg_èg_ícodög
()

1445 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1446 
uöt32_t
 
öãgîs
[
TEST_MAX_INT
] = {

1449 
uöt32_t
 
öãgî
;

1450 
i
;

1452 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1453 
ﬁdÀn
, 
√wÀn
;

1454 
ﬁdÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1455 
	`evèg_ícode_èg
(
tmp
, 
öãgîs
[
i
]);

1456 
√wÀn
 = 
	`EVBUFFER_LENGTH
(
tmp
);

1457 
	`Ârötf
(
°dout
, "\t\tencoded 0x%08x with %d bytes\n",

1458 
öãgîs
[
i
], 
√wÀn
 - 
ﬁdÀn
);

1461 
i
 = 0; i < 
TEST_MAX_INT
; i++) {

1462 i‡(
	`evèg_decode_èg
(&
öãgî
, 
tmp
) == -1) {

1463 
	`Ârötf
(
°dîr
, "decodê%d faûed", 
i
);

1464 
	`exô
(1);

1466 i‡(
öãgî
 !
öãgîs
[
i
]) {

1467 
	`Ârötf
(
°dîr
, "got %x, wanted %x",

1468 
öãgî
, 
öãgîs
[
i
]);

1469 
	`exô
(1);

1473 i‡(
	`EVBUFFER_LENGTH
(
tmp
) != 0) {

1474 
	`Ârötf
(
°dîr
, "trailing data");

1475 
	`exô
(1);

1477 
	`evbuf„r_‰ì
(
tmp
);

1479 
	`Ârötf
(
°dout
, "\t%s: OK\n", 
__func__
);

1480 
	}
}

1483 
	$evèg_ã°
()

1485 
	`Ârötf
(
°dout
, "Testing Tagging:\n");

1487 
	`evèg_öô
();

1488 
	`evèg_öt_ã°
();

1489 
	`evèg_fuzz
();

1491 
	`evèg_èg_ícodög
();

1493 
	`Ârötf
(
°dout
, "OK\n");

1494 
	}
}

1496 #i‚de‡
WIN32


1498 
	$Ωc_ã°
()

1500 
msg
 *msg, *
msg2
;

1501 
kûl
 *
©èck
;

1502 
run
 *run;

1503 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

1504 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1505 
uöt32_t
 
èg
;

1506 
i
;

1508 
	`Ârötf
(
°dout
, "Testing RPC: ");

1510 
msg
 = 
	`msg_√w
();

1511 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

1512 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "phoenix");

1514 i‡(
	`EVTAG_GET
(
msg
, 
©èck
, &attack) == -1) {

1515 
	`Ârötf
(
°dîr
, "FailedÅo set kill message.\n");

1516 
	`exô
(1);

1519 
	`EVTAG_ASSIGN
(
©èck
, 
wóp⁄
, "feather");

1520 
	`EVTAG_ASSIGN
(
©èck
, 
a˘i⁄
, "tickle");

1522 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1523 
i
 = 0; i < 1000; ++i) {

1524 
run
 = 
	`EVTAG_ADD
(
msg
,Ñun);

1525 i‡(
run
 =
NULL
) {

1526 
	`Ârötf
(
°dîr
, "FailedÅoáddÑun message.\n");

1527 
	`exô
(1);

1529 
	`EVTAG_ASSIGN
(
run
, 
how
, "very fast but with some data in it");

1530 
	`EVTAG_ASSIGN
(
run
, 
fixed_byãs
,

1534 i‡(
	`msg_com∂ëe
(
msg
) == -1) {

1535 
	`Ârötf
(
°dîr
, "FailedÅo make complete message.\n");

1536 
	`exô
(1);

1539 
	`evèg_m¨shÆ_msg
(
tmp
, 0xdóf, 
msg
);

1541 i‡(
	`evèg_≥ek
(
tmp
, &
èg
) == -1) {

1542 
	`Ârötf
(
°dîr
, "FailedÅoÖeakÅag.\n");

1543 
	`exô
 (1);

1546 i‡(
èg
 != 0xdeaf) {

1547 
	`Ârötf
(
°dîr
, "GŸ inc‹ª˘Åag: %0x.\n", 
èg
);

1548 
	`exô
 (1);

1551 
msg2
 = 
	`msg_√w
();

1552 i‡(
	`evèg_unm¨shÆ_msg
(
tmp
, 0xdóf, 
msg2
) == -1) {

1553 
	`Ârötf
(
°dîr
, "FailedÅo unmarshal message.\n");

1554 
	`exô
(1);

1557 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1558 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1559 
	`Ârötf
(
°dîr
, "(%.1f us/add) ",

1560 ()
tv_íd
.
tv_£c
/()
i
 * 1000000.0 +

1561 
tv_íd
.
tv_u£c
 / ()
i
);

1563 i‡(!
	`EVTAG_HAS
(
msg2
, 
‰om_«me
) ||

1564 !
	`EVTAG_HAS
(
msg2
, 
to_«me
) ||

1565 !
	`EVTAG_HAS
(
msg2
, 
©èck
)) {

1566 
	`Ârötf
(
°dîr
, "Missing data structures.\n");

1567 
	`exô
(1);

1570 i‡(
	`EVTAG_LEN
(
msg2
, 
run
Ë!
i
) {

1571 
	`Ârötf
(
°dîr
, "WrongÇumber ofÑun messages.\n");

1572 
	`exô
(1);

1575 
	`msg_‰ì
(
msg
);

1576 
	`msg_‰ì
(
msg2
);

1578 
	`evbuf„r_‰ì
(
tmp
);

1580 
	`Ârötf
(
°dout
, "OK\n");

1581 
	}
}

1585 
	$ã°_evutû_°πﬁl
()

1587 c⁄° *
s
;

1588 *
íd±r
;

1589 
	`£tup_ã°
("evutil_stroll: ");

1590 
ã°_ok
 = 0;

1592 i‡(
	`evutû_°πﬁl
("5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*1000)

1593 
îr
;

1594 i‡(
	`evutû_°πﬁl
("-5000000000", 
NULL
, 10Ë!((
ev_öt64_t
)5000000)*-1000)

1595 
îr
;

1596 
s
 = " 99999stuff";

1597 i‡(
	`evutû_°πﬁl
(
s
, &
íd±r
, 10Ë!(
ev_öt64_t
)99999)

1598 
îr
;

1599 i‡(
íd±r
 !
s
+6)

1600 
îr
;

1601 i‡(
	`evutû_°πﬁl
("foo", 
NULL
, 10) != 0)

1602 
îr
;

1604 
ã°_ok
 = 1;

1605 
îr
:

1606 
	`˛ónup_ã°
();

1607 
	}
}

1611 
	$maö
 (
¨gc
, **
¨gv
)

1613 #ifde‡
WIN32


1614 
WORD
 
wVîsi⁄Reque°ed
;

1615 
WSADATA
 
wßD©a
;

1616 
îr
;

1618 
wVîsi⁄Reque°ed
 = 
	`MAKEWORD
( 2, 2 );

1620 
îr
 = 
	`WSASèπup
–
wVîsi⁄Reque°ed
, &
wßD©a
 );

1623 #i‚de‡
WIN32


1624 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

1627 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 0);

1630 
globÆ_ba£
 = 
	`evít_öô
();

1632 
	`ã°_ªgi°îfds
();

1634 
	`ã°_evutû_°πﬁl
();

1637 
	`ã°_¥i‹ôõs
(1);

1638 
	`ã°_¥i‹ôõs
(2);

1639 
	`ã°_¥i‹ôõs
(3);

1641 
	`ã°_evbuf„r
();

1642 
	`ã°_evbuf„r_föd
();

1644 
	`ã°_buf„ªvít
();

1645 
	`ã°_buf„ªvít_w©îm¨ks
();

1647 
	`ã°_‰ì_a˘ive_ba£
();

1649 
	`ã°_evít_ba£_√w
();

1651 
	`hâp_suôe
();

1653 #i‚de‡
WIN32


1654 
	`Ωc_suôe
();

1657 
	`dns_suôe
();

1659 #i‚de‡
WIN32


1660 
	`ã°_f‹k
();

1663 
	`ã°_sim∂îód
();

1665 
	`ã°_sim∂ewrôe
();

1667 
	`ã°_mu…ùÀ
();

1669 
	`ã°_≥rsi°ít
();

1671 
	`ã°_comböed
();

1673 
	`ã°_sim∂ëimeout
();

1674 #i‚de‡
WIN32


1675 
	`ã°_sim∂esig«l
();

1676 
	`ã°_mu…ùÀsig«l
();

1677 
	`ã°_immedüãsig«l
();

1679 
	`ã°_lo›exô
();

1680 
	`ã°_lo›bªak
();

1682 
	`ã°_lo›exô_mu…ùÀ
();

1684 
	`ã°_mu…ùÀ_evíts_f‹_ßme_fd
();

1686 
	`ã°_w™t_⁄ly_⁄˚
();

1688 
	`evèg_ã°
();

1690 #i‚de‡
WIN32


1691 
	`Ωc_ã°
();

1693 
	`ã°_sig«l_dóŒoc
();

1694 
	`ã°_sig«l_pùñoss
();

1695 
	`ã°_sig«l_swôchba£
();

1696 
	`ã°_sig«l_ª°‹e
();

1697 
	`ã°_sig«l_as£π
();

1698 
	`ã°_sig«l_whûe_¥o˚ssög
();

1702 
	}
}

	@test/regress.gen.c

6 
	~<sys/ty≥s.h
>

7 #ifde‡
_EVENT_HAVE_SYS_TIME_H


8 
	~<sys/time.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<as£π.h
>

13 
	#EVENT_NO_STRUCT


	)

14 
	~<evít.h
>

16 #ifde‡
_EVENT___func__


17 
	#__func__
 
_EVENT___func__


	)

20 
	~"ªgªss.gí.h
"

22 
evít_îr
(
evÆ
, c⁄° *
fmt
, ...);

23 
evít_w¨n
(c⁄° *
fmt
, ...);

24 
evít_îrx
(
evÆ
, c⁄° *
fmt
, ...);

25 
evít_w¨nx
(c⁄° *
fmt
, ...);

32 
msg_ac˚ss_
 
	g__msg_ba£
 = {

33 
msg_‰om_«me_assign
,

34 
msg_‰om_«me_gë
,

35 
msg_to_«me_assign
,

36 
msg_to_«me_gë
,

37 
msg_©èck_assign
,

38 
msg_©èck_gë
,

39 
msg_run_assign
,

40 
msg_run_gë
,

41 
msg_run_add
,

44 
msg
 *

45 
	$msg_√w
()

47 
msg
 *
tmp
;

48 i‡((
tmp
 = 
	`mÆloc
((
msg
))Ë=
NULL
) {

49 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

50  (
NULL
);

52 
tmp
->
ba£
 = &
__msg_ba£
;

54 
tmp
->
‰om_«me_d©a
 = 
NULL
;

55 
tmp
->
‰om_«me_£t
 = 0;

57 
tmp
->
to_«me_d©a
 = 
NULL
;

58 
tmp
->
to_«me_£t
 = 0;

60 
tmp
->
©èck_d©a
 = 
NULL
;

61 
tmp
->
©èck_£t
 = 0;

63 
tmp
->
run_d©a
 = 
NULL
;

64 
tmp
->
run_Àngth
 = 0;

65 
tmp
->
run_num_Æloˇãd
 = 0;

66 
tmp
->
run_£t
 = 0;

68  (
tmp
);

69 
	}
}

74 
run
 *

75 
	$msg_run_add
(
msg
 *msg)

77 i‡(++
msg
->
run_Àngth
 >msg->
run_num_Æloˇãd
) {

78 
tobe_Æloˇãd
 = 
msg
->
run_num_Æloˇãd
;

79 
run
 ** 
√w_d©a
 = 
NULL
;

80 
tobe_Æloˇãd
 = !tobe_allocated ? 1 :Åobe_allocated << 1;

81 
√w_d©a
 = (
run
 **Ë
	`ªÆloc
(
msg
->
run_d©a
,

82 
tobe_Æloˇãd
 * (
run
 *));

83 i‡(
√w_d©a
 =
NULL
)

84 
îr‹
;

85 
msg
->
run_d©a
 = 
√w_d©a
;

86 
msg
->
run_num_Æloˇãd
 = 
tobe_Æloˇãd
;

88 
msg
->
run_d©a
[msg->
run_Àngth
 - 1] = 
	`run_√w
();

89 i‡(
msg
->
run_d©a
[msg->
run_Àngth
 - 1] =
NULL
)

90 
îr‹
;

91 
msg
->
run_£t
 = 1;

92  (
msg
->
run_d©a
[msg->
run_Àngth
 - 1]);

93 
îr‹
:

94 --
msg
->
run_Àngth
;

95  (
NULL
);

96 
	}
}

100 
	$msg_‰om_«me_assign
(
msg
 *msg,

101 c⁄° * 
vÆue
)

103 i‡(
msg
->
‰om_«me_d©a
 !
NULL
)

104 
	`‰ì
(
msg
->
‰om_«me_d©a
);

105 i‡((
msg
->
‰om_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

107 
msg
->
‰om_«me_£t
 = 1;

109 
	}
}

112 
	$msg_to_«me_assign
(
msg
 *msg,

113 c⁄° * 
vÆue
)

115 i‡(
msg
->
to_«me_d©a
 !
NULL
)

116 
	`‰ì
(
msg
->
to_«me_d©a
);

117 i‡((
msg
->
to_«me_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

119 
msg
->
to_«me_£t
 = 1;

121 
	}
}

124 
	$msg_©èck_assign
(
msg
 *msg,

125 c⁄° 
kûl
* 
vÆue
)

127 
evbuf„r
 *
tmp
 = 
NULL
;

128 i‡(
msg
->
©èck_£t
) {

129 
	`kûl_˛ór
(
msg
->
©èck_d©a
);

130 
msg
->
©èck_£t
 = 0;

132 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

133 i‡(
msg
->
©èck_d©a
 =
NULL
) {

134 
	`evít_w¨n
("%s: kûl_√w()", 
__func__
);

135 
îr‹
;

138 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

139 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

140 
îr‹
;

142 
	`kûl_m¨shÆ
(
tmp
, 
vÆue
);

143 i‡(
	`kûl_unm¨shÆ
(
msg
->
©èck_d©a
, 
tmp
) == -1) {

144 
	`evít_w¨nx
("%s: kûl_unm¨shÆ", 
__func__
);

145 
îr‹
;

147 
msg
->
©èck_£t
 = 1;

148 
	`evbuf„r_‰ì
(
tmp
);

150 
îr‹
:

151 i‡(
tmp
 !
NULL
)

152 
	`evbuf„r_‰ì
(
tmp
);

153 i‡(
msg
->
©èck_d©a
 !
NULL
) {

154 
	`kûl_‰ì
(
msg
->
©èck_d©a
);

155 
msg
->
©èck_d©a
 = 
NULL
;

158 
	}
}

161 
	$msg_run_assign
(
msg
 *msg, 
off
,

162 c⁄° 
run
 * 
vÆue
)

164 
evbuf„r
 *
tmp
 = 
NULL
;

165 i‡(!
msg
->
run_£t
 || 
off
 < 0 || of‡>msg->
run_Àngth
)

167 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

168 i‡((
tmp
 = 
	`evbuf„r_√w
()Ë=
NULL
) {

169 
	`evít_w¨n
("%s:Évbuf„r_√w()", 
__func__
);

170 
îr‹
;

172 
	`run_m¨shÆ
(
tmp
, 
vÆue
);

173 i‡(
	`run_unm¨shÆ
(
msg
->
run_d©a
[
off
], 
tmp
) == -1) {

174 
	`evít_w¨nx
("%s:Ñun_unm¨shÆ", 
__func__
);

175 
îr‹
;

177 
	`evbuf„r_‰ì
(
tmp
);

179 
îr‹
:

180 i‡(
tmp
 !
NULL
)

181 
	`evbuf„r_‰ì
(
tmp
);

182 
	`run_˛ór
(
msg
->
run_d©a
[
off
]);

184 
	}
}

187 
	$msg_‰om_«me_gë
(
msg
 *msg, * *
vÆue
)

189 i‡(
msg
->
‰om_«me_£t
 != 1)

191 *
vÆue
 = 
msg
->
‰om_«me_d©a
;

193 
	}
}

196 
	$msg_to_«me_gë
(
msg
 *msg, * *
vÆue
)

198 i‡(
msg
->
to_«me_£t
 != 1)

200 *
vÆue
 = 
msg
->
to_«me_d©a
;

202 
	}
}

205 
	$msg_©èck_gë
(
msg
 *msg, 
kûl
* *
vÆue
)

207 i‡(
msg
->
©èck_£t
 != 1) {

208 
msg
->
©èck_d©a
 = 
	`kûl_√w
();

209 i‡(
msg
->
©èck_d©a
 =
NULL
)

211 
msg
->
©èck_£t
 = 1;

213 *
vÆue
 = 
msg
->
©èck_d©a
;

215 
	}
}

218 
	$msg_run_gë
(
msg
 *msg, 
off£t
,

219 
run
 * *
vÆue
)

221 i‡(!
msg
->
run_£t
 || 
off£t
 < 0 || off£à>msg->
run_Àngth
)

223 *
vÆue
 = 
msg
->
run_d©a
[
off£t
];

225 
	}
}

228 
	$msg_˛ór
(
msg
 *
tmp
)

230 i‡(
tmp
->
‰om_«me_£t
 == 1) {

231 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

232 
tmp
->
‰om_«me_d©a
 = 
NULL
;

233 
tmp
->
‰om_«me_£t
 = 0;

235 i‡(
tmp
->
to_«me_£t
 == 1) {

236 
	`‰ì
 (
tmp
->
to_«me_d©a
);

237 
tmp
->
to_«me_d©a
 = 
NULL
;

238 
tmp
->
to_«me_£t
 = 0;

240 i‡(
tmp
->
©èck_£t
 == 1) {

241 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

242 
tmp
->
©èck_d©a
 = 
NULL
;

243 
tmp
->
©èck_£t
 = 0;

245 i‡(
tmp
->
run_£t
 == 1) {

246 
i
;

247 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

248 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

250 
	`‰ì
(
tmp
->
run_d©a
);

251 
tmp
->
run_d©a
 = 
NULL
;

252 
tmp
->
run_£t
 = 0;

253 
tmp
->
run_Àngth
 = 0;

254 
tmp
->
run_num_Æloˇãd
 = 0;

256 
	}
}

259 
	$msg_‰ì
(
msg
 *
tmp
)

261 i‡(
tmp
->
‰om_«me_d©a
 !
NULL
)

262 
	`‰ì
 (
tmp
->
‰om_«me_d©a
);

263 i‡(
tmp
->
to_«me_d©a
 !
NULL
)

264 
	`‰ì
 (
tmp
->
to_«me_d©a
);

265 i‡(
tmp
->
©èck_d©a
 !
NULL
)

266 
	`kûl_‰ì
(
tmp
->
©èck_d©a
);

267 i‡(
tmp
->
run_d©a
 !
NULL
) {

268 
i
;

269 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

270 
	`run_‰ì
(
tmp
->
run_d©a
[
i
]);

271 
tmp
->
run_d©a
[
i
] = 
NULL
;

273 
	`‰ì
(
tmp
->
run_d©a
);

274 
tmp
->
run_d©a
 = 
NULL
;

275 
tmp
->
run_Àngth
 = 0;

276 
tmp
->
run_num_Æloˇãd
 = 0;

278 
	`‰ì
(
tmp
);

279 
	}
}

282 
	$msg_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
msg
 *
tmp
){

283 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, 
tmp
->
‰om_«me_d©a
);

284 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, 
tmp
->
to_«me_d©a
);

285 i‡(
tmp
->
©èck_£t
) {

286 
	`evèg_m¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
);

289 
i
;

290 
i
 = 0; i < 
tmp
->
run_Àngth
; ++i) {

291 
	`evèg_m¨shÆ_run
(
evbuf
, 
MSG_RUN
, 
tmp
->
run_d©a
[
i
]);

294 
	}
}

297 
	$msg_unm¨shÆ
(
msg
 *
tmp
, 
evbuf„r
 *
evbuf
)

299 
ev_uöt32_t
 
èg
;

300 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

301 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

303 
èg
) {

305 
MSG_FROM_NAME
:

307 i‡(
tmp
->
‰om_«me_£t
)

309 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_FROM_NAME
, &
tmp
->
‰om_«me_d©a
) == -1) {

310 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ from_«me", 
__func__
);

313 
tmp
->
‰om_«me_£t
 = 1;

316 
MSG_TO_NAME
:

318 i‡(
tmp
->
to_«me_£t
)

320 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
MSG_TO_NAME
, &
tmp
->
to_«me_d©a
) == -1) {

321 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÅo_«me", 
__func__
);

324 
tmp
->
to_«me_£t
 = 1;

327 
MSG_ATTACK
:

329 i‡(
tmp
->
©èck_£t
)

331 
tmp
->
©èck_d©a
 = 
	`kûl_√w
();

332 i‡(
tmp
->
©èck_d©a
 =
NULL
)

334 i‡(
	`evèg_unm¨shÆ_kûl
(
evbuf
, 
MSG_ATTACK
, 
tmp
->
©èck_d©a
) == -1) {

335 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆáâack", 
__func__
);

338 
tmp
->
©èck_£t
 = 1;

341 
MSG_RUN
:

343 i‡(
	`msg_run_add
(
tmp
Ë=
NULL
)

345 i‡(
	`evèg_unm¨shÆ_run
(
evbuf
, 
MSG_RUN
,

346 
tmp
->
run_d©a
[tmp->
run_Àngth
 - 1]) == -1) {

347 --
tmp
->
run_Àngth
;

348 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆÑun", 
__func__
);

351 
tmp
->
run_£t
 = 1;

359 i‡(
	`msg_com∂ëe
(
tmp
) == -1)

362 
	}
}

365 
	$msg_com∂ëe
(
msg
 *msg)

367 i‡(!
msg
->
‰om_«me_£t
)

369 i‡(!
msg
->
to_«me_£t
)

371 i‡(
msg
->
©èck_£t
 && 
	`kûl_com∂ëe
(msg->
©èck_d©a
) == -1)

374 
i
;

375 
i
 = 0; i < 
msg
->
run_Àngth
; ++i) {

376 i‡(
	`run_com∂ëe
(
msg
->
run_d©a
[
i
]) == -1)

381 
	}
}

384 
	$evèg_unm¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
msg
 *msg)

386 
ev_uöt32_t
 
èg
;

387 
ªs
 = -1;

389 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

391 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

392 
îr‹
;

394 i‡(
	`msg_unm¨shÆ
(
msg
, 
tmp
) == -1)

395 
îr‹
;

397 
ªs
 = 0;

399 
îr‹
:

400 
	`evbuf„r_‰ì
(
tmp
);

401  (
ªs
);

402 
	}
}

405 
	$evèg_m¨shÆ_msg
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
msg
 *msg)

407 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

408 
	`as£π
(
_buf
 !
NULL
);

409 
	`evbuf„r_døö
(
_buf
, -1);

410 
	`msg_m¨shÆ
(
_buf
, 
msg
);

411 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

412 
	`evbuf„r_‰ì
(
_buf
);

413 
	}
}

419 
kûl_ac˚ss_
 
	g__kûl_ba£
 = {

420 
kûl_wóp⁄_assign
,

421 
kûl_wóp⁄_gë
,

422 
kûl_a˘i⁄_assign
,

423 
kûl_a˘i⁄_gë
,

424 
kûl_how_o·í_assign
,

425 
kûl_how_o·í_gë
,

428 
kûl
 *

429 
	$kûl_√w
()

431 
kûl
 *
tmp
;

432 i‡((
tmp
 = 
	`mÆloc
((
kûl
))Ë=
NULL
) {

433 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

434  (
NULL
);

436 
tmp
->
ba£
 = &
__kûl_ba£
;

438 
tmp
->
wóp⁄_d©a
 = 
NULL
;

439 
tmp
->
wóp⁄_£t
 = 0;

441 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

442 
tmp
->
a˘i⁄_£t
 = 0;

444 
tmp
->
how_o·í_d©a
 = 0;

445 
tmp
->
how_o·í_£t
 = 0;

447  (
tmp
);

448 
	}
}

454 
	$kûl_wóp⁄_assign
(
kûl
 *
msg
,

455 c⁄° * 
vÆue
)

457 i‡(
msg
->
wóp⁄_d©a
 !
NULL
)

458 
	`‰ì
(
msg
->
wóp⁄_d©a
);

459 i‡((
msg
->
wóp⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

461 
msg
->
wóp⁄_£t
 = 1;

463 
	}
}

466 
	$kûl_a˘i⁄_assign
(
kûl
 *
msg
,

467 c⁄° * 
vÆue
)

469 i‡(
msg
->
a˘i⁄_d©a
 !
NULL
)

470 
	`‰ì
(
msg
->
a˘i⁄_d©a
);

471 i‡((
msg
->
a˘i⁄_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

473 
msg
->
a˘i⁄_£t
 = 1;

475 
	}
}

478 
	$kûl_how_o·í_assign
(
kûl
 *
msg
, c⁄° 
ev_uöt32_t
 
vÆue
)

480 
msg
->
how_o·í_£t
 = 1;

481 
msg
->
how_o·í_d©a
 = 
vÆue
;

483 
	}
}

486 
	$kûl_wóp⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

488 i‡(
msg
->
wóp⁄_£t
 != 1)

490 *
vÆue
 = 
msg
->
wóp⁄_d©a
;

492 
	}
}

495 
	$kûl_a˘i⁄_gë
(
kûl
 *
msg
, * *
vÆue
)

497 i‡(
msg
->
a˘i⁄_£t
 != 1)

499 *
vÆue
 = 
msg
->
a˘i⁄_d©a
;

501 
	}
}

504 
	$kûl_how_o·í_gë
(
kûl
 *
msg
, 
ev_uöt32_t
 *
vÆue
)

506 i‡(
msg
->
how_o·í_£t
 != 1)

508 *
vÆue
 = 
msg
->
how_o·í_d©a
;

510 
	}
}

513 
	$kûl_˛ór
(
kûl
 *
tmp
)

515 i‡(
tmp
->
wóp⁄_£t
 == 1) {

516 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

517 
tmp
->
wóp⁄_d©a
 = 
NULL
;

518 
tmp
->
wóp⁄_£t
 = 0;

520 i‡(
tmp
->
a˘i⁄_£t
 == 1) {

521 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

522 
tmp
->
a˘i⁄_d©a
 = 
NULL
;

523 
tmp
->
a˘i⁄_£t
 = 0;

525 
tmp
->
how_o·í_£t
 = 0;

526 
	}
}

529 
	$kûl_‰ì
(
kûl
 *
tmp
)

531 i‡(
tmp
->
wóp⁄_d©a
 !
NULL
)

532 
	`‰ì
 (
tmp
->
wóp⁄_d©a
);

533 i‡(
tmp
->
a˘i⁄_d©a
 !
NULL
)

534 
	`‰ì
 (
tmp
->
a˘i⁄_d©a
);

535 
	`‰ì
(
tmp
);

536 
	}
}

539 
	$kûl_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
kûl
 *
tmp
){

540 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, 
tmp
->
wóp⁄_d©a
);

541 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, 
tmp
->
a˘i⁄_d©a
);

542 i‡(
tmp
->
how_o·í_£t
) {

543 
	`evèg_m¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, 
tmp
->
how_o·í_d©a
);

545 
	}
}

548 
	$kûl_unm¨shÆ
(
kûl
 *
tmp
, 
evbuf„r
 *
evbuf
)

550 
ev_uöt32_t
 
èg
;

551 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

552 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

554 
èg
) {

556 
KILL_WEAPON
:

558 i‡(
tmp
->
wóp⁄_£t
)

560 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_WEAPON
, &
tmp
->
wóp⁄_d©a
) == -1) {

561 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ wóp⁄", 
__func__
);

564 
tmp
->
wóp⁄_£t
 = 1;

567 
KILL_ACTION
:

569 i‡(
tmp
->
a˘i⁄_£t
)

571 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
KILL_ACTION
, &
tmp
->
a˘i⁄_d©a
) == -1) {

572 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆá˘i⁄", 
__func__
);

575 
tmp
->
a˘i⁄_£t
 = 1;

578 
KILL_HOW_OFTEN
:

580 i‡(
tmp
->
how_o·í_£t
)

582 i‡(
	`evèg_unm¨shÆ_öt
(
evbuf
, 
KILL_HOW_OFTEN
, &
tmp
->
how_o·í_d©a
) == -1) {

583 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how_o·í", 
__func__
);

586 
tmp
->
how_o·í_£t
 = 1;

594 i‡(
	`kûl_com∂ëe
(
tmp
) == -1)

597 
	}
}

600 
	$kûl_com∂ëe
(
kûl
 *
msg
)

602 i‡(!
msg
->
wóp⁄_£t
)

604 i‡(!
msg
->
a˘i⁄_£t
)

607 
	}
}

610 
	$evèg_unm¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
kûl
 *
msg
)

612 
ev_uöt32_t
 
èg
;

613 
ªs
 = -1;

615 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

617 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

618 
îr‹
;

620 i‡(
	`kûl_unm¨shÆ
(
msg
, 
tmp
) == -1)

621 
îr‹
;

623 
ªs
 = 0;

625 
îr‹
:

626 
	`evbuf„r_‰ì
(
tmp
);

627  (
ªs
);

628 
	}
}

631 
	$evèg_m¨shÆ_kûl
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
kûl
 *
msg
)

633 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

634 
	`as£π
(
_buf
 !
NULL
);

635 
	`evbuf„r_døö
(
_buf
, -1);

636 
	`kûl_m¨shÆ
(
_buf
, 
msg
);

637 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

638 
	`evbuf„r_‰ì
(
_buf
);

639 
	}
}

645 
run_ac˚ss_
 
	g__run_ba£
 = {

646 
run_how_assign
,

647 
run_how_gë
,

648 
run_some_byãs_assign
,

649 
run_some_byãs_gë
,

650 
run_fixed_byãs_assign
,

651 
run_fixed_byãs_gë
,

654 
run
 *

655 
	$run_√w
()

657 
run
 *
tmp
;

658 i‡((
tmp
 = 
	`mÆloc
((
run
))Ë=
NULL
) {

659 
	`evít_w¨n
("%s: mÆloc", 
__func__
);

660  (
NULL
);

662 
tmp
->
ba£
 = &
__run_ba£
;

664 
tmp
->
how_d©a
 = 
NULL
;

665 
tmp
->
how_£t
 = 0;

667 
tmp
->
some_byãs_d©a
 = 
NULL
;

668 
tmp
->
some_byãs_Àngth
 = 0;

669 
tmp
->
some_byãs_£t
 = 0;

671 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

672 
tmp
->
fixed_byãs_£t
 = 0;

674  (
tmp
);

675 
	}
}

681 
	$run_how_assign
(
run
 *
msg
,

682 c⁄° * 
vÆue
)

684 i‡(
msg
->
how_d©a
 !
NULL
)

685 
	`‰ì
(
msg
->
how_d©a
);

686 i‡((
msg
->
how_d©a
 = 
	`°rdup
(
vÆue
)Ë=
NULL
)

688 
msg
->
how_£t
 = 1;

690 
	}
}

693 
	$run_some_byãs_assign
(
run
 *
msg
, c⁄° 
ev_uöt8_t
 * 
vÆue
, 
ev_uöt32_t
 
Àn
)

695 i‡(
msg
->
some_byãs_d©a
 !
NULL
)

696 
	`‰ì
 (
msg
->
some_byãs_d©a
);

697 
msg
->
some_byãs_d©a
 = 
	`mÆloc
(
Àn
);

698 i‡(
msg
->
some_byãs_d©a
 =
NULL
)

700 
msg
->
some_byãs_£t
 = 1;

701 
msg
->
some_byãs_Àngth
 = 
Àn
;

702 
	`mem˝y
(
msg
->
some_byãs_d©a
, 
vÆue
, 
Àn
);

704 
	}
}

707 
	$run_fixed_byãs_assign
(
run
 *
msg
, c⁄° 
ev_uöt8_t
 *
vÆue
)

709 
msg
->
fixed_byãs_£t
 = 1;

710 
	`mem˝y
(
msg
->
fixed_byãs_d©a
, 
vÆue
, 24);

712 
	}
}

715 
	$run_how_gë
(
run
 *
msg
, * *
vÆue
)

717 i‡(
msg
->
how_£t
 != 1)

719 *
vÆue
 = 
msg
->
how_d©a
;

721 
	}
}

724 
	$run_some_byãs_gë
(
run
 *
msg
, 
ev_uöt8_t
 * *
vÆue
, 
ev_uöt32_t
 *
∂í
)

726 i‡(
msg
->
some_byãs_£t
 != 1)

728 *
vÆue
 = 
msg
->
some_byãs_d©a
;

729 *
∂í
 = 
msg
->
some_byãs_Àngth
;

731 
	}
}

734 
	$run_fixed_byãs_gë
(
run
 *
msg
, 
ev_uöt8_t
 **
vÆue
)

736 i‡(
msg
->
fixed_byãs_£t
 != 1)

738 *
vÆue
 = 
msg
->
fixed_byãs_d©a
;

740 
	}
}

743 
	$run_˛ór
(
run
 *
tmp
)

745 i‡(
tmp
->
how_£t
 == 1) {

746 
	`‰ì
 (
tmp
->
how_d©a
);

747 
tmp
->
how_d©a
 = 
NULL
;

748 
tmp
->
how_£t
 = 0;

750 i‡(
tmp
->
some_byãs_£t
 == 1) {

751 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

752 
tmp
->
some_byãs_d©a
 = 
NULL
;

753 
tmp
->
some_byãs_Àngth
 = 0;

754 
tmp
->
some_byãs_£t
 = 0;

756 
tmp
->
fixed_byãs_£t
 = 0;

757 
	`mem£t
(
tmp
->
fixed_byãs_d©a
, 0, (tmp->fixed_bytes_data));

758 
	}
}

761 
	$run_‰ì
(
run
 *
tmp
)

763 i‡(
tmp
->
how_d©a
 !
NULL
)

764 
	`‰ì
 (
tmp
->
how_d©a
);

765 i‡(
tmp
->
some_byãs_d©a
 !
NULL
)

766 
	`‰ì
 (
tmp
->
some_byãs_d©a
);

767 
	`‰ì
(
tmp
);

768 
	}
}

771 
	$run_m¨shÆ
(
evbuf„r
 *
evbuf
, c⁄° 
run
 *
tmp
){

772 
	`evèg_m¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, 
tmp
->
how_d©a
);

773 i‡(
tmp
->
some_byãs_£t
) {

774 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
);

776 
	`evèg_m¨shÆ
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data));

777 
	}
}

780 
	$run_unm¨shÆ
(
run
 *
tmp
, 
evbuf„r
 *
evbuf
)

782 
ev_uöt32_t
 
èg
;

783 
	`EVBUFFER_LENGTH
(
evbuf
) > 0) {

784 i‡(
	`evèg_≥ek
(
evbuf
, &
èg
) == -1)

786 
èg
) {

788 
RUN_HOW
:

790 i‡(
tmp
->
how_£t
)

792 i‡(
	`evèg_unm¨shÆ_°rög
(
evbuf
, 
RUN_HOW
, &
tmp
->
how_d©a
) == -1) {

793 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ how", 
__func__
);

796 
tmp
->
how_£t
 = 1;

799 
RUN_SOME_BYTES
:

801 i‡(
tmp
->
some_byãs_£t
)

803 i‡(
	`evèg_∑ylﬂd_Àngth
(
evbuf
, &
tmp
->
some_byãs_Àngth
) == -1)

805 i‡(
tmp
->
some_byãs_Àngth
 > 
	`EVBUFFER_LENGTH
(
evbuf
))

807 i‡((
tmp
->
some_byãs_d©a
 = 
	`mÆloc
—mp->
some_byãs_Àngth
)Ë=
NULL
)

809 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_SOME_BYTES
, 
tmp
->
some_byãs_d©a
,Åmp->
some_byãs_Àngth
) == -1) {

810 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ some_byãs", 
__func__
);

813 
tmp
->
some_byãs_£t
 = 1;

816 
RUN_FIXED_BYTES
:

818 i‡(
tmp
->
fixed_byãs_£t
)

820 i‡(
	`evèg_unm¨shÆ_fixed
(
evbuf
, 
RUN_FIXED_BYTES
, 
tmp
->
fixed_byãs_d©a
, (tmp->fixed_bytes_data)) == -1) {

821 
	`evít_w¨nx
("%s: faûedÅÿunm¨shÆ fixed_byãs", 
__func__
);

824 
tmp
->
fixed_byãs_£t
 = 1;

832 i‡(
	`run_com∂ëe
(
tmp
) == -1)

835 
	}
}

838 
	$run_com∂ëe
(
run
 *
msg
)

840 i‡(!
msg
->
how_£t
)

842 i‡(!
msg
->
fixed_byãs_£t
)

845 
	}
}

848 
	$evèg_unm¨shÆ_run
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
√ed_èg
, 
run
 *
msg
)

850 
ev_uöt32_t
 
èg
;

851 
ªs
 = -1;

853 
evbuf„r
 *
tmp
 = 
	`evbuf„r_√w
();

855 i‡(
	`evèg_unm¨shÆ
(
evbuf
, &
èg
, 
tmp
Ë=-1 ||Åag !
√ed_èg
)

856 
îr‹
;

858 i‡(
	`run_unm¨shÆ
(
msg
, 
tmp
) == -1)

859 
îr‹
;

861 
ªs
 = 0;

863 
îr‹
:

864 
	`evbuf„r_‰ì
(
tmp
);

865  (
ªs
);

866 
	}
}

869 
	$evèg_m¨shÆ_run
(
evbuf„r
 *
evbuf
, 
ev_uöt32_t
 
èg
, c⁄° 
run
 *
msg
)

871 
evbuf„r
 *
_buf
 = 
	`evbuf„r_√w
();

872 
	`as£π
(
_buf
 !
NULL
);

873 
	`evbuf„r_døö
(
_buf
, -1);

874 
	`run_m¨shÆ
(
_buf
, 
msg
);

875 
	`evèg_m¨shÆ
(
evbuf
, 
èg
, 
	`EVBUFFER_DATA
(
_buf
), 
	`EVBUFFER_LENGTH
(_buf));

876 
	`evbuf„r_‰ì
(
_buf
);

877 
	}
}

	@test/regress.gen.h

5 #i‚de‡
___REGRESS_RPC_


6 
	#___REGRESS_RPC_


	)

8 
	~<evít-c⁄fig.h
>

9 #ifde‡
_EVENT_HAVE_STDINT_H


10 
	~<°döt.h
>

12 
	#EVTAG_HAS
(
msg
, 
membî
Ë((msg)->membî##
_£t
 =1)

	)

13 #ifde‡
__GNUC__


14 
	#EVTAG_ASSIGN
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_assign
)(msg, ##árgs)

	)

15 
	#EVTAG_GET
(
msg
, 
membî
, 
¨gs
...Ë(*(msg)->
ba£
->membî##
_gë
)(msg, ##árgs)

	)

17 
	#EVTAG_ASSIGN
(
msg
, 
membî
, ...Ë(*(msg)->
ba£
->membî##
_assign
)(msg, ## 
__VA_ARGS__
)

	)

18 
	#EVTAG_GET
(
msg
, 
membî
, ...Ë(*(msg)->
ba£
->membî##
_gë
)(msg, ## 
__VA_ARGS__
)

	)

20 
	#EVTAG_ADD
(
msg
, 
membî
Ë(*(msg)->
ba£
->membî##
_add
)(msg)

	)

21 
	#EVTAG_LEN
(
msg
, 
membî
Ë((msg)->membî##
_Àngth
)

	)

23 
	gmsg
;

24 
	gkûl
;

25 
	grun
;

28 
	emsg_
 {

29 
	mMSG_FROM_NAME
=1,

30 
	mMSG_TO_NAME
=2,

31 
	mMSG_ATTACK
=3,

32 
	mMSG_RUN
=4,

33 
	mMSG_MAX_TAGS


37 
	smsg_ac˚ss_
 {

38 (*
	m‰om_«me_assign
)(
	mmsg
 *, const *);

39 (*
	m‰om_«me_gë
)(
	mmsg
 *, * *);

40 (*
	mto_«me_assign
)(
	mmsg
 *, const *);

41 (*
	mto_«me_gë
)(
	mmsg
 *, * *);

42 (*
	m©èck_assign
)(
	mmsg
 *, c⁄° 
	mkûl
*);

43 (*
	m©èck_gë
)(
	mmsg
 *, 
	mkûl
* *);

44 (*
	mrun_assign
)(
	mmsg
 *, , c⁄° 
	mrun
 *);

45 (*
	mrun_gë
)(
	mmsg
 *, , 
	mrun
 * *);

46 
	mrun
 * (*
	mrun_add
)(
	mmsg
 *);

49 
	smsg
 {

50 
msg_ac˚ss_
 *
	mba£
;

52 *
	m‰om_«me_d©a
;

53 *
	mto_«me_d©a
;

54 
kûl
* 
	m©èck_d©a
;

55 
run
 **
	mrun_d©a
;

56 
	mrun_Àngth
;

57 
	mrun_num_Æloˇãd
;

59 
ev_uöt8_t
 
	m‰om_«me_£t
;

60 
ev_uöt8_t
 
	mto_«me_£t
;

61 
ev_uöt8_t
 
	m©èck_£t
;

62 
ev_uöt8_t
 
	mrun_£t
;

65 
msg
 *
msg_√w
();

66 
msg_‰ì
(
msg
 *);

67 
msg_˛ór
(
msg
 *);

68 
msg_m¨shÆ
(
evbuf„r
 *, c⁄° 
msg
 *);

69 
msg_unm¨shÆ
(
msg
 *, 
evbuf„r
 *);

70 
msg_com∂ëe
(
msg
 *);

71 
evèg_m¨shÆ_msg
(
evbuf„r
 *, 
ev_uöt32_t
,

72 c⁄° 
msg
 *);

73 
evèg_unm¨shÆ_msg
(
evbuf„r
 *, 
ev_uöt32_t
,

74 
msg
 *);

75 
msg_‰om_«me_assign
(
msg
 *, const *);

76 
msg_‰om_«me_gë
(
msg
 *, * *);

77 
msg_to_«me_assign
(
msg
 *, const *);

78 
msg_to_«me_gë
(
msg
 *, * *);

79 
msg_©èck_assign
(
msg
 *, c⁄° 
kûl
*);

80 
msg_©èck_gë
(
msg
 *, 
kûl
* *);

81 
msg_run_assign
(
msg
 *, , c⁄° 
run
 *);

82 
msg_run_gë
(
msg
 *, , 
run
 * *);

83 
run
 * 
msg_run_add
(
msg
 *);

87 
	ekûl_
 {

88 
	mKILL_WEAPON
=65825,

89 
	mKILL_ACTION
=2,

90 
	mKILL_HOW_OFTEN
=3,

91 
	mKILL_MAX_TAGS


95 
	skûl_ac˚ss_
 {

96 (*
	mwóp⁄_assign
)(
	mkûl
 *, const *);

97 (*
	mwóp⁄_gë
)(
	mkûl
 *, * *);

98 (*
	ma˘i⁄_assign
)(
	mkûl
 *, const *);

99 (*
	ma˘i⁄_gë
)(
	mkûl
 *, * *);

100 (*
	mhow_o·í_assign
)(
	mkûl
 *, c⁄° 
	mev_uöt32_t
);

101 (*
	mhow_o·í_gë
)(
	mkûl
 *, 
	mev_uöt32_t
 *);

104 
	skûl
 {

105 
kûl_ac˚ss_
 *
	mba£
;

107 *
	mwóp⁄_d©a
;

108 *
	ma˘i⁄_d©a
;

109 
ev_uöt32_t
 
	mhow_o·í_d©a
;

111 
ev_uöt8_t
 
	mwóp⁄_£t
;

112 
ev_uöt8_t
 
	ma˘i⁄_£t
;

113 
ev_uöt8_t
 
	mhow_o·í_£t
;

116 
kûl
 *
kûl_√w
();

117 
kûl_‰ì
(
kûl
 *);

118 
kûl_˛ór
(
kûl
 *);

119 
kûl_m¨shÆ
(
evbuf„r
 *, c⁄° 
kûl
 *);

120 
kûl_unm¨shÆ
(
kûl
 *, 
evbuf„r
 *);

121 
kûl_com∂ëe
(
kûl
 *);

122 
evèg_m¨shÆ_kûl
(
evbuf„r
 *, 
ev_uöt32_t
,

123 c⁄° 
kûl
 *);

124 
evèg_unm¨shÆ_kûl
(
evbuf„r
 *, 
ev_uöt32_t
,

125 
kûl
 *);

126 
kûl_wóp⁄_assign
(
kûl
 *, const *);

127 
kûl_wóp⁄_gë
(
kûl
 *, * *);

128 
kûl_a˘i⁄_assign
(
kûl
 *, const *);

129 
kûl_a˘i⁄_gë
(
kûl
 *, * *);

130 
kûl_how_o·í_assign
(
kûl
 *, c⁄° 
ev_uöt32_t
);

131 
kûl_how_o·í_gë
(
kûl
 *, 
ev_uöt32_t
 *);

135 
	erun_
 {

136 
	mRUN_HOW
=1,

137 
	mRUN_SOME_BYTES
=2,

138 
	mRUN_FIXED_BYTES
=3,

139 
	mRUN_MAX_TAGS


143 
	srun_ac˚ss_
 {

144 (*
	mhow_assign
)(
	mrun
 *, const *);

145 (*
	mhow_gë
)(
	mrun
 *, * *);

146 (*
	msome_byãs_assign
)(
	mrun
 *, c⁄° 
	mev_uöt8_t
 *, 
	mev_uöt32_t
);

147 (*
	msome_byãs_gë
)(
	mrun
 *, 
	mev_uöt8_t
 * *, 
	mev_uöt32_t
 *);

148 (*
	mfixed_byãs_assign
)(
	mrun
 *, c⁄° 
	mev_uöt8_t
 *);

149 (*
	mfixed_byãs_gë
)(
	mrun
 *, 
	mev_uöt8_t
 **);

152 
	srun
 {

153 
run_ac˚ss_
 *
	mba£
;

155 *
	mhow_d©a
;

156 
ev_uöt8_t
 *
	msome_byãs_d©a
;

157 
ev_uöt32_t
 
	msome_byãs_Àngth
;

158 
ev_uöt8_t
 
	mfixed_byãs_d©a
[24];

160 
ev_uöt8_t
 
	mhow_£t
;

161 
ev_uöt8_t
 
	msome_byãs_£t
;

162 
ev_uöt8_t
 
	mfixed_byãs_£t
;

165 
run
 *
run_√w
();

166 
run_‰ì
(
run
 *);

167 
run_˛ór
(
run
 *);

168 
run_m¨shÆ
(
evbuf„r
 *, c⁄° 
run
 *);

169 
run_unm¨shÆ
(
run
 *, 
evbuf„r
 *);

170 
run_com∂ëe
(
run
 *);

171 
evèg_m¨shÆ_run
(
evbuf„r
 *, 
ev_uöt32_t
,

172 c⁄° 
run
 *);

173 
evèg_unm¨shÆ_run
(
evbuf„r
 *, 
ev_uöt32_t
,

174 
run
 *);

175 
run_how_assign
(
run
 *, const *);

176 
run_how_gë
(
run
 *, * *);

177 
run_some_byãs_assign
(
run
 *, c⁄° 
ev_uöt8_t
 *, 
ev_uöt32_t
);

178 
run_some_byãs_gë
(
run
 *, 
ev_uöt8_t
 * *, 
ev_uöt32_t
 *);

179 
run_fixed_byãs_assign
(
run
 *, c⁄° 
ev_uöt8_t
 *);

180 
run_fixed_byãs_gë
(
run
 *, 
ev_uöt8_t
 **);

	@test/regress.h

27 #i‚de‡
_REGRESS_H_


28 
	#_REGRESS_H_


	)

30 #ifde‡
__˝lu•lus


34 
hâp_suôe
();

35 
hâp_basic_ã°
();

37 
Ωc_suôe
();

39 
dns_suôe
();

41 #ifde‡
__˝lu•lus


	@test/regress_dns.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<√töë/ö.h
>

47 
	~<¨∑/öë.h
>

48 
	~<uni°d.h
>

50 #ifde‡
HAVE_NETINET_IN6_H


51 
	~<√töë/ö6.h
>

53 #ifde‡
HAVE_NETDB_H


54 
	~<√tdb.h
>

56 
	~<f˙é.h
>

57 
	~<°dlib.h
>

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~<î∫o.h
>

62 
	~"evít.h
"

63 
	~"evdns.h
"

64 
	~"log.h
"

66 
	gdns_ok
 = 0;

67 
	gdns_îr
 = 0;

69 
dns_suôe
();

72 
	$dns_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

73 *
addªs£s
, *
¨g
)

75 
dns_ok
 = 
dns_îr
 = 0;

77 i‡(
ªsu…
 =
DNS_ERR_TIMEOUT
) {

78 
	`Ârötf
(
°dout
, "[Timed out] ");

79 
dns_îr
 = 
ªsu…
;

80 
out
;

83 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

84 
	`Ârötf
(
°dout
, "[Eº‹ codê%d] ", 
ªsu…
);

85 
out
;

88 
	`Ârötf
(
°dîr
, "ty≥: %d, cou¡: %d,Åé: %d: ", 
ty≥
, 
cou¡
, 
âl
);

90 
ty≥
) {

91 
DNS_IPv6_AAAA
: {

92 #i‡
	`deföed
(
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
Ë&& deföed(
INET6_ADDRSTRLEN
)

93 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

94 
buf
[
INET6_ADDRSTRLEN
+1];

95 
i
;

97 i‡(
âl
 < 0)

98 
out
;

99 
i
 = 0; i < 
cou¡
; ++i) {

100 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[
i
], 
buf
,(buf));

101 i‡(
b
)

102 
	`Ârötf
(
°dîr
, "%†", 
b
);

104 
	`Ârötf
(
°dîr
, "%†", 
	`°ªº‹
(
î∫o
));

109 
DNS_IPv4_A
: {

110 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

111 
i
;

113 i‡(
âl
 < 0)

114 
out
;

115 
i
 = 0; i < 
cou¡
; ++i)

116 
	`Ârötf
(
°dîr
, "%†", 
	`öë_¡ﬂ
(
ö_addrs
[
i
]));

119 
DNS_PTR
:

121 i‡(
cou¡
 != 1)

122 
out
;

124 
	`Ârötf
(
°dîr
, "%†", *(**)
addªs£s
);

127 
out
;

130 
dns_ok
 = 
ty≥
;

132 
out
:

133 
	`evít_lo›exô
(
NULL
);

134 
	}
}

137 
	$dns_gëho°by«me
()

139 
	`Ârötf
(
°dout
, "Simple DNSÑesolve: ");

140 
dns_ok
 = 0;

141 
	`evdns_ªsﬁve_ùv4
("www.m⁄key.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

142 
	`evít_di•©ch
();

144 i‡(
dns_ok
 =
DNS_IPv4_A
) {

145 
	`Ârötf
(
°dout
, "OK\n");

147 
	`Ârötf
(
°dout
, "FAILED\n");

148 
	`exô
(1);

150 
	}
}

153 
	$dns_gëho°by«me6
()

155 
	`Ârötf
(
°dout
, "IPv6 DNSÑesolve: ");

156 
dns_ok
 = 0;

157 
	`evdns_ªsﬁve_ùv6
("www.õtf.‹g", 0, 
dns_gëho°by«me_cb
, 
NULL
);

158 
	`evít_di•©ch
();

160 i‡(
dns_ok
 =
DNS_IPv6_AAAA
) {

161 
	`Ârötf
(
°dout
, "OK\n");

162 } i‡(!
dns_ok
 && 
dns_îr
 =
DNS_ERR_TIMEOUT
) {

163 
	`Ârötf
(
°dout
, "SKIPPED\n");

165 
	`Ârötf
(
°dout
, "FAILED (%d)\n", 
dns_ok
);

166 
	`exô
(1);

168 
	}
}

171 
	$dns_gëho°byaddr
()

173 
ö_addr
 
ö
;

174 
ö
.
s_addr
 = 
	`ht⁄l
(0x7f000001ul);

175 
	`Ârötf
(
°dout
, "SimpleÑeverse DNSÑesolve: ");

176 
dns_ok
 = 0;

177 
	`evdns_ªsﬁve_ªvî£
(&
ö
, 0, 
dns_gëho°by«me_cb
, 
NULL
);

178 
	`evít_di•©ch
();

180 i‡(
dns_ok
 =
DNS_PTR
) {

181 
	`Ârötf
(
°dout
, "OK\n");

183 
	`Ârötf
(
°dout
, "FAILED\n");

184 
	`exô
(1);

186 
	}
}

188 
	gn_£rvî_ª•⁄£s
 = 0;

191 
	$dns_£rvî_ªque°_cb
(
evdns_£rvî_ªque°
 *
ªq
, *
d©a
)

193 
i
, 
r
;

194 c⁄° 
TEST_ARPA
[] = "11.11.168.192.in-addr.arpa";

195 
i
 = 0; i < 
ªq
->
nque°i⁄s
; ++i) {

196 
ö_addr
 
™s
;

197 
™s
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

198 i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_A
 &&

199 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

200 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

201 
r
 = 
	`evdns_£rvî_ªque°_add_a_ª∂y
(
ªq
, "zz.example.com",

202 1, &
™s
.
s_addr
, 12345);

203 i‡(
r
<0)

204 
dns_ok
 = 0;

205 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_AAAA
 &&

206 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

207 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, "zz.example.com")) {

208 
addr6
[17] = "abcdefghijklmnop";

209 
r
 = 
	`evdns_£rvî_ªque°_add_ØØ_ª∂y
(
ªq
, "zz.example.com",

210 1, 
addr6
, 123);

211 i‡(
r
<0)

212 
dns_ok
 = 0;

213 } i‡(
ªq
->
que°i⁄s
[
i
]->
ty≥
 =
EVDNS_TYPE_PTR
 &&

214 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
 =
EVDNS_CLASS_INET
 &&

215 !
	`°rcmp
(
ªq
->
que°i⁄s
[
i
]->
«me
, 
TEST_ARPA
)) {

216 
r
 = 
	`evdns_£rvî_ªque°_add_±r_ª∂y
(
ªq
, 
NULL
, 
TEST_ARPA
,

218 i‡(
r
<0)

219 
dns_ok
 = 0;

221 
	`Ârötf
(
°dout
, "Unexpected question %d %d \"%s\" ",

222 
ªq
->
que°i⁄s
[
i
]->
ty≥
,

223 
ªq
->
que°i⁄s
[
i
]->
dns_que°i⁄_˛ass
,

224 
ªq
->
que°i⁄s
[
i
]->
«me
);

225 
dns_ok
 = 0;

228 
r
 = 
	`evdns_£rvî_ªque°_ª•⁄d
(
ªq
, 0);

229 i‡(
r
<0) {

230 
	`Ârötf
(
°dout
, "Couldn't sendÑeply. ");

231 
dns_ok
 = 0;

233 
	}
}

236 
	$dns_£rvî_gëho°by«me_cb
(
ªsu…
, 
ty≥
, 
cou¡
, 
âl
,

237 *
addªs£s
, *
¨g
)

239 i‡(
ªsu…
 !
DNS_ERR_NONE
) {

240 
	`Ârötf
(
°dout
, "U√x≥˘edÑesu… %d. ", 
ªsu…
);

241 
dns_ok
 = 0;

242 
out
;

244 i‡(
cou¡
 != 1) {

245 
	`Ârötf
(
°dout
, "U√x≥˘edánswî cou¡ %d. ", 
cou¡
);

246 
dns_ok
 = 0;

247 
out
;

249 
ty≥
) {

250 
DNS_IPv4_A
: {

251 
ö_addr
 *
ö_addrs
 = 
addªs£s
;

252 i‡(
ö_addrs
[0].
s_addr
 !
	`ht⁄l
(0xc0a80b0bULË|| 
âl
 != 12345) {

253 
	`Ârötf
(
°dout
, "Bad IPv4Ñesponse \"%s\" %d. ",

254 
	`öë_¡ﬂ
(
ö_addrs
[0]), 
âl
);

255 
dns_ok
 = 0;

256 
out
;

260 
DNS_IPv6_AAAA
: {

261 #i‡
	`deföed
 (
HAVE_STRUCT_IN6_ADDR
Ë&& deföed(
HAVE_INET_NTOP
Ë&& deföed(
INET6_ADDRSTRLEN
)

262 
ö6_addr
 *
ö6_addrs
 = 
addªs£s
;

263 
buf
[
INET6_ADDRSTRLEN
+1];

264 i‡(
	`memcmp
(&
ö6_addrs
[0].
s6_addr
, "abcdefghijklmnop", 16)

265 || 
âl
 != 123) {

266 c⁄° *
b
 = 
	`öë_¡›
(
AF_INET6
, &
ö6_addrs
[0],
buf
,(buf));

267 
	`Ârötf
(
°dout
, "Bad IPv6Ñe•⁄£ \"%s\" %d. ", 
b
, 
âl
);

268 
dns_ok
 = 0;

269 
out
;

274 
DNS_PTR
: {

275 **
addrs
 = 
addªs£s
;

276 i‡(
	`°rcmp
(
addrs
[0], "ZZ.EXAMPLE.COM"Ë|| 
âl
 != 54321) {

277 
	`Ârötf
(
°dout
, "Bad PTRÑesponse \"%s\" %d. ",

278 
addrs
[0], 
âl
);

279 
dns_ok
 = 0;

280 
out
;

285 
	`Ârötf
(
°dout
, "BadÑe•⁄£Åy≥ %d. ", 
ty≥
);

286 
dns_ok
 = 0;

289 
out
:

290 i‡(++
n_£rvî_ª•⁄£s
 == 3) {

291 
	`evít_lo›exô
(
NULL
);

293 
	}
}

296 
	$dns_£rvî
()

298 
sock
;

299 
sockaddr_ö
 
my_addr
;

300 
evdns_£rvî_p‹t
 *
p‹t
;

301 
ö_addr
 
ªsﬁve_addr
;

303 
dns_ok
 = 1;

304 
	`Ârötf
(
°dout
, "DNS server support: ");

308 
	`evdns_«me£rvî_ù_add
("127.0.0.1:35353");

309 i‡(
	`evdns_cou¡_«me£rvîs
() != 1) {

310 
	`Ârötf
(
°dout
, "Couldn't set up.\n");

311 
	`exô
(1);

315 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

316 i‡(
sock
 == -1) {

317 
	`≥º‹
("socket");

318 
	`exô
(1);

320 #ifde‡
WIN32


322 
u_l⁄g
 
n⁄blockög
 = 1;

323 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
n⁄blockög
);

326 
	`f˙é
(
sock
, 
F_SETFL
, 
O_NONBLOCK
);

328 
	`mem£t
(&
my_addr
, 0, (my_addr));

329 
my_addr
.
sö_Ámûy
 = 
AF_INET
;

330 
my_addr
.
sö_p‹t
 = 
	`ht⁄s
(35353);

331 
my_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0x7f000001UL);

332 i‡(
	`böd
(
sock
, (
sockaddr
*)&
my_addr
, (my_addr)) < 0) {

333 
	`≥º‹
("bind");

334 
	`exô
 (1);

336 
p‹t
 = 
	`evdns_add_£rvî_p‹t
(
sock
, 0, 
dns_£rvî_ªque°_cb
, 
NULL
);

339 
	`evdns_ªsﬁve_ùv4
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

340 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

341 
	`evdns_ªsﬁve_ùv6
("zz.exam∂e.com", 
DNS_QUERY_NO_SEARCH
,

342 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

343 
ªsﬁve_addr
.
s_addr
 = 
	`ht⁄l
(0xc0a80b0bUL);

344 
	`evdns_ªsﬁve_ªvî£
(&
ªsﬁve_addr
, 0,

345 
dns_£rvî_gëho°by«me_cb
, 
NULL
);

347 
	`evít_di•©ch
();

349 i‡(
dns_ok
) {

350 
	`Ârötf
(
°dout
, "OK\n");

352 
	`Ârötf
(
°dout
, "FAILED\n");

353 
	`exô
(1);

356 
	`evdns_˛o£_£rvî_p‹t
(
p‹t
);

357 
	`evdns_shutdown
(0);

358 #ifde‡
WIN32


359 
	`˛o£sockë
(
sock
);

361 
	`˛o£
(
sock
);

363 
	}
}

366 
	$dns_suôe
()

368 
	`dns_£rvî
();

370 
	`evdns_öô
();

371 
	`dns_gëho°by«me
();

372 
	`dns_gëho°by«me6
();

373 
	`dns_gëho°byaddr
();

375 
	`evdns_shutdown
(0);

376 
	}
}

	@test/regress_http.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

55 
	~"evít.h
"

56 
	~"evhâp.h
"

57 
	~"log.h
"

58 
	~"hâp-öã∫Æ.h
"

60 
∑ú
[];

61 
ã°_ok
;

63 
evhâp
 *
	ghâp
;

65 
evít_ba£
 *
	gba£
;

67 
hâp_suôe
();

69 
hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

70 
hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

71 
hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

72 
hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

73 
hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
);

75 
evhâp
 *

76 
	$hâp_£tup
(*
µ‹t
, 
evít_ba£
 *
ba£
)

78 
i
;

79 
evhâp
 *
myhâp
;

80 
p‹t
 = -1;

83 
myhâp
 = 
	`evhâp_√w
(
ba£
);

84 
i
 = 0; i < 50; ++i) {

85 i‡(
	`evhâp_böd_sockë
(
myhâp
, "127.0.0.1", 8080 + 
i
) != -1) {

86 
p‹t
 = 8080 + 
i
;

91 i‡(
p‹t
 == -1)

92 
	`evít_îrx
(1, "CouldÇot start web server");

95 
	`evhâp_£t_cb
(
myhâp
, "/ã°", 
hâp_basic_cb
, 
NULL
);

96 
	`evhâp_£t_cb
(
myhâp
, "/chunked", 
hâp_chunked_cb
, 
NULL
);

97 
	`evhâp_£t_cb
(
myhâp
, "/po°ô", 
hâp_po°_cb
, 
NULL
);

98 
	`evhâp_£t_cb
(
myhâp
, "/œrgedñay", 
hâp_œrge_dñay_cb
, 
NULL
);

99 
	`evhâp_£t_cb
(
myhâp
, "/", 
hâp_di•©chî_cb
, 
NULL
);

101 *
µ‹t
 = 
p‹t
;

102  (
myhâp
);

103 
	}
}

105 #i‚de‡
NI_MAXSERV


106 
	#NI_MAXSERV
 1024

	)

110 
	$hâp_c⁄√˘
(c⁄° *
addªss
, 
u_sh‹t
 
p‹t
)

113 #ifde‡
WIN32


114 
ho°ít
 *
he
;

115 
sockaddr_ö
 
sö
;

117 
addröfo
 
ai
, *
aô›
;

118 
°Ω‹t
[
NI_MAXSERV
];

120 
sockaddr
 *
ß
;

121 
¶í
;

122 
fd
;

124 #ifde‡
WIN32


125 i‡(!(
he
 = 
	`gëho°by«me
(
addªss
))) {

126 
	`evít_w¨n
("gethostbyname");

128 
	`mem˝y
(&
sö
.
sö_addr
, 
he
->
h_addr_li°
[0], he->
h_Àngth
);

129 
sö
.
sö_Ámûy
 = 
AF_INET
;

130 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

131 
¶í
 = (
sockaddr_ö
);

132 
ß
 = (
sockaddr
*)&
sö
;

134 
	`mem£t
(&
ai
, 0,  (ai));

135 
ai
.
ai_Ámûy
 = 
AF_INET
;

136 
ai
.
ai_sockty≥
 = 
SOCK_STREAM
;

137 
	`¢¥ötf
(
°Ω‹t
,  (°Ω‹t), "%d", 
p‹t
);

138 i‡(
	`gëaddröfo
(
addªss
, 
°Ω‹t
, &
ai
, &
aô›
) != 0) {

139 
	`evít_w¨n
("getaddrinfo");

142 
ß
 = 
aô›
->
ai_addr
;

143 
¶í
 = 
aô›
->
ai_addæí
;

146 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

147 i‡(
fd
 == -1)

148 
	`evít_îr
(1, "socket failed");

150 i‡(
	`c⁄√˘
(
fd
, 
ß
, 
¶í
) == -1)

151 
	`evít_îr
(1, "connect failed");

153 #i‚de‡
WIN32


154 
	`‰ìaddröfo
(
aô›
);

157  (
fd
);

158 
	}
}

161 
	$hâp_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

163 c⁄° *
wh©
 = "This is funny";

165 
	`evít_debug
(("%s: %s\n", 
__func__
, 
	`EVBUFFER_DATA
(
bev
->
öput
)));

167 i‡(
	`evbuf„r_föd
(
bev
->
öput
,

168 (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

169 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

170 
mesßge_ªad_°©us
 
d⁄e
;

172 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

173 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
bev
->
öput
);

174 i‡(
d⁄e
 !
ALL_DATA_READ
)

175 
out
;

177 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
bev
->
öput
);

178 i‡(
d⁄e
 !
ALL_DATA_READ
)

179 
out
;

181 i‡(
d⁄e
 == 1 &&

182 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

183 "C⁄ã¡-Ty≥"Ë!
NULL
)

184 
ã°_ok
++;

186 
out
:

187 
	`evhâp_ªque°_‰ì
(
ªq
);

188 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

189 i‡(
ba£
)

190 
	`evít_ba£_lo›exô
(
ba£
, 
NULL
);

192 
	`evít_lo›exô
(
NULL
);

194 
	}
}

197 
	$hâp_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

199 i‡(
	`EVBUFFER_LENGTH
(
bev
->
ouçut
) == 0) {

201 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

202 
ã°_ok
++;

204 
	}
}

207 
	$hâp_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

209 
ã°_ok
 = -2;

210 
	`evít_lo›exô
(
NULL
);

211 
	}
}

214 
	$hâp_basic_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

216 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

217 
em±y
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Em±y"Ë!
NULL
;

218 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

219 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

223 c⁄° *
mu…i
 =

224 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,"X-multi");

225 i‡(
mu…i
) {

226 i‡(
	`°rcmp
("END", 
mu…i
 + 
	`°æí
(multi) - 3) == 0)

227 
ã°_ok
++;

228 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Last"))

229 
ã°_ok
++;

234 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Negative"))

235 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
,

239 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Everything is fine",

240 !
em±y
 ? 
evb
 : 
NULL
);

242 
	`evbuf„r_‰ì
(
evb
);

243 
	}
}

245 c⁄°* c⁄° 
	gCHUNKS
[] = {

251 
	schunk_ªq_°©e
 {

252 
evhâp_ªque°
 *
	mªq
;

253 
	mi
;

257 
	$hâp_chunked_åickÀ_cb
(
fd
, 
evíts
, *
¨g
)

259 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

260 
chunk_ªq_°©e
 *
°©e
 = 
¨g
;

261 
timevÆ
 
whí
 = { 0, 0 };

263 
	`evbuf„r_add_¥ötf
(
evb
, "%s", 
CHUNKS
[
°©e
->
i
]);

264 
	`evhâp_£nd_ª∂y_chunk
(
°©e
->
ªq
, 
evb
);

265 
	`evbuf„r_‰ì
(
evb
);

267 i‡(++
°©e
->
i
 < (
CHUNKS
)/(CHUNKS[0])) {

268 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
,

269 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

271 
	`evhâp_£nd_ª∂y_íd
(
°©e
->
ªq
);

272 
	`‰ì
(
°©e
);

274 
	}
}

277 
	$hâp_chunked_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

279 
timevÆ
 
whí
 = { 0, 0 };

280 
chunk_ªq_°©e
 *
°©e
 = 
	`mÆloc
((chunk_req_state));

281 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

283 
	`mem£t
(
°©e
, 0, (
chunk_ªq_°©e
));

284 
°©e
->
ªq
 =Ñeq;

287 
	`evhâp_£nd_ª∂y_°¨t
(
ªq
, 
HTTP_OK
, "Everything is fine");

291 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_chunked_åickÀ_cb
, 
°©e
, &
whí
);

292 
	}
}

295 
	$hâp_com∂ëe_wrôe
(
fd
, 
wh©
, *
¨g
)

297 
buf„ªvít
 *
bev
 = 
¨g
;

298 c⁄° *
hâp_ªque°
 = "host\r\n"

301 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

302 
	}
}

305 
	$hâp_basic_ã°
()

307 
timevÆ
 
tv
;

308 
buf„ªvít
 *
bev
;

309 
fd
;

310 c⁄° *
hâp_ªque°
;

311 
p‹t
 = -1;

313 
ã°_ok
 = 0;

314 
	`Ârötf
(
°dout
, "Testing Basic HTTP Server: ");

316 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

319 i‡(
	`evhâp_böd_sockë
(
hâp
, "127.0.0.1", 
p‹t
 + 1) == -1) {

320 
	`Ârötf
(
°dout
, "FAILED (bind)\n");

321 
	`exô
(1);

324 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

327 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

328 
hâp_îr‹cb
, 
NULL
);

331 
hâp_ªque°
 =

335 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

336 
	`timî˛ór
(&
tv
);

337 
tv
.
tv_u£c
 = 10000;

338 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_com∂ëe_wrôe
, 
bev
, &
tv
);

340 
	`evít_di•©ch
();

342 i‡(
ã°_ok
 != 3) {

343 
	`Ârötf
(
°dout
, "FAILED\n");

344 
	`exô
(1);

348 
	`buf„ªvít_‰ì
(
bev
);

349 
	`EVUTIL_CLOSESOCKET
(
fd
);

351 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
 + 1);

354 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

355 
hâp_îr‹cb
, 
NULL
);

357 
hâp_ªque°
 =

363 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

365 
	`evít_di•©ch
();

367 
	`buf„ªvít_‰ì
(
bev
);

368 
	`EVUTIL_CLOSESOCKET
(
fd
);

370 
	`evhâp_‰ì
(
hâp
);

372 i‡(
ã°_ok
 != 5) {

373 
	`Ârötf
(
°dout
, "FAILED\n");

374 
	`exô
(1);

377 
	`Ârötf
(
°dout
, "OK\n");

378 
	}
}

380 
evhâp_c⁄√˘i⁄
 *
	gdñayed_˛õ¡
;

383 
	$hâp_dñay_ª∂y
(
fd
, 
wh©
, *
¨g
)

385 
evhâp_ªque°
 *
ªq
 = 
¨g
;

387 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
NULL
);

389 ++
ã°_ok
;

390 
	}
}

393 
	$hâp_œrge_dñay_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

395 
timevÆ
 
tv
;

396 
	`timî˛ór
(&
tv
);

397 
tv
.
tv_£c
 = 3;

399 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
hâp_dñay_ª∂y
, 
ªq
, &
tv
);

402 
	`evhâp_c⁄√˘i⁄_Áû
(
dñayed_˛õ¡
, 
EVCON_HTTP_EOF
);

403 
	}
}

405 
hâp_ªque°_d⁄e
(
evhâp_ªque°
 *, *);

406 
hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *, *);

409 
	$hâp_c⁄√˘i⁄_ã°
(
≥rsi°ít
)

411 
p‹t
 = -1;

412 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

413 
evhâp_ªque°
 *
ªq
 = 
NULL
;

415 
ã°_ok
 = 0;

416 
	`Ârötf
(
°dout
, "Testing Request Connection Pipeline %s: ",

417 
≥rsi°ít
 ? "(persistent)" : "");

419 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

421 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

422 i‡(
evc⁄
 =
NULL
) {

423 
	`Ârötf
(
°dout
, "FAILED\n");

424 
	`exô
(1);

432 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

435 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

438 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

439 
	`Ârötf
(
°dout
, "FAILED\n");

440 
	`exô
(1);

443 
	`evít_di•©ch
();

445 i‡(
ã°_ok
 != 1) {

446 
	`Ârötf
(
°dout
, "FAILED\n");

447 
	`exô
(1);

451 
ã°_ok
 = 0;

453 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_d⁄e
, 
NULL
);

456 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

462 i‡(!
≥rsi°ít
)

463 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Connection", "close");

466 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

467 
	`Ârötf
(
°dout
, "FAILED\n");

468 
	`exô
(1);

471 
	`evít_di•©ch
();

474 
ã°_ok
 = 0;

476 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_em±y_d⁄e
, 
NULL
);

479 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Empty", "itis");

482 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

483 
	`Ârötf
(
°dout
, "FAILED\n");

484 
	`exô
(1);

487 
	`evít_di•©ch
();

489 i‡(
ã°_ok
 != 1) {

490 
	`Ârötf
(
°dout
, "FAILED\n");

491 
	`exô
(1);

494 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

495 
	`evhâp_‰ì
(
hâp
);

497 
	`Ârötf
(
°dout
, "OK\n");

498 
	}
}

501 
	$hâp_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

503 c⁄° *
wh©
 = "This is funny";

505 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

506 
	`Ârötf
(
°dîr
, "FAILED\n");

507 
	`exô
(1);

510 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

511 
	`Ârötf
(
°dîr
, "FAILED\n");

512 
	`exô
(1);

515 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

516 
	`Ârötf
(
°dîr
, "FAILED\n");

517 
	`exô
(1);

520 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

521 
	`Ârötf
(
°dîr
, "FAILED\n");

522 
	`exô
(1);

525 
ã°_ok
 = 1;

526 
	`evít_lo›exô
(
NULL
);

527 
	}
}

532 
	$hâp_ªque°_em±y_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

534 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

535 
	`Ârötf
(
°dîr
, "FAILED\n");

536 
	`exô
(1);

539 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "D©e"Ë=
NULL
) {

540 
	`Ârötf
(
°dîr
, "FAILED\n");

541 
	`exô
(1);

545 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Lígth"Ë=
NULL
) {

546 
	`Ârötf
(
°dîr
, "FAILED\n");

547 
	`exô
(1);

550 i‡(
	`°rcmp
(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Content-Length"),

552 
	`Ârötf
(
°dîr
, "FAILED\n");

553 
	`exô
(1);

556 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 0) {

557 
	`Ârötf
(
°dîr
, "FAILED\n");

558 
	`exô
(1);

561 
ã°_ok
 = 1;

562 
	`evít_lo›exô
(
NULL
);

563 
	}
}

570 
	$hâp_di•©chî_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

573 
evbuf„r
 *
evb
 = 
	`evbuf„r_√w
();

574 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

575 
	`evbuf„r_add_¥ötf
(
evb
, "DISPATCHER_TEST");

577 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

579 
	`evbuf„r_‰ì
(
evb
);

580 
	}
}

583 
	$hâp_di•©chî_ã°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

585 c⁄° *
wh©
 = "DISPATCHER_TEST";

587 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

588 
	`Ârötf
(
°dîr
, "FAILED\n");

589 
	`exô
(1);

592 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

593 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

594 
	`exô
(1);

597 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

598 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

599 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

600 
	`exô
(1);

603 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

604 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

605 
	`exô
(1);

608 
ã°_ok
 = 1;

609 
	`evít_lo›exô
(
NULL
);

610 
	}
}

613 
	$hâp_di•©chî_ã°
()

615 
p‹t
 = -1;

616 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

617 
evhâp_ªque°
 *
ªq
 = 
NULL
;

619 
ã°_ok
 = 0;

620 
	`Ârötf
(
°dout
, "Testing HTTP Dispatcher: ");

622 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

624 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

625 i‡(
evc⁄
 =
NULL
) {

626 
	`Ârötf
(
°dout
, "FAILED\n");

627 
	`exô
(1);

631 
	`evhâp_c⁄√˘i⁄_£t_loˇl_addªss
(
evc⁄
, "127.0.0.1");

638 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_di•©chî_ã°_d⁄e
, 
NULL
);

639 i‡(
ªq
 =
NULL
) {

640 
	`Ârötf
(
°dout
, "FAILED\n");

641 
	`exô
(1);

645 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

647 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/?arg=val") == -1) {

648 
	`Ârötf
(
°dout
, "FAILED\n");

649 
	`exô
(1);

652 
	`evít_di•©ch
();

654 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

655 
	`evhâp_‰ì
(
hâp
);

657 i‡(
ã°_ok
 != 1) {

658 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

659 
	`exô
(1);

662 
	`Ârötf
(
°dout
, "OK\n");

663 
	}
}

669 
hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *, *);

671 
	#POST_DATA
 "Okay. NŸÑóŒyÖrötf"

	)

674 
	$hâp_po°_ã°
()

676 
p‹t
 = -1;

677 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

678 
evhâp_ªque°
 *
ªq
 = 
NULL
;

680 
ã°_ok
 = 0;

681 
	`Ârötf
(
°dout
, "Testing HTTP POST Request: ");

683 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

685 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

686 i‡(
evc⁄
 =
NULL
) {

687 
	`Ârötf
(
°dout
, "FAILED\n");

688 
	`exô
(1);

696 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_po°ªque°_d⁄e
, 
NULL
);

697 i‡(
ªq
 =
NULL
) {

698 
	`Ârötf
(
°dout
, "FAILED\n");

699 
	`exô
(1);

703 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

704 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, 
POST_DATA
);

706 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_POST
, "/postit") == -1) {

707 
	`Ârötf
(
°dout
, "FAILED\n");

708 
	`exô
(1);

711 
	`evít_di•©ch
();

713 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

714 
	`evhâp_‰ì
(
hâp
);

716 i‡(
ã°_ok
 != 1) {

717 
	`Ârötf
(
°dout
, "FAILED: %d\n", 
ã°_ok
);

718 
	`exô
(1);

721 
	`Ârötf
(
°dout
, "OK\n");

722 
	}
}

725 
	$hâp_po°_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

727 
evbuf„r
 *
evb
;

728 
	`evít_debug
(("%s: cÆÀd\n", 
__func__
));

731 i‡(
ªq
->
ty≥
 !
EVHTTP_REQ_POST
) {

732 
	`Ârötf
(
°dout
, "FAILED (postÅype)\n");

733 
	`exô
(1);

736 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
POST_DATA
)) {

737 
	`Ârötf
(
°dout
, "FAILED (length: %zu vs %zu)\n",

738 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
POST_DATA
));

739 
	`exô
(1);

742 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
POST_DATA
,

743 
	`°æí
(
POST_DATA
))) {

744 
	`Ârötf
(
°dout
, "FAILED (data)\n");

745 
	`Ârötf
(
°dout
, "GŸ :%s\n", 
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
));

746 
	`Ârötf
(
°dout
, "W™t:%s\n", 
POST_DATA
);

747 
	`exô
(1);

750 
evb
 = 
	`evbuf„r_√w
();

751 
	`evbuf„r_add_¥ötf
(
evb
, "This is funny");

753 
	`evhâp_£nd_ª∂y
(
ªq
, 
HTTP_OK
, "Evîythög i†föe", 
evb
);

755 
	`evbuf„r_‰ì
(
evb
);

756 
	}
}

759 
	$hâp_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

761 c⁄° *
wh©
 = "This is funny";

763 i‡(
ªq
 =
NULL
) {

764 
	`Ârötf
(
°dîr
, "FAILED (timeout)\n");

765 
	`exô
(1);

768 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

770 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

771 
	`exô
(1);

774 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "C⁄ã¡-Ty≥"Ë=
NULL
) {

775 
	`Ârötf
(
°dîr
, "FAILED (contentÅype)\n");

776 
	`exô
(1);

779 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
Ë!
	`°æí
(
wh©
)) {

780 
	`Ârötf
(
°dîr
, "FAILED (length %zu vs %zu)\n",

781 
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
), 
	`°æí
(
wh©
));

782 
	`exô
(1);

785 i‡(
	`memcmp
(
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
), 
wh©
, 
	`°æí
(what)) != 0) {

786 
	`Ârötf
(
°dîr
, "FAILED (data)\n");

787 
	`exô
(1);

790 
ã°_ok
 = 1;

791 
	`evít_lo›exô
(
NULL
);

792 
	}
}

795 
	$hâp_Áûuª_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

797 c⁄° *
wh©
 = "400 Bad Request";

798 i‡(
	`evbuf„r_föd
(
bev
->
öput
, (c⁄° *Ë
wh©
, 
	`°æí
(wh©)Ë!
NULL
) {

799 
ã°_ok
 = 2;

800 
	`buf„ªvít_dißbÀ
(
bev
, 
EV_READ
);

801 
	`evít_lo›exô
(
NULL
);

803 
	}
}

809 
	$hâp_Áûuª_ã°
()

811 
buf„ªvít
 *
bev
;

812 
fd
;

813 c⁄° *
hâp_ªque°
;

814 
p‹t
 = -1;

816 
ã°_ok
 = 0;

817 
	`Ârötf
(
°dout
, "Testing Bad HTTP Request: ");

819 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

821 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

824 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_Áûuª_ªadcb
, 
hâp_wrôecb
,

825 
hâp_îr‹cb
, 
NULL
);

827 
hâp_ªque°
 = "illegalÑequest\r\n";

829 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

831 
	`evít_di•©ch
();

833 
	`buf„ªvít_‰ì
(
bev
);

834 
	`EVUTIL_CLOSESOCKET
(
fd
);

836 
	`evhâp_‰ì
(
hâp
);

838 i‡(
ã°_ok
 != 2) {

839 
	`Ârötf
(
°dout
, "FAILED\n");

840 
	`exô
(1);

843 
	`Ârötf
(
°dout
, "OK\n");

844 
	}
}

847 
	$˛o£_dëe˘_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

849 
timevÆ
 
tv
;

850 i‡(
ªq
 =
NULL
 ||Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

852 
	`Ârötf
(
°dîr
, "FAILED\n");

853 
	`exô
(1);

856 
ã°_ok
 = 1;

858 
	`timî˛ór
(&
tv
);

859 
tv
.
tv_£c
 = 3;

861 
	`evít_lo›exô
(&
tv
);

862 
	}
}

865 
	$˛o£_dëe˘_œunch
(
fd
, 
wh©
, *
¨g
)

867 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

868 
evhâp_ªque°
 *
ªq
;

870 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_d⁄e
, 
NULL
);

873 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

876 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

877 
	`Ârötf
(
°dout
, "FAILED\n");

878 
	`exô
(1);

880 
	}
}

883 
	$˛o£_dëe˘_cb
(
evhâp_ªque°
 *
ªq
, *
¨g
)

885 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
¨g
;

886 
timevÆ
 
tv
;

888 i‡(
ªq
 !
NULL
 &&Ñeq->
ª•⁄£_code
 !
HTTP_OK
) {

890 
	`Ârötf
(
°dîr
, "FAILED\n");

891 
	`exô
(1);

894 
	`timî˛ór
(&
tv
);

895 
tv
.
tv_£c
 = 3;

898 
	`evít_⁄˚
(-1, 
EV_TIMEOUT
, 
˛o£_dëe˘_œunch
, 
evc⁄
, &
tv
);

899 
	}
}

903 
	$hâp_˛o£_dëe˘i⁄
(
wôh_dñay
)

905 
p‹t
 = -1;

906 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

907 
evhâp_ªque°
 *
ªq
 = 
NULL
;

909 
ã°_ok
 = 0;

910 
	`Ârötf
(
°dout
, "Testing Connection Close Detection%s: ",

911 
wôh_dñay
 ? " (with delay)" : "");

913 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

916 
	`evhâp_£t_timeout
(
hâp
, 2);

918 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

919 i‡(
evc⁄
 =
NULL
) {

920 
	`Ârötf
(
°dout
, "FAILED\n");

921 
	`exô
(1);

924 
dñayed_˛õ¡
 = 
evc⁄
;

931 
ªq
 = 
	`evhâp_ªque°_√w
(
˛o£_dëe˘_cb
, 
evc⁄
);

934 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

937 i‡(
	`evhâp_make_ªque°
(
evc⁄
,

938 
ªq
, 
EVHTTP_REQ_GET
, 
wôh_dñay
 ? "/largedelay" : "/test") == -1) {

939 
	`Ârötf
(
°dout
, "FAILED\n");

940 
	`exô
(1);

943 
	`evít_di•©ch
();

945 i‡(
ã°_ok
 != 1) {

946 
	`Ârötf
(
°dout
, "FAILED\n");

947 
	`exô
(1);

951 i‡(
	`TAILQ_FIRST
(&
hâp
->
c⁄√˘i⁄s
Ë!
NULL
) {

952 
	`Ârötf
(
°dout
, "FAILED (left connections)\n");

953 
	`exô
(1);

956 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

957 
	`evhâp_‰ì
(
hâp
);

959 
	`Ârötf
(
°dout
, "OK\n");

960 
	}
}

963 
	$hâp_highp‹t_ã°
()

965 
i
 = -1;

966 
evhâp
 *
myhâp
 = 
NULL
;

968 
	`Ârötf
(
°dout
, "Testing HTTP Server with highÖort: ");

971 
i
 = 0; i < 50; ++i) {

972 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 65535 - 
i
);

973 i‡(
myhâp
 !
NULL
) {

974 
	`Ârötf
(
°dout
, "OK\n");

975 
	`evhâp_‰ì
(
myhâp
);

980 
	`Ârötf
(
°dout
, "FAILED\n");

981 
	`exô
(1);

982 
	}
}

985 
	$hâp_bad_hódî_ã°
()

987 
evkeyvÆq
 
hódîs
;

989 
	`Ârötf
(
°dout
, "Testing HTTP Header filtering: ");

991 
	`TAILQ_INIT
(&
hódîs
);

993 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two") != 0)

994 
Áû
;

996 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\r", "Two") != -1)

997 
Áû
;

998 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two") != 0)

999 
Áû
;

1000 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\r\n Three") != 0)

1001 
Áû
;

1002 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\r", "Two") != -1)

1003 
Áû
;

1004 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One\n", "Two") != -1)

1005 
Áû
;

1006 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\r") != -1)

1007 
Áû
;

1008 i‡(
	`evhâp_add_hódî
(&
hódîs
, "One", "Two\n") != -1)

1009 
Áû
;

1011 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1013 
	`Ârötf
(
°dout
, "OK\n");

1015 
Áû
:

1016 
	`Ârötf
(
°dout
, "FAILED\n");

1017 
	`exô
(1);

1018 
	}
}

1020 
	$vÆid©e_hódî
(

1021 c⁄° 
evkeyvÆq
* 
hódîs
,

1022 c⁄° *
key
, c⁄° *
vÆue
)

1024 c⁄° *
ªÆ_vÆ
 = 
	`evhâp_föd_hódî
(
hódîs
, 
key
);

1025 i‡(
ªÆ_vÆ
 =
NULL
)

1027 i‡(
	`°rcmp
(
ªÆ_vÆ
, 
vÆue
) != 0)

1030 
	}
}

1033 
	$hâp_∑r£_quîy_ã°
()

1035 
evkeyvÆq
 
hódîs
;

1037 
	`Ârötf
(
°dout
, "Testing HTTP queryÖarsing: ");

1039 
	`TAILQ_INIT
(&
hódîs
);

1041 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°", &
hódîs
);

1042 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test") != 0)

1043 
Áû
;

1044 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1046 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°&foo=b¨", &
hódîs
);

1047 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test") != 0)

1048 
Áû
;

1049 i‡(
	`vÆid©e_hódî
(&
hódîs
, "foo", "bar") != 0)

1050 
Áû
;

1051 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1053 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°+foo", &
hódîs
);

1054 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test foo") != 0)

1055 
Áû
;

1056 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1058 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°%0Afoo", &
hódîs
);

1059 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test\nfoo") != 0)

1060 
Áû
;

1061 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1063 
	`evhâp_∑r£_quîy
("hâp://www.ã°.com/?qÒe°%0Dfoo", &
hódîs
);

1064 i‡(
	`vÆid©e_hódî
(&
hódîs
, "q", "test\rfoo") != 0)

1065 
Áû
;

1066 
	`evhâp_˛ór_hódîs
(&
hódîs
);

1068 
	`Ârötf
(
°dout
, "OK\n");

1070 
Áû
:

1071 
	`Ârötf
(
°dout
, "FAILED\n");

1072 
	`exô
(1);

1073 
	}
}

1076 
	$hâp_ba£_ã°
()

1078 
buf„ªvít
 *
bev
;

1079 
fd
;

1080 c⁄° *
hâp_ªque°
;

1081 
p‹t
 = -1;

1083 
ã°_ok
 = 0;

1084 
	`Ârötf
(
°dout
, "Testing HTTP Server Event Base: ");

1086 
ba£
 = 
	`evít_öô
();

1092 
	`evít_öô
();

1094 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
ba£
);

1096 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1099 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1100 
hâp_îr‹cb
, 
NULL
);

1101 
	`buf„ªvít_ba£_£t
(
ba£
, 
bev
);

1103 
hâp_ªque°
 =

1109 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1111 
	`evít_ba£_di•©ch
(
ba£
);

1113 
	`buf„ªvít_‰ì
(
bev
);

1114 
	`EVUTIL_CLOSESOCKET
(
fd
);

1116 
	`evhâp_‰ì
(
hâp
);

1118 
	`evít_ba£_‰ì
(
ba£
);

1119 
ba£
 = 
NULL
;

1121 i‡(
ã°_ok
 != 2) {

1122 
	`Ârötf
(
°dout
, "FAILED\n");

1123 
	`exô
(1);

1126 
	`Ârötf
(
°dout
, "OK\n");

1127 
	}
}

1134 
	$hâp_chunked_ªadcb
(
buf„ªvít
 *
bev
, *
¨g
)

1137 
	}
}

1140 
	$hâp_chunked_îr‹cb
(
buf„ªvít
 *
bev
, 
wh©
, *
¨g
)

1142 i‡(!
ã°_ok
)

1143 
out
;

1145 
ã°_ok
 = -1;

1147 i‡((
wh©
 & 
EVBUFFER_EOF
) != 0) {

1148 
evhâp_ªque°
 *
ªq
 = 
	`evhâp_ªque°_√w
(
NULL
, NULL);

1149 c⁄° *
hódî
;

1150 
mesßge_ªad_°©us
 
d⁄e
;

1152 
ªq
->
köd
 = 
EVHTTP_RESPONSE
;

1153 
d⁄e
 = 
	`evhâp_∑r£_fú°löe
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1154 i‡(
d⁄e
 !
ALL_DATA_READ
)

1155 
out
;

1157 
d⁄e
 = 
	`evhâp_∑r£_hódîs
(
ªq
, 
	`EVBUFFER_INPUT
(
bev
));

1158 i‡(
d⁄e
 !
ALL_DATA_READ
)

1159 
out
;

1161 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Transfer-Encoding");

1162 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "chunked"))

1163 
out
;

1165 
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "Connection");

1166 i‡(
hódî
 =
NULL
 || 
	`°rcmp
(header, "close"))

1167 
out
;

1169 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1170 i‡(
hódî
 =
NULL
)

1171 
out
;

1173 i‡(
	`°rcmp
(
hódî
, "d"))

1174 
out
;

1175 
	`‰ì
((*)
hódî
);

1177 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1179 
out
;

1181 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 13 + 2);

1183 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1184 i‡(
hódî
 =
NULL
)

1185 
out
;

1187 i‡(
	`°rcmp
(
hódî
, "12"))

1188 
out
;

1189 
	`‰ì
((*)
hódî
);

1191 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1193 
out
;

1195 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 18 + 2);

1197 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1198 i‡(
hódî
 =
NULL
)

1199 
out
;

1201 i‡(
	`°rcmp
(
hódî
, "8"))

1202 
out
;

1203 
	`‰ì
((*)
hódî
);

1205 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
	`EVBUFFER_INPUT
(
bev
)),

1207 
out
;

1209 
	`evbuf„r_døö
(
	`EVBUFFER_INPUT
(
bev
), 8 + 2);

1211 
hódî
 = 
	`evbuf„r_ªadlöe
(
	`EVBUFFER_INPUT
(
bev
));

1212 i‡(
hódî
 =
NULL
)

1213 
out
;

1215 i‡(
	`°rcmp
(
hódî
, "0"))

1216 
out
;

1217 
	`‰ì
((*)
hódî
);

1219 
ã°_ok
 = 2;

1222 
out
:

1223 
	`evít_lo›exô
(
NULL
);

1224 
	}
}

1227 
	$hâp_chunked_wrôecb
(
buf„ªvít
 *
bev
, *
¨g
)

1229 i‡(
	`EVBUFFER_LENGTH
(
	`EVBUFFER_OUTPUT
(
bev
)) == 0) {

1231 
	`buf„ªvít_íabÀ
(
bev
, 
EV_READ
);

1232 
ã°_ok
++;

1234 
	}
}

1237 
	$hâp_chunked_ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1239 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

1240 
	`Ârötf
(
°dîr
, "FAILED\n");

1241 
	`exô
(1);

1244 i‡(
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
,

1245 "Tøns„r-Encodög"Ë=
NULL
) {

1246 
	`Ârötf
(
°dîr
, "FAILED\n");

1247 
	`exô
(1);

1250 i‡(
	`EVBUFFER_LENGTH
(
ªq
->
öput_buf„r
) != 13 + 18 + 8) {

1251 
	`Ârötf
(
°dîr
, "FAILED\n");

1252 
	`exô
(1);

1255 i‡(
	`°∫cmp
((*)
	`EVBUFFER_DATA
(
ªq
->
öput_buf„r
),

1258 
	`Ârötf
(
°dîr
, "FAILED\n");

1259 
	`exô
(1);

1262 
ã°_ok
 = 1;

1263 
	`evít_lo›exô
(
NULL
);

1264 
	}
}

1267 
	$hâp_chunked_ã°
()

1269 
buf„ªvít
 *
bev
;

1270 
fd
;

1271 c⁄° *
hâp_ªque°
;

1272 
p‹t
 = -1;

1273 
timevÆ
 
tv_°¨t
, 
tv_íd
;

1274 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1275 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1276 
i
;

1278 
ã°_ok
 = 0;

1279 
	`Ârötf
(
°dout
, "Testing Chunked HTTP Reply: ");

1281 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1283 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1286 
bev
 = 
	`buf„ªvít_√w
(
fd
,

1287 
hâp_chunked_ªadcb
, 
hâp_chunked_wrôecb
,

1288 
hâp_chunked_îr‹cb
, 
NULL
);

1290 
hâp_ªque°
 =

1296 
	`buf„ªvít_wrôe
(
bev
, 
hâp_ªque°
, 
	`°æí
(http_request));

1298 
	`evutû_gëtimeofday
(&
tv_°¨t
, 
NULL
);

1300 
	`evít_di•©ch
();

1302 
	`evutû_gëtimeofday
(&
tv_íd
, 
NULL
);

1303 
	`evutû_timîsub
(&
tv_íd
, &
tv_°¨t
, &tv_end);

1305 i‡(
tv_íd
.
tv_£c
 >= 1) {

1306 
	`Ârötf
(
°dout
, "FAILED (time)\n");

1307 
	`exô
 (1);

1311 i‡(
ã°_ok
 != 2) {

1312 
	`Ârötf
(
°dout
, "FAILED\n");

1313 
	`exô
(1);

1317 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1318 i‡(
evc⁄
 =
NULL
) {

1319 
	`Ârötf
(
°dout
, "FAILED\n");

1320 
	`exô
(1);

1324 
i
 = 0; i < 2; i++) {

1325 
ã°_ok
 = 0;

1326 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_chunked_ªque°_d⁄e
, 
NULL
);

1329 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

1332 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

1333 
EVHTTP_REQ_GET
, "/chunked") == -1) {

1334 
	`Ârötf
(
°dout
, "FAILED\n");

1335 
	`exô
(1);

1338 
	`evít_di•©ch
();

1340 i‡(
ã°_ok
 != 1) {

1341 
	`Ârötf
(
°dout
, "FAILED\n");

1342 
	`exô
(1);

1346 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

1347 
	`evhâp_‰ì
(
hâp
);

1349 
	`Ârötf
(
°dout
, "OK\n");

1350 
	}
}

1353 
	$hâp_mu…i_löe_hódî_ã°
()

1355 
buf„ªvít
 *
bev
;

1356 
fd
;

1357 c⁄° *
hâp_°¨t_ªque°
;

1358 
p‹t
 = -1;

1360 
ã°_ok
 = 0;

1361 
	`Ârötf
(
°dout
, "Testing HTTP Server with multiÜine: ");

1363 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1365 
fd
 = 
	`hâp_c⁄√˘
("127.0.0.1", 
p‹t
);

1368 
bev
 = 
	`buf„ªvít_√w
(
fd
, 
hâp_ªadcb
, 
hâp_wrôecb
,

1369 
hâp_îr‹cb
, 
NULL
);

1371 
hâp_°¨t_ªque°
 =

1381 
	`buf„ªvít_wrôe
(
bev
, 
hâp_°¨t_ªque°
, 
	`°æí
(http_start_request));

1383 
	`evít_di•©ch
();

1385 
	`buf„ªvít_‰ì
(
bev
);

1386 
	`EVUTIL_CLOSESOCKET
(
fd
);

1388 
	`evhâp_‰ì
(
hâp
);

1390 i‡(
ã°_ok
 != 4) {

1391 
	`Ârötf
(
°dout
, "FAILED\n");

1392 
	`exô
(1);

1395 
	`Ârötf
(
°dout
, "OK\n");

1396 
	}
}

1399 
	$hâp_ªque°_bad
(
evhâp_ªque°
 *
ªq
, *
¨g
)

1401 i‡(
ªq
 !
NULL
) {

1402 
	`Ârötf
(
°dîr
, "FAILED\n");

1403 
	`exô
(1);

1406 
ã°_ok
 = 1;

1407 
	`evít_lo›exô
(
NULL
);

1408 
	}
}

1411 
	$hâp_√g©ive_c⁄ã¡_Àngth_ã°
()

1413 
p‹t
 = -1;

1414 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

1415 
evhâp_ªque°
 *
ªq
 = 
NULL
;

1417 
ã°_ok
 = 0;

1418 
	`Ârötf
(
°dout
, "Testing HTTP Negative Content Length: ");

1420 
hâp
 = 
	`hâp_£tup
(&
p‹t
, 
NULL
);

1422 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

1423 i‡(
evc⁄
 =
NULL
) {

1424 
	`Ârötf
(
°dout
, "FAILED\n");

1425 
	`exô
(1);

1433 
ªq
 = 
	`evhâp_ªque°_√w
(
hâp_ªque°_bad
, 
NULL
);

1436 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Negative", "makeitso");

1439 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
, 
EVHTTP_REQ_GET
, "/test") == -1) {

1440 
	`Ârötf
(
°dout
, "FAILED\n");

1441 
	`exô
(1);

1444 
	`evít_di•©ch
();

1446 
	`evhâp_‰ì
(
hâp
);

1448 i‡(
ã°_ok
 != 1) {

1449 
	`Ârötf
(
°dout
, "FAILED\n");

1450 
	`exô
(1);

1453 
	`Ârötf
(
°dout
, "OK\n");

1454 
	}
}

1457 
	$hâp_suôe
()

1459 
	`hâp_ba£_ã°
();

1460 
	`hâp_bad_hódî_ã°
();

1461 
	`hâp_∑r£_quîy_ã°
();

1462 
	`hâp_basic_ã°
();

1463 
	`hâp_c⁄√˘i⁄_ã°
(0 );

1464 
	`hâp_c⁄√˘i⁄_ã°
(1 );

1465 
	`hâp_˛o£_dëe˘i⁄
(0 );

1466 
	`hâp_˛o£_dëe˘i⁄
(1 );

1467 
	`hâp_po°_ã°
();

1468 
	`hâp_Áûuª_ã°
();

1469 
	`hâp_highp‹t_ã°
();

1470 
	`hâp_di•©chî_ã°
();

1472 
	`hâp_mu…i_löe_hódî_ã°
();

1473 
	`hâp_√g©ive_c⁄ã¡_Àngth_ã°
();

1475 
	`hâp_chunked_ã°
();

1476 
	}
}

	@test/regress_rpc.c

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<wödows.h
>

33 #ifde‡
HAVE_CONFIG_H


34 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 #ifde‡
HAVE_SYS_TIME_H


40 
	~<sys/time.h
>

42 
	~<sys/queue.h
>

43 #i‚de‡
WIN32


44 
	~<sys/sockë.h
>

45 
	~<sig«l.h
>

46 
	~<uni°d.h
>

47 
	~<√tdb.h
>

49 
	~<f˙é.h
>

50 
	~<°dlib.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

54 
	~<as£π.h
>

56 
	~"evít.h
"

57 
	~"evhâp.h
"

58 
	~"log.h
"

59 
	~"evΩc.h
"

61 
	~"ªgªss.gí.h
"

63 
Ωc_suôe
();

65 
ã°_ok
;

67 
evhâp
 *

68 
	$hâp_£tup
(*
µ‹t
)

70 
i
;

71 
evhâp
 *
myhâp
;

72 
p‹t
 = -1;

75 
i
 = 0; i < 50; ++i) {

76 
myhâp
 = 
	`evhâp_°¨t
("127.0.0.1", 8080 + 
i
);

77 i‡(
myhâp
 !
NULL
) {

78 
p‹t
 = 8080 + 
i
;

83 i‡(
p‹t
 == -1)

84 
	`evít_îrx
(1, "CouldÇot start web server");

86 *
µ‹t
 = 
p‹t
;

87  (
myhâp
);

88 
	}
}

90 
EVRPC_HEADER
(
Mesßge
, 
msg
, 
kûl
);

91 
EVRPC_HEADER
(
NevîRïly
, 
msg
, 
kûl
);

93 
EVRPC_GENERATE
(
Mesßge
, 
msg
, 
kûl
);

94 
EVRPC_GENERATE
(
NevîRïly
, 
msg
, 
kûl
);

96 
	g√ed_öput_hook
 = 0;

97 
	g√ed_ouçut_hook
 = 0;

100 
MesßgeCb
(
EVRPC_STRUCT
(
Mesßge
)* 
Ωc
, *
¨g
)

102 
kûl
* 
	gkûl_ª∂y
 = 
Ωc
->
ª∂y
;

104 i‡(
	g√ed_öput_hook
) {

105 
evhâp_ªque°
* 
	gªq
 = 
EVRPC_REQUEST_HTTP
(
Ωc
);

106 c⁄° *
	ghódî
 = 
evhâp_föd_hódî
(

107 
ªq
->
öput_hódîs
, "X-Hook");

108 
as£π
(
°rcmp
(
hódî
, "input") == 0);

112 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
wóp⁄
, "dagger");

113 
EVTAG_ASSIGN
(
kûl_ª∂y
, 
a˘i⁄
, "waveároundÜikeán idiot");

116 
EVRPC_REQUEST_DONE
(
Ωc
);

119 
EVRPC_STRUCT
(
NevîRïly
Ë*
	gßved_Ωc
;

122 
NevîRïlyCb
(
EVRPC_STRUCT
(
NevîRïly
)* 
Ωc
, *
¨g
)

124 
	gã°_ok
 += 1;

125 
	gßved_Ωc
 = 
Ωc
;

129 
	$Ωc_£tup
(
evhâp
 **
phâp
, *
µ‹t
, 
evΩc_ba£
 **
pba£
)

131 
p‹t
;

132 
evhâp
 *
hâp
 = 
NULL
;

133 
evΩc_ba£
 *
ba£
 = 
NULL
;

135 
hâp
 = 
	`hâp_£tup
(&
p‹t
);

136 
ba£
 = 
	`evΩc_öô
(
hâp
);

138 
	`EVRPC_REGISTER
(
ba£
, 
Mesßge
, 
msg
, 
kûl
, 
MesßgeCb
, 
NULL
);

139 
	`EVRPC_REGISTER
(
ba£
, 
NevîRïly
, 
msg
, 
kûl
, 
NevîRïlyCb
, 
NULL
);

141 *
phâp
 = 
hâp
;

142 *
µ‹t
 = 
p‹t
;

143 *
pba£
 = 
ba£
;

145 
√ed_öput_hook
 = 0;

146 
√ed_ouçut_hook
 = 0;

147 
	}
}

150 
	$Ωc_ã¨down
(
evΩc_ba£
 *
ba£
)

152 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
Mesßge
) == 0);

153 
	`as£π
(
	`EVRPC_UNREGISTER
(
ba£
, 
NevîRïly
) == 0);

155 
	`evΩc_‰ì
(
ba£
);

156 
	}
}

159 
	$Ωc_po°ªque°_Áûuª
(
evhâp_ªque°
 *
ªq
, *
¨g
)

161 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_SERVUNAVAIL
) {

163 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

164 
	`exô
(1);

167 
ã°_ok
 = 1;

168 
	`evít_lo›exô
(
NULL
);

169 
	}
}

176 
	$Ωc_basic_ã°
()

178 
p‹t
;

179 
evhâp
 *
hâp
 = 
NULL
;

180 
evΩc_ba£
 *
ba£
 = 
NULL
;

181 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

182 
evhâp_ªque°
 *
ªq
 = 
NULL
;

184 
	`Ârötf
(
°dout
, "Testing Basic RPC Support: ");

186 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

188 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

189 i‡(
evc⁄
 =
NULL
) {

190 
	`Ârötf
(
°dout
, "FAILED\n");

191 
	`exô
(1);

199 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_Áûuª
, 
NULL
);

200 i‡(
ªq
 =
NULL
) {

201 
	`Ârötf
(
°dout
, "FAILED\n");

202 
	`exô
(1);

206 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

207 
	`evbuf„r_add_¥ötf
(
ªq
->
ouçut_buf„r
, "Some Nonsense");

209 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

210 
EVHTTP_REQ_POST
,

212 
	`Ârötf
(
°dout
, "FAILED\n");

213 
	`exô
(1);

216 
ã°_ok
 = 0;

218 
	`evít_di•©ch
();

220 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

222 
	`Ωc_ã¨down
(
ba£
);

224 i‡(
ã°_ok
 != 1) {

225 
	`Ârötf
(
°dout
, "FAILED\n");

226 
	`exô
(1);

229 
	`Ârötf
(
°dout
, "OK\n");

231 
	`evhâp_‰ì
(
hâp
);

232 
	}
}

235 
	$Ωc_po°ªque°_d⁄e
(
evhâp_ªque°
 *
ªq
, *
¨g
)

237 
kûl
* 
kûl_ª∂y
 = 
NULL
;

239 i‡(
ªq
->
ª•⁄£_code
 !
HTTP_OK
) {

241 
	`Ârötf
(
°dîr
, "FAILED (response code)\n");

242 
	`exô
(1);

245 
kûl_ª∂y
 = 
	`kûl_√w
();

247 i‡((
	`kûl_unm¨shÆ
(
kûl_ª∂y
, 
ªq
->
öput_buf„r
)) == -1) {

248 
	`Ârötf
(
°dîr
, "FAILED (unmarshal)\n");

249 
	`exô
(1);

252 
	`kûl_‰ì
(
kûl_ª∂y
);

254 
ã°_ok
 = 1;

255 
	`evít_lo›exô
(
NULL
);

256 
	}
}

259 
	$Ωc_basic_mesßge
()

261 
p‹t
;

262 
evhâp
 *
hâp
 = 
NULL
;

263 
evΩc_ba£
 *
ba£
 = 
NULL
;

264 
evhâp_c⁄√˘i⁄
 *
evc⁄
 = 
NULL
;

265 
evhâp_ªque°
 *
ªq
 = 
NULL
;

266 
msg
 *msg;

268 
	`Ârötf
(
°dout
, "Testing Good RPC Post: ");

270 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

272 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

273 i‡(
evc⁄
 =
NULL
) {

274 
	`Ârötf
(
°dout
, "FAILED\n");

275 
	`exô
(1);

283 
ªq
 = 
	`evhâp_ªque°_√w
(
Ωc_po°ªque°_d⁄e
, 
NULL
);

284 i‡(
ªq
 =
NULL
) {

285 
	`Ârötf
(
°dout
, "FAILED\n");

286 
	`exô
(1);

290 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "Host", "somehost");

293 
msg
 = 
	`msg_√w
();

294 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

295 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

296 
	`msg_m¨shÆ
(
ªq
->
ouçut_buf„r
, 
msg
);

297 
	`msg_‰ì
(
msg
);

299 i‡(
	`evhâp_make_ªque°
(
evc⁄
, 
ªq
,

300 
EVHTTP_REQ_POST
,

302 
	`Ârötf
(
°dout
, "FAILED\n");

303 
	`exô
(1);

306 
ã°_ok
 = 0;

308 
	`evít_di•©ch
();

310 
	`evhâp_c⁄√˘i⁄_‰ì
(
evc⁄
);

312 
	`Ωc_ã¨down
(
ba£
);

314 i‡(
ã°_ok
 != 1) {

315 
	`Ârötf
(
°dout
, "FAILED\n");

316 
	`exô
(1);

319 
	`Ârötf
(
°dout
, "OK\n");

321 
	`evhâp_‰ì
(
hâp
);

322 
	}
}

324 
evΩc_poﬁ
 *

325 
	$Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
)

327 
evhâp_c⁄√˘i⁄
 *
evc⁄
;

328 
evΩc_poﬁ
 *
poﬁ
;

330 
poﬁ
 = 
	`evΩc_poﬁ_√w
(
NULL
);

331 
	`as£π
(
poﬁ
 !
NULL
);

333 
evc⁄
 = 
	`evhâp_c⁄√˘i⁄_√w
("127.0.0.1", 
p‹t
);

334 
	`as£π
(
evc⁄
 !
NULL
);

336 
	`evΩc_poﬁ_add_c⁄√˘i⁄
(
poﬁ
, 
evc⁄
);

338  (
poﬁ
);

339 
	}
}

342 
	$GŸKûlCb
(
evΩc_°©us
 *
°©us
,

343 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

345 *
wóp⁄
;

346 *
a˘i⁄
;

348 i‡(
√ed_ouçut_hook
) {

349 
evhâp_ªque°
 *
ªq
 = 
°©us
->
hâp_ªq
;

350 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(

351 
ªq
->
öput_hódîs
, "X-Pool-Hook");

352 
	`as£π
(
	`°rcmp
(
hódî
, "ran") == 0);

355 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

356 
d⁄e
;

358 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

359 
	`Ârötf
(
°dîr
, "get weapon\n");

360 
d⁄e
;

362 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

363 
	`Ârötf
(
°dîr
, "getáction\n");

364 
d⁄e
;

367 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

368 
d⁄e
;

370 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

371 
d⁄e
;

373 
ã°_ok
 += 1;

375 
d⁄e
:

376 
	`evít_lo›exô
(
NULL
);

377 
	}
}

380 
	$GŸKûlCbTwo
(
evΩc_°©us
 *
°©us
,

381 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

383 *
wóp⁄
;

384 *
a˘i⁄
;

386 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_NONE
)

387 
d⁄e
;

389 i‡(
	`EVTAG_GET
(
kûl
, 
wóp⁄
, &weapon) == -1) {

390 
	`Ârötf
(
°dîr
, "get weapon\n");

391 
d⁄e
;

393 i‡(
	`EVTAG_GET
(
kûl
, 
a˘i⁄
, &action) == -1) {

394 
	`Ârötf
(
°dîr
, "getáction\n");

395 
d⁄e
;

398 i‡(
	`°rcmp
(
wóp⁄
, "dagger"))

399 
d⁄e
;

401 i‡(
	`°rcmp
(
a˘i⁄
, "waveároundÜikeán idiot"))

402 
d⁄e
;

404 
ã°_ok
 += 1;

406 
d⁄e
:

407 i‡(
ã°_ok
 == 2)

408 
	`evít_lo›exô
(
NULL
);

409 
	}
}

412 
	$Ωc_hook_add_hódî
(
evhâp_ªque°
 *
ªq
,

413 
evbuf„r
 *
evbuf
, *
¨g
)

415 c⁄° *
hook_ty≥
 = 
¨g
;

416 i‡(
	`°rcmp
("öput", 
hook_ty≥
) == 0)

417 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Hook", 
hook_ty≥
);

419 
	`evhâp_add_hódî
(
ªq
->
ouçut_hódîs
, "X-Hook", 
hook_ty≥
);

421 
	}
}

424 
	$Ωc_hook_ªmove_hódî
(
evhâp_ªque°
 *
ªq
,

425 
evbuf„r
 *
evbuf
, *
¨g
)

427 c⁄° *
hódî
 = 
	`evhâp_föd_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

428 
	`as£π
(
hódî
 !
NULL
);

429 
	`as£π
(
	`°rcmp
(
hódî
, 
¨g
) == 0);

430 
	`evhâp_ªmove_hódî
(
ªq
->
öput_hódîs
, "X-Hook");

431 
	`evhâp_add_hódî
(
ªq
->
öput_hódîs
, "X-Pool-Hook", "ran");

434 
	}
}

437 
	$Ωc_basic_˛õ¡
()

439 
p‹t
;

440 
evhâp
 *
hâp
 = 
NULL
;

441 
evΩc_ba£
 *
ba£
 = 
NULL
;

442 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

443 
msg
 *msg;

444 
kûl
 *kill;

446 
	`Ârötf
(
°dout
, "Testing RPC Client: ");

448 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

450 
√ed_öput_hook
 = 1;

451 
√ed_ouçut_hook
 = 1;

453 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_INPUT
, 
Ωc_hook_add_hódî
, (*)"input")

454 !
NULL
);

455 
	`as£π
(
	`evΩc_add_hook
(
ba£
, 
EVRPC_OUTPUT
, 
Ωc_hook_add_hódî
, (*)"output")

456 !
NULL
);

458 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

460 
	`as£π
(
	`evΩc_add_hook
(
poﬁ
, 
EVRPC_INPUT
, 
Ωc_hook_ªmove_hódî
, (*)"output"));

463 
msg
 = 
	`msg_√w
();

464 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

465 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

467 
kûl
 = 
	`kûl_√w
();

469 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

471 
ã°_ok
 = 0;

473 
	`evít_di•©ch
();

475 i‡(
ã°_ok
 != 1) {

476 
	`Ârötf
(
°dout
, "FAILED (1)\n");

477 
	`exô
(1);

481 
	`kûl_˛ór
(
kûl
);

483 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl
, 
GŸKûlCb
, 
NULL
);

485 
	`evít_di•©ch
();

487 
	`Ωc_ã¨down
(
ba£
);

489 i‡(
ã°_ok
 != 2) {

490 
	`Ârötf
(
°dout
, "FAILED (2)\n");

491 
	`exô
(1);

494 
	`Ârötf
(
°dout
, "OK\n");

496 
	`msg_‰ì
(
msg
);

497 
	`kûl_‰ì
(
kûl
);

499 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

500 
	`evhâp_‰ì
(
hâp
);

501 
	}
}

508 
	$Ωc_basic_queued_˛õ¡
()

510 
p‹t
;

511 
evhâp
 *
hâp
 = 
NULL
;

512 
evΩc_ba£
 *
ba£
 = 
NULL
;

513 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

514 
msg
 *msg;

515 
kûl
 *
kûl_⁄e
, *
kûl_two
;

517 
	`Ârötf
(
°dout
, "Testing RPC (Queued) Client: ");

519 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

521 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

524 
msg
 = 
	`msg_√w
();

525 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

526 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

528 
kûl_⁄e
 = 
	`kûl_√w
();

529 
kûl_two
 = 
	`kûl_√w
();

531 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_⁄e
, 
GŸKûlCbTwo
, 
NULL
);

532 
	`EVRPC_MAKE_REQUEST
(
Mesßge
, 
poﬁ
, 
msg
, 
kûl_two
, 
GŸKûlCb
, 
NULL
);

534 
ã°_ok
 = 0;

536 
	`evít_di•©ch
();

538 
	`Ωc_ã¨down
(
ba£
);

540 i‡(
ã°_ok
 != 2) {

541 
	`Ârötf
(
°dout
, "FAILED (1)\n");

542 
	`exô
(1);

545 
	`Ârötf
(
°dout
, "OK\n");

547 
	`msg_‰ì
(
msg
);

548 
	`kûl_‰ì
(
kûl_⁄e
);

549 
	`kûl_‰ì
(
kûl_two
);

551 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

552 
	`evhâp_‰ì
(
hâp
);

553 
	}
}

556 
	$GŸEº‹Cb
(
evΩc_°©us
 *
°©us
,

557 
msg
 *msg, 
kûl
 *kûl, *
¨g
)

559 i‡(
°©us
->
îr‹
 !
EVRPC_STATUS_ERR_TIMEOUT
)

560 
d⁄e
;

563 i‡(
	`kûl_com∂ëe
(
kûl
) == 0)

564 
d⁄e
;

566 
ã°_ok
 += 1;

568 
d⁄e
:

569 
	`evít_lo›exô
(
NULL
);

570 
	}
}

573 
	$Ωc_˛õ¡_timeout
()

575 
p‹t
;

576 
evhâp
 *
hâp
 = 
NULL
;

577 
evΩc_ba£
 *
ba£
 = 
NULL
;

578 
evΩc_poﬁ
 *
poﬁ
 = 
NULL
;

579 
msg
 *msg;

580 
kûl
 *kill;

582 
	`Ârötf
(
°dout
, "Testing RPC Client Timeout: ");

584 
	`Ωc_£tup
(&
hâp
, &
p‹t
, &
ba£
);

586 
poﬁ
 = 
	`Ωc_poﬁ_wôh_c⁄√˘i⁄
(
p‹t
);

589 
	`evΩc_poﬁ_£t_timeout
(
poﬁ
, 5);

592 
msg
 = 
	`msg_√w
();

593 
	`EVTAG_ASSIGN
(
msg
, 
‰om_«me
, "niels");

594 
	`EVTAG_ASSIGN
(
msg
, 
to_«me
, "tester");

596 
kûl
 = 
	`kûl_√w
();

598 
	`EVRPC_MAKE_REQUEST
(
NevîRïly
, 
poﬁ
, 
msg
, 
kûl
, 
GŸEº‹Cb
, 
NULL
);

600 
ã°_ok
 = 0;

602 
	`evít_di•©ch
();

605 
	`EVRPC_REQUEST_DONE
(
ßved_Ωc
);

607 
	`Ωc_ã¨down
(
ba£
);

609 i‡(
ã°_ok
 != 2) {

610 
	`Ârötf
(
°dout
, "FAILED (1)\n");

611 
	`exô
(1);

614 
	`Ârötf
(
°dout
, "OK\n");

616 
	`msg_‰ì
(
msg
);

617 
	`kûl_‰ì
(
kûl
);

619 
	`evΩc_poﬁ_‰ì
(
poﬁ
);

620 
	`evhâp_‰ì
(
hâp
);

621 
	}
}

624 
	$Ωc_suôe
()

626 
	`Ωc_basic_ã°
();

627 
	`Ωc_basic_mesßge
();

628 
	`Ωc_basic_˛õ¡
();

629 
	`Ωc_basic_queued_˛õ¡
();

630 
	`Ωc_˛õ¡_timeout
();

631 
	}
}

	@test/test-eof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 
	~<î∫o.h
>

30 
	~<evít.h
>

31 
	~<evutû.h
>

33 
	gã°_okay
 = 1;

34 
	gˇŒed
 = 0;

37 
	$ªad_cb
(
fd
, 
evít
, *
¨g
)

39 
buf
[256];

40 
Àn
;

42 
Àn
 = 
	`ªcv
(
fd
, 
buf
, (buf), 0);

44 
	`¥ötf
("%s:Ñód %d%s\n", 
__func__
,

45 
Àn
,Üen ? "" : " - means EOF");

47 i‡(
Àn
) {

48 i‡(!
ˇŒed
)

49 
	`evít_add
(
¨g
, 
NULL
);

50 } i‡(
ˇŒed
 == 1)

51 
ã°_okay
 = 0;

53 
ˇŒed
++;

54 
	}
}

56 #i‚de‡
SHUT_WR


57 
	#SHUT_WR
 1

	)

61 
	$maö
 (
¨gc
, **
¨gv
)

63 
evít
 
ev
;

64 c⁄° *
ã°
 = "test string";

65 
∑ú
[2];

67 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

71 
	`£nd
(
∑ú
[0], 
ã°
, 
	`°æí
(test)+1, 0);

72 
	`shutdown
(
∑ú
[0], 
SHUT_WR
);

75 
	`evít_öô
();

78 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_READ
, 
ªad_cb
, &ev);

80 
	`evít_add
(&
ev
, 
NULL
);

82 
	`evít_di•©ch
();

84  (
ã°_okay
);

85 
	}
}

	@test/test-init.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
WIN32


10 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 #ifde‡
HAVE_UNISTD_H


26 
	~<uni°d.h
>

28 
	~<î∫o.h
>

30 
	~<evít.h
>

33 
	$maö
(
¨gc
, **
¨gv
)

36 
	`evít_öô
();

39 
	}
}

	@test/test-time.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

9 #ifde‡
WIN32


10 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 
	~<f˙é.h
>

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 #ifde‡
HAVE_UNISTD_H


23 
	~<uni°d.h
>

25 
	~<î∫o.h
>

27 
	~<evít.h
>

29 
	gˇŒed
 = 0;

31 
	#NEVENT
 20000

	)

33 
evít
 *
	gev
[
NEVENT
];

36 
	$ønd_öt
(
n
)

38 #ifde‡
WIN32


39  ()(
	`ønd
(Ë* 
n
);

41  ()(
	`øndom
(Ë% 
n
);

43 
	}
}

46 
	$time_cb
(
fd
, 
evít
, *
¨g
)

48 
timevÆ
 
tv
;

49 
i
, 
j
;

51 
ˇŒed
++;

53 i‡(
ˇŒed
 < 10*
NEVENT
) {

54 
i
 = 0; i < 10; i++) {

55 
j
 = 
	`ønd_öt
(
NEVENT
);

56 
tv
.
tv_£c
 = 0;

57 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

58 i‡(
tv
.
tv_u£c
 % 2)

59 
	`evtimî_add
(
ev
[
j
], &
tv
);

61 
	`evtimî_dñ
(
ev
[
j
]);

64 
	}
}

67 
	$maö
 (
¨gc
, **
¨gv
)

69 
timevÆ
 
tv
;

70 
i
;

73 
	`evít_öô
();

75 
i
 = 0; i < 
NEVENT
; i++) {

76 
ev
[
i
] = 
	`mÆloc
((
evít
));

79 
	`evtimî_£t
(
ev
[
i
], 
time_cb
,Év[i]);

80 
tv
.
tv_£c
 = 0;

81 
tv
.
tv_u£c
 = 
	`ønd_öt
(50000);

82 
	`evtimî_add
(
ev
[
i
], &
tv
);

85 
	`evít_di•©ch
();

87  (
ˇŒed
 < 
NEVENT
);

88 
	}
}

	@test/test-weof.c

5 #ifde‡
HAVE_CONFIG_H


6 
	~"c⁄fig.h
"

10 #ifde‡
WIN32


11 
	~<wösock2.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/°©.h
>

15 #ifde‡
HAVE_SYS_TIME_H


16 
	~<sys/time.h
>

18 #ifde‡
HAVE_SYS_SOCKET_H


19 
	~<sys/sockë.h
>

21 
	~<f˙é.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<sig«l.h
>

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

29 
	~<î∫o.h
>

31 
	~<evít.h
>

32 
	~<evutû.h
>

34 
	g∑ú
[2];

35 
	gã°_okay
 = 1;

36 
	gˇŒed
 = 0;

39 
	$wrôe_cb
(
fd
, 
evít
, *
¨g
)

41 c⁄° *
ã°
 = "test string";

42 
Àn
;

44 
Àn
 = 
	`£nd
(
fd
, 
ã°
, 
	`°æí
(test) + 1, 0);

46 
	`¥ötf
("%s: wrôê%d%s\n", 
__func__
,

47 
Àn
,Üen ? "" : " - means EOF");

49 i‡(
Àn
 > 0) {

50 i‡(!
ˇŒed
)

51 
	`evít_add
(
¨g
, 
NULL
);

52 
	`EVUTIL_CLOSESOCKET
(
∑ú
[0]);

53 } i‡(
ˇŒed
 == 1)

54 
ã°_okay
 = 0;

56 
ˇŒed
++;

57 
	}
}

60 
	$maö
 (
¨gc
, **
¨gv
)

62 
evít
 
ev
;

64 #i‚de‡
WIN32


65 i‡(
	`sig«l
(
SIGPIPE
, 
SIG_IGN
Ë=
SIG_ERR
)

69 i‡(
	`evutû_sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
∑ú
) == -1)

73 
	`evít_öô
();

76 
	`evít_£t
(&
ev
, 
∑ú
[1], 
EV_WRITE
, 
wrôe_cb
, &ev);

78 
	`evít_add
(&
ev
, 
NULL
);

80 
	`evít_di•©ch
();

82  (
ã°_okay
);

83 
	}
}

	@
1
.
0
51
700
WIN32-Code/config.h
WIN32-Code/event-config.h
WIN32-Code/tree.h
WIN32-Code/win32.c
buffer.c
compat/sys/_libevent_time.h
compat/sys/queue.h
devpoll.c
epoll.c
epoll_sub.c
evbuffer.c
evdns.c
evdns.h
event-internal.h
event.c
event.h
event_tagging.c
evhttp.h
evport.c
evrpc-internal.h
evrpc.c
evrpc.h
evsignal.h
evutil.c
evutil.h
http-internal.h
http.c
kqueue.c
log.c
log.h
min_heap.h
poll.c
sample/event-test.c
sample/signal-test.c
sample/time-test.c
select.c
signal.c
strlcpy-internal.h
strlcpy.c
test/bench.c
test/regress.c
test/regress.gen.c
test/regress.gen.h
test/regress.h
test/regress_dns.c
test/regress_http.c
test/regress_rpc.c
test/test-eof.c
test/test-init.c
test/test-time.c
test/test-weof.c
