----------------------------------------------------------------------------
file:event.h

    function - struct event_base* event_base_new(void)
                用于初始化一个event_base, 但是不会设置到全局current_base,
                如果仅仅调用了event_base_new, 每个event在添加完之后必须手
                动调用event_base_set(struct event_base *base, struct event *ev).

    function - struct event_base* event_init(void)
                初始化一个event_base, 并会设置到全局current_base, 间接调用
                event_base_new.

    function - int event_dispatch(void)
                开始事件循环, 内部调用event_loop, 使用的则是current_base.

    function - int event_base_dispatch(struct event_base *)
                开始事件循环, 内部调用event_base_loop, 使用的是参数传入的event_base.

    function - void event_base_free(struct event_base *)
                释放指定event_base的所有资源, 以及event_base自身.

    function - int event_base_set(struct event_base *, struct event *)
                设置参数 event 归属为参数 event_base管理.
                并重新设定event的优先级(event_base->nactivequeues/2).

    function - int event_loop(int)
                使用current_base进行事件循环处理, 内部调用event_base_loop, 被event_dispatch调用.

    function - int event_base_loop(struct event_base *, int)
                使用参数指定的event_base进行事件循环处理, 被event_base_dispatch调用.

    function - int event_loopexit(const struct timeval *)
                在参数指定的事件到达之后退出循环.

    function - int event_loopbreak(void)
                让current_base的退出处理循环.

    function - int event_base_loopbreak(struct event_base *)
                让指定的event_base的退出处理循环.

    function - int event_priority_set(struct event *ev, int pri)
                设置参数event的优先级别为pri.

    macro - evtimer_add(ev, tv)
          - timeout_add(ev, tv)
                调用event_add添加超时事件.

    macro - evtimer_set(ev, cb, arg)
          - timeout_set(ev, cb, arg)
                调用event_set添加超时事件.

    macro - evtimer_del(ev)
          - timeout_del(ev)
                调用event_del删除超时事件.

    macro - EVBUFFER_LENGTH(strutc evbuffer*)
                针对evbuffer, 获得缓冲区的长度
    macro - EVBUFFER_DATA(strutc evbuffer*)
                针对evbuffer, 获得缓冲区的数据首地址

    macro - EVBUFFER_INPUT   //! 针对bufferevent, 从bufferevent中获得输入缓冲
    macro - EVBUFFER_OUTPUT  //! 针对bufferevent, 从bufferevent中获得输出缓冲
----------------------------------------------------------------------------
